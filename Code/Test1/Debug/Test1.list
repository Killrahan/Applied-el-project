
Test1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005730  080000bc  080000bc  000010bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000258  080057f0  080057f0  000067f0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005a48  08005a48  0000700c  2**0
                  CONTENTS
  4 .ARM          00000000  08005a48  08005a48  0000700c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005a48  08005a48  0000700c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005a48  08005a48  00006a48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005a4c  08005a4c  00006a4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08005a50  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000178  2000000c  08005a5c  0000700c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000184  08005a5c  00007184  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000700c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b5b2  00000000  00000000  00007034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c02  00000000  00000000  000125e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000cb8  00000000  00000000  000141e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000009e5  00000000  00000000  00014ea0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015f78  00000000  00000000  00015885  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000dafe  00000000  00000000  0002b7fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008f573  00000000  00000000  000392fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c886e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000031c4  00000000  00000000  000c88b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006f  00000000  00000000  000cba78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	@ (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	@ (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	@ (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	2000000c 	.word	0x2000000c
 80000dc:	00000000 	.word	0x00000000
 80000e0:	080057d4 	.word	0x080057d4

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	@ (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	@ (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	@ (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			@ (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000010 	.word	0x20000010
 8000100:	080057d4 	.word	0x080057d4

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	@ 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f8f0 	bl	80003ec <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			@ (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__divsi3>:
 8000218:	4603      	mov	r3, r0
 800021a:	430b      	orrs	r3, r1
 800021c:	d47f      	bmi.n	800031e <__divsi3+0x106>
 800021e:	2200      	movs	r2, #0
 8000220:	0843      	lsrs	r3, r0, #1
 8000222:	428b      	cmp	r3, r1
 8000224:	d374      	bcc.n	8000310 <__divsi3+0xf8>
 8000226:	0903      	lsrs	r3, r0, #4
 8000228:	428b      	cmp	r3, r1
 800022a:	d35f      	bcc.n	80002ec <__divsi3+0xd4>
 800022c:	0a03      	lsrs	r3, r0, #8
 800022e:	428b      	cmp	r3, r1
 8000230:	d344      	bcc.n	80002bc <__divsi3+0xa4>
 8000232:	0b03      	lsrs	r3, r0, #12
 8000234:	428b      	cmp	r3, r1
 8000236:	d328      	bcc.n	800028a <__divsi3+0x72>
 8000238:	0c03      	lsrs	r3, r0, #16
 800023a:	428b      	cmp	r3, r1
 800023c:	d30d      	bcc.n	800025a <__divsi3+0x42>
 800023e:	22ff      	movs	r2, #255	@ 0xff
 8000240:	0209      	lsls	r1, r1, #8
 8000242:	ba12      	rev	r2, r2
 8000244:	0c03      	lsrs	r3, r0, #16
 8000246:	428b      	cmp	r3, r1
 8000248:	d302      	bcc.n	8000250 <__divsi3+0x38>
 800024a:	1212      	asrs	r2, r2, #8
 800024c:	0209      	lsls	r1, r1, #8
 800024e:	d065      	beq.n	800031c <__divsi3+0x104>
 8000250:	0b03      	lsrs	r3, r0, #12
 8000252:	428b      	cmp	r3, r1
 8000254:	d319      	bcc.n	800028a <__divsi3+0x72>
 8000256:	e000      	b.n	800025a <__divsi3+0x42>
 8000258:	0a09      	lsrs	r1, r1, #8
 800025a:	0bc3      	lsrs	r3, r0, #15
 800025c:	428b      	cmp	r3, r1
 800025e:	d301      	bcc.n	8000264 <__divsi3+0x4c>
 8000260:	03cb      	lsls	r3, r1, #15
 8000262:	1ac0      	subs	r0, r0, r3
 8000264:	4152      	adcs	r2, r2
 8000266:	0b83      	lsrs	r3, r0, #14
 8000268:	428b      	cmp	r3, r1
 800026a:	d301      	bcc.n	8000270 <__divsi3+0x58>
 800026c:	038b      	lsls	r3, r1, #14
 800026e:	1ac0      	subs	r0, r0, r3
 8000270:	4152      	adcs	r2, r2
 8000272:	0b43      	lsrs	r3, r0, #13
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__divsi3+0x64>
 8000278:	034b      	lsls	r3, r1, #13
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0b03      	lsrs	r3, r0, #12
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x70>
 8000284:	030b      	lsls	r3, r1, #12
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0ac3      	lsrs	r3, r0, #11
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x7c>
 8000290:	02cb      	lsls	r3, r1, #11
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0a83      	lsrs	r3, r0, #10
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x88>
 800029c:	028b      	lsls	r3, r1, #10
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0a43      	lsrs	r3, r0, #9
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x94>
 80002a8:	024b      	lsls	r3, r1, #9
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0a03      	lsrs	r3, r0, #8
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0xa0>
 80002b4:	020b      	lsls	r3, r1, #8
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	d2cd      	bcs.n	8000258 <__divsi3+0x40>
 80002bc:	09c3      	lsrs	r3, r0, #7
 80002be:	428b      	cmp	r3, r1
 80002c0:	d301      	bcc.n	80002c6 <__divsi3+0xae>
 80002c2:	01cb      	lsls	r3, r1, #7
 80002c4:	1ac0      	subs	r0, r0, r3
 80002c6:	4152      	adcs	r2, r2
 80002c8:	0983      	lsrs	r3, r0, #6
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d301      	bcc.n	80002d2 <__divsi3+0xba>
 80002ce:	018b      	lsls	r3, r1, #6
 80002d0:	1ac0      	subs	r0, r0, r3
 80002d2:	4152      	adcs	r2, r2
 80002d4:	0943      	lsrs	r3, r0, #5
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d301      	bcc.n	80002de <__divsi3+0xc6>
 80002da:	014b      	lsls	r3, r1, #5
 80002dc:	1ac0      	subs	r0, r0, r3
 80002de:	4152      	adcs	r2, r2
 80002e0:	0903      	lsrs	r3, r0, #4
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xd2>
 80002e6:	010b      	lsls	r3, r1, #4
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	08c3      	lsrs	r3, r0, #3
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xde>
 80002f2:	00cb      	lsls	r3, r1, #3
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0883      	lsrs	r3, r0, #2
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xea>
 80002fe:	008b      	lsls	r3, r1, #2
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0843      	lsrs	r3, r0, #1
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xf6>
 800030a:	004b      	lsls	r3, r1, #1
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	1a41      	subs	r1, r0, r1
 8000312:	d200      	bcs.n	8000316 <__divsi3+0xfe>
 8000314:	4601      	mov	r1, r0
 8000316:	4152      	adcs	r2, r2
 8000318:	4610      	mov	r0, r2
 800031a:	4770      	bx	lr
 800031c:	e05d      	b.n	80003da <__divsi3+0x1c2>
 800031e:	0fca      	lsrs	r2, r1, #31
 8000320:	d000      	beq.n	8000324 <__divsi3+0x10c>
 8000322:	4249      	negs	r1, r1
 8000324:	1003      	asrs	r3, r0, #32
 8000326:	d300      	bcc.n	800032a <__divsi3+0x112>
 8000328:	4240      	negs	r0, r0
 800032a:	4053      	eors	r3, r2
 800032c:	2200      	movs	r2, #0
 800032e:	469c      	mov	ip, r3
 8000330:	0903      	lsrs	r3, r0, #4
 8000332:	428b      	cmp	r3, r1
 8000334:	d32d      	bcc.n	8000392 <__divsi3+0x17a>
 8000336:	0a03      	lsrs	r3, r0, #8
 8000338:	428b      	cmp	r3, r1
 800033a:	d312      	bcc.n	8000362 <__divsi3+0x14a>
 800033c:	22fc      	movs	r2, #252	@ 0xfc
 800033e:	0189      	lsls	r1, r1, #6
 8000340:	ba12      	rev	r2, r2
 8000342:	0a03      	lsrs	r3, r0, #8
 8000344:	428b      	cmp	r3, r1
 8000346:	d30c      	bcc.n	8000362 <__divsi3+0x14a>
 8000348:	0189      	lsls	r1, r1, #6
 800034a:	1192      	asrs	r2, r2, #6
 800034c:	428b      	cmp	r3, r1
 800034e:	d308      	bcc.n	8000362 <__divsi3+0x14a>
 8000350:	0189      	lsls	r1, r1, #6
 8000352:	1192      	asrs	r2, r2, #6
 8000354:	428b      	cmp	r3, r1
 8000356:	d304      	bcc.n	8000362 <__divsi3+0x14a>
 8000358:	0189      	lsls	r1, r1, #6
 800035a:	d03a      	beq.n	80003d2 <__divsi3+0x1ba>
 800035c:	1192      	asrs	r2, r2, #6
 800035e:	e000      	b.n	8000362 <__divsi3+0x14a>
 8000360:	0989      	lsrs	r1, r1, #6
 8000362:	09c3      	lsrs	r3, r0, #7
 8000364:	428b      	cmp	r3, r1
 8000366:	d301      	bcc.n	800036c <__divsi3+0x154>
 8000368:	01cb      	lsls	r3, r1, #7
 800036a:	1ac0      	subs	r0, r0, r3
 800036c:	4152      	adcs	r2, r2
 800036e:	0983      	lsrs	r3, r0, #6
 8000370:	428b      	cmp	r3, r1
 8000372:	d301      	bcc.n	8000378 <__divsi3+0x160>
 8000374:	018b      	lsls	r3, r1, #6
 8000376:	1ac0      	subs	r0, r0, r3
 8000378:	4152      	adcs	r2, r2
 800037a:	0943      	lsrs	r3, r0, #5
 800037c:	428b      	cmp	r3, r1
 800037e:	d301      	bcc.n	8000384 <__divsi3+0x16c>
 8000380:	014b      	lsls	r3, r1, #5
 8000382:	1ac0      	subs	r0, r0, r3
 8000384:	4152      	adcs	r2, r2
 8000386:	0903      	lsrs	r3, r0, #4
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x178>
 800038c:	010b      	lsls	r3, r1, #4
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	08c3      	lsrs	r3, r0, #3
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x184>
 8000398:	00cb      	lsls	r3, r1, #3
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0883      	lsrs	r3, r0, #2
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x190>
 80003a4:	008b      	lsls	r3, r1, #2
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	d2d9      	bcs.n	8000360 <__divsi3+0x148>
 80003ac:	0843      	lsrs	r3, r0, #1
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d301      	bcc.n	80003b6 <__divsi3+0x19e>
 80003b2:	004b      	lsls	r3, r1, #1
 80003b4:	1ac0      	subs	r0, r0, r3
 80003b6:	4152      	adcs	r2, r2
 80003b8:	1a41      	subs	r1, r0, r1
 80003ba:	d200      	bcs.n	80003be <__divsi3+0x1a6>
 80003bc:	4601      	mov	r1, r0
 80003be:	4663      	mov	r3, ip
 80003c0:	4152      	adcs	r2, r2
 80003c2:	105b      	asrs	r3, r3, #1
 80003c4:	4610      	mov	r0, r2
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x1b4>
 80003c8:	4240      	negs	r0, r0
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d500      	bpl.n	80003d0 <__divsi3+0x1b8>
 80003ce:	4249      	negs	r1, r1
 80003d0:	4770      	bx	lr
 80003d2:	4663      	mov	r3, ip
 80003d4:	105b      	asrs	r3, r3, #1
 80003d6:	d300      	bcc.n	80003da <__divsi3+0x1c2>
 80003d8:	4240      	negs	r0, r0
 80003da:	b501      	push	{r0, lr}
 80003dc:	2000      	movs	r0, #0
 80003de:	f000 f805 	bl	80003ec <__aeabi_idiv0>
 80003e2:	bd02      	pop	{r1, pc}

080003e4 <__aeabi_idivmod>:
 80003e4:	2900      	cmp	r1, #0
 80003e6:	d0f8      	beq.n	80003da <__divsi3+0x1c2>
 80003e8:	e716      	b.n	8000218 <__divsi3>
 80003ea:	4770      	bx	lr

080003ec <__aeabi_idiv0>:
 80003ec:	4770      	bx	lr
 80003ee:	46c0      	nop			@ (mov r8, r8)

080003f0 <__aeabi_cdrcmple>:
 80003f0:	4684      	mov	ip, r0
 80003f2:	0010      	movs	r0, r2
 80003f4:	4662      	mov	r2, ip
 80003f6:	468c      	mov	ip, r1
 80003f8:	0019      	movs	r1, r3
 80003fa:	4663      	mov	r3, ip
 80003fc:	e000      	b.n	8000400 <__aeabi_cdcmpeq>
 80003fe:	46c0      	nop			@ (mov r8, r8)

08000400 <__aeabi_cdcmpeq>:
 8000400:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000402:	f000 ff87 	bl	8001314 <__ledf2>
 8000406:	2800      	cmp	r0, #0
 8000408:	d401      	bmi.n	800040e <__aeabi_cdcmpeq+0xe>
 800040a:	2100      	movs	r1, #0
 800040c:	42c8      	cmn	r0, r1
 800040e:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000410 <__aeabi_dcmpeq>:
 8000410:	b510      	push	{r4, lr}
 8000412:	f000 fec7 	bl	80011a4 <__eqdf2>
 8000416:	4240      	negs	r0, r0
 8000418:	3001      	adds	r0, #1
 800041a:	bd10      	pop	{r4, pc}

0800041c <__aeabi_dcmplt>:
 800041c:	b510      	push	{r4, lr}
 800041e:	f000 ff79 	bl	8001314 <__ledf2>
 8000422:	2800      	cmp	r0, #0
 8000424:	db01      	blt.n	800042a <__aeabi_dcmplt+0xe>
 8000426:	2000      	movs	r0, #0
 8000428:	bd10      	pop	{r4, pc}
 800042a:	2001      	movs	r0, #1
 800042c:	bd10      	pop	{r4, pc}
 800042e:	46c0      	nop			@ (mov r8, r8)

08000430 <__aeabi_dcmple>:
 8000430:	b510      	push	{r4, lr}
 8000432:	f000 ff6f 	bl	8001314 <__ledf2>
 8000436:	2800      	cmp	r0, #0
 8000438:	dd01      	ble.n	800043e <__aeabi_dcmple+0xe>
 800043a:	2000      	movs	r0, #0
 800043c:	bd10      	pop	{r4, pc}
 800043e:	2001      	movs	r0, #1
 8000440:	bd10      	pop	{r4, pc}
 8000442:	46c0      	nop			@ (mov r8, r8)

08000444 <__aeabi_dcmpgt>:
 8000444:	b510      	push	{r4, lr}
 8000446:	f000 fef1 	bl	800122c <__gedf2>
 800044a:	2800      	cmp	r0, #0
 800044c:	dc01      	bgt.n	8000452 <__aeabi_dcmpgt+0xe>
 800044e:	2000      	movs	r0, #0
 8000450:	bd10      	pop	{r4, pc}
 8000452:	2001      	movs	r0, #1
 8000454:	bd10      	pop	{r4, pc}
 8000456:	46c0      	nop			@ (mov r8, r8)

08000458 <__aeabi_dcmpge>:
 8000458:	b510      	push	{r4, lr}
 800045a:	f000 fee7 	bl	800122c <__gedf2>
 800045e:	2800      	cmp	r0, #0
 8000460:	da01      	bge.n	8000466 <__aeabi_dcmpge+0xe>
 8000462:	2000      	movs	r0, #0
 8000464:	bd10      	pop	{r4, pc}
 8000466:	2001      	movs	r0, #1
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			@ (mov r8, r8)

0800046c <__aeabi_d2uiz>:
 800046c:	b570      	push	{r4, r5, r6, lr}
 800046e:	2200      	movs	r2, #0
 8000470:	4b0c      	ldr	r3, [pc, #48]	@ (80004a4 <__aeabi_d2uiz+0x38>)
 8000472:	0004      	movs	r4, r0
 8000474:	000d      	movs	r5, r1
 8000476:	f7ff ffef 	bl	8000458 <__aeabi_dcmpge>
 800047a:	2800      	cmp	r0, #0
 800047c:	d104      	bne.n	8000488 <__aeabi_d2uiz+0x1c>
 800047e:	0020      	movs	r0, r4
 8000480:	0029      	movs	r1, r5
 8000482:	f001 fe1d 	bl	80020c0 <__aeabi_d2iz>
 8000486:	bd70      	pop	{r4, r5, r6, pc}
 8000488:	4b06      	ldr	r3, [pc, #24]	@ (80004a4 <__aeabi_d2uiz+0x38>)
 800048a:	2200      	movs	r2, #0
 800048c:	0020      	movs	r0, r4
 800048e:	0029      	movs	r1, r5
 8000490:	f001 fa7a 	bl	8001988 <__aeabi_dsub>
 8000494:	f001 fe14 	bl	80020c0 <__aeabi_d2iz>
 8000498:	2380      	movs	r3, #128	@ 0x80
 800049a:	061b      	lsls	r3, r3, #24
 800049c:	469c      	mov	ip, r3
 800049e:	4460      	add	r0, ip
 80004a0:	e7f1      	b.n	8000486 <__aeabi_d2uiz+0x1a>
 80004a2:	46c0      	nop			@ (mov r8, r8)
 80004a4:	41e00000 	.word	0x41e00000

080004a8 <__aeabi_dadd>:
 80004a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004aa:	4657      	mov	r7, sl
 80004ac:	464e      	mov	r6, r9
 80004ae:	4645      	mov	r5, r8
 80004b0:	46de      	mov	lr, fp
 80004b2:	b5e0      	push	{r5, r6, r7, lr}
 80004b4:	b083      	sub	sp, #12
 80004b6:	9000      	str	r0, [sp, #0]
 80004b8:	9101      	str	r1, [sp, #4]
 80004ba:	030c      	lsls	r4, r1, #12
 80004bc:	004f      	lsls	r7, r1, #1
 80004be:	0fce      	lsrs	r6, r1, #31
 80004c0:	0a61      	lsrs	r1, r4, #9
 80004c2:	9c00      	ldr	r4, [sp, #0]
 80004c4:	031d      	lsls	r5, r3, #12
 80004c6:	0f64      	lsrs	r4, r4, #29
 80004c8:	430c      	orrs	r4, r1
 80004ca:	9900      	ldr	r1, [sp, #0]
 80004cc:	9200      	str	r2, [sp, #0]
 80004ce:	9301      	str	r3, [sp, #4]
 80004d0:	00c8      	lsls	r0, r1, #3
 80004d2:	0059      	lsls	r1, r3, #1
 80004d4:	0d4b      	lsrs	r3, r1, #21
 80004d6:	4699      	mov	r9, r3
 80004d8:	9a00      	ldr	r2, [sp, #0]
 80004da:	9b01      	ldr	r3, [sp, #4]
 80004dc:	0a6d      	lsrs	r5, r5, #9
 80004de:	0fd9      	lsrs	r1, r3, #31
 80004e0:	0f53      	lsrs	r3, r2, #29
 80004e2:	432b      	orrs	r3, r5
 80004e4:	469a      	mov	sl, r3
 80004e6:	9b00      	ldr	r3, [sp, #0]
 80004e8:	0d7f      	lsrs	r7, r7, #21
 80004ea:	00da      	lsls	r2, r3, #3
 80004ec:	4694      	mov	ip, r2
 80004ee:	464a      	mov	r2, r9
 80004f0:	46b0      	mov	r8, r6
 80004f2:	1aba      	subs	r2, r7, r2
 80004f4:	428e      	cmp	r6, r1
 80004f6:	d100      	bne.n	80004fa <__aeabi_dadd+0x52>
 80004f8:	e0b0      	b.n	800065c <__aeabi_dadd+0x1b4>
 80004fa:	2a00      	cmp	r2, #0
 80004fc:	dc00      	bgt.n	8000500 <__aeabi_dadd+0x58>
 80004fe:	e078      	b.n	80005f2 <__aeabi_dadd+0x14a>
 8000500:	4649      	mov	r1, r9
 8000502:	2900      	cmp	r1, #0
 8000504:	d100      	bne.n	8000508 <__aeabi_dadd+0x60>
 8000506:	e0e9      	b.n	80006dc <__aeabi_dadd+0x234>
 8000508:	49c9      	ldr	r1, [pc, #804]	@ (8000830 <__aeabi_dadd+0x388>)
 800050a:	428f      	cmp	r7, r1
 800050c:	d100      	bne.n	8000510 <__aeabi_dadd+0x68>
 800050e:	e195      	b.n	800083c <__aeabi_dadd+0x394>
 8000510:	2501      	movs	r5, #1
 8000512:	2a38      	cmp	r2, #56	@ 0x38
 8000514:	dc16      	bgt.n	8000544 <__aeabi_dadd+0x9c>
 8000516:	2180      	movs	r1, #128	@ 0x80
 8000518:	4653      	mov	r3, sl
 800051a:	0409      	lsls	r1, r1, #16
 800051c:	430b      	orrs	r3, r1
 800051e:	469a      	mov	sl, r3
 8000520:	2a1f      	cmp	r2, #31
 8000522:	dd00      	ble.n	8000526 <__aeabi_dadd+0x7e>
 8000524:	e1e7      	b.n	80008f6 <__aeabi_dadd+0x44e>
 8000526:	2120      	movs	r1, #32
 8000528:	4655      	mov	r5, sl
 800052a:	1a8b      	subs	r3, r1, r2
 800052c:	4661      	mov	r1, ip
 800052e:	409d      	lsls	r5, r3
 8000530:	40d1      	lsrs	r1, r2
 8000532:	430d      	orrs	r5, r1
 8000534:	4661      	mov	r1, ip
 8000536:	4099      	lsls	r1, r3
 8000538:	1e4b      	subs	r3, r1, #1
 800053a:	4199      	sbcs	r1, r3
 800053c:	4653      	mov	r3, sl
 800053e:	40d3      	lsrs	r3, r2
 8000540:	430d      	orrs	r5, r1
 8000542:	1ae4      	subs	r4, r4, r3
 8000544:	1b45      	subs	r5, r0, r5
 8000546:	42a8      	cmp	r0, r5
 8000548:	4180      	sbcs	r0, r0
 800054a:	4240      	negs	r0, r0
 800054c:	1a24      	subs	r4, r4, r0
 800054e:	0223      	lsls	r3, r4, #8
 8000550:	d400      	bmi.n	8000554 <__aeabi_dadd+0xac>
 8000552:	e10f      	b.n	8000774 <__aeabi_dadd+0x2cc>
 8000554:	0264      	lsls	r4, r4, #9
 8000556:	0a64      	lsrs	r4, r4, #9
 8000558:	2c00      	cmp	r4, #0
 800055a:	d100      	bne.n	800055e <__aeabi_dadd+0xb6>
 800055c:	e139      	b.n	80007d2 <__aeabi_dadd+0x32a>
 800055e:	0020      	movs	r0, r4
 8000560:	f001 fe18 	bl	8002194 <__clzsi2>
 8000564:	0003      	movs	r3, r0
 8000566:	3b08      	subs	r3, #8
 8000568:	2120      	movs	r1, #32
 800056a:	0028      	movs	r0, r5
 800056c:	1aca      	subs	r2, r1, r3
 800056e:	40d0      	lsrs	r0, r2
 8000570:	409c      	lsls	r4, r3
 8000572:	0002      	movs	r2, r0
 8000574:	409d      	lsls	r5, r3
 8000576:	4322      	orrs	r2, r4
 8000578:	429f      	cmp	r7, r3
 800057a:	dd00      	ble.n	800057e <__aeabi_dadd+0xd6>
 800057c:	e173      	b.n	8000866 <__aeabi_dadd+0x3be>
 800057e:	1bd8      	subs	r0, r3, r7
 8000580:	3001      	adds	r0, #1
 8000582:	1a09      	subs	r1, r1, r0
 8000584:	002c      	movs	r4, r5
 8000586:	408d      	lsls	r5, r1
 8000588:	40c4      	lsrs	r4, r0
 800058a:	1e6b      	subs	r3, r5, #1
 800058c:	419d      	sbcs	r5, r3
 800058e:	0013      	movs	r3, r2
 8000590:	40c2      	lsrs	r2, r0
 8000592:	408b      	lsls	r3, r1
 8000594:	4325      	orrs	r5, r4
 8000596:	2700      	movs	r7, #0
 8000598:	0014      	movs	r4, r2
 800059a:	431d      	orrs	r5, r3
 800059c:	076b      	lsls	r3, r5, #29
 800059e:	d009      	beq.n	80005b4 <__aeabi_dadd+0x10c>
 80005a0:	230f      	movs	r3, #15
 80005a2:	402b      	ands	r3, r5
 80005a4:	2b04      	cmp	r3, #4
 80005a6:	d005      	beq.n	80005b4 <__aeabi_dadd+0x10c>
 80005a8:	1d2b      	adds	r3, r5, #4
 80005aa:	42ab      	cmp	r3, r5
 80005ac:	41ad      	sbcs	r5, r5
 80005ae:	426d      	negs	r5, r5
 80005b0:	1964      	adds	r4, r4, r5
 80005b2:	001d      	movs	r5, r3
 80005b4:	0223      	lsls	r3, r4, #8
 80005b6:	d400      	bmi.n	80005ba <__aeabi_dadd+0x112>
 80005b8:	e12d      	b.n	8000816 <__aeabi_dadd+0x36e>
 80005ba:	4a9d      	ldr	r2, [pc, #628]	@ (8000830 <__aeabi_dadd+0x388>)
 80005bc:	3701      	adds	r7, #1
 80005be:	4297      	cmp	r7, r2
 80005c0:	d100      	bne.n	80005c4 <__aeabi_dadd+0x11c>
 80005c2:	e0d3      	b.n	800076c <__aeabi_dadd+0x2c4>
 80005c4:	4646      	mov	r6, r8
 80005c6:	499b      	ldr	r1, [pc, #620]	@ (8000834 <__aeabi_dadd+0x38c>)
 80005c8:	08ed      	lsrs	r5, r5, #3
 80005ca:	4021      	ands	r1, r4
 80005cc:	074a      	lsls	r2, r1, #29
 80005ce:	432a      	orrs	r2, r5
 80005d0:	057c      	lsls	r4, r7, #21
 80005d2:	024d      	lsls	r5, r1, #9
 80005d4:	0b2d      	lsrs	r5, r5, #12
 80005d6:	0d64      	lsrs	r4, r4, #21
 80005d8:	0524      	lsls	r4, r4, #20
 80005da:	432c      	orrs	r4, r5
 80005dc:	07f6      	lsls	r6, r6, #31
 80005de:	4334      	orrs	r4, r6
 80005e0:	0010      	movs	r0, r2
 80005e2:	0021      	movs	r1, r4
 80005e4:	b003      	add	sp, #12
 80005e6:	bcf0      	pop	{r4, r5, r6, r7}
 80005e8:	46bb      	mov	fp, r7
 80005ea:	46b2      	mov	sl, r6
 80005ec:	46a9      	mov	r9, r5
 80005ee:	46a0      	mov	r8, r4
 80005f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80005f2:	2a00      	cmp	r2, #0
 80005f4:	d100      	bne.n	80005f8 <__aeabi_dadd+0x150>
 80005f6:	e084      	b.n	8000702 <__aeabi_dadd+0x25a>
 80005f8:	464a      	mov	r2, r9
 80005fa:	1bd2      	subs	r2, r2, r7
 80005fc:	2f00      	cmp	r7, #0
 80005fe:	d000      	beq.n	8000602 <__aeabi_dadd+0x15a>
 8000600:	e16d      	b.n	80008de <__aeabi_dadd+0x436>
 8000602:	0025      	movs	r5, r4
 8000604:	4305      	orrs	r5, r0
 8000606:	d100      	bne.n	800060a <__aeabi_dadd+0x162>
 8000608:	e127      	b.n	800085a <__aeabi_dadd+0x3b2>
 800060a:	1e56      	subs	r6, r2, #1
 800060c:	2a01      	cmp	r2, #1
 800060e:	d100      	bne.n	8000612 <__aeabi_dadd+0x16a>
 8000610:	e23b      	b.n	8000a8a <__aeabi_dadd+0x5e2>
 8000612:	4d87      	ldr	r5, [pc, #540]	@ (8000830 <__aeabi_dadd+0x388>)
 8000614:	42aa      	cmp	r2, r5
 8000616:	d100      	bne.n	800061a <__aeabi_dadd+0x172>
 8000618:	e26a      	b.n	8000af0 <__aeabi_dadd+0x648>
 800061a:	2501      	movs	r5, #1
 800061c:	2e38      	cmp	r6, #56	@ 0x38
 800061e:	dc12      	bgt.n	8000646 <__aeabi_dadd+0x19e>
 8000620:	0032      	movs	r2, r6
 8000622:	2a1f      	cmp	r2, #31
 8000624:	dd00      	ble.n	8000628 <__aeabi_dadd+0x180>
 8000626:	e1f8      	b.n	8000a1a <__aeabi_dadd+0x572>
 8000628:	2620      	movs	r6, #32
 800062a:	0025      	movs	r5, r4
 800062c:	1ab6      	subs	r6, r6, r2
 800062e:	0007      	movs	r7, r0
 8000630:	4653      	mov	r3, sl
 8000632:	40b0      	lsls	r0, r6
 8000634:	40d4      	lsrs	r4, r2
 8000636:	40b5      	lsls	r5, r6
 8000638:	40d7      	lsrs	r7, r2
 800063a:	1e46      	subs	r6, r0, #1
 800063c:	41b0      	sbcs	r0, r6
 800063e:	1b1b      	subs	r3, r3, r4
 8000640:	469a      	mov	sl, r3
 8000642:	433d      	orrs	r5, r7
 8000644:	4305      	orrs	r5, r0
 8000646:	4662      	mov	r2, ip
 8000648:	1b55      	subs	r5, r2, r5
 800064a:	45ac      	cmp	ip, r5
 800064c:	4192      	sbcs	r2, r2
 800064e:	4653      	mov	r3, sl
 8000650:	4252      	negs	r2, r2
 8000652:	000e      	movs	r6, r1
 8000654:	464f      	mov	r7, r9
 8000656:	4688      	mov	r8, r1
 8000658:	1a9c      	subs	r4, r3, r2
 800065a:	e778      	b.n	800054e <__aeabi_dadd+0xa6>
 800065c:	2a00      	cmp	r2, #0
 800065e:	dc00      	bgt.n	8000662 <__aeabi_dadd+0x1ba>
 8000660:	e08e      	b.n	8000780 <__aeabi_dadd+0x2d8>
 8000662:	4649      	mov	r1, r9
 8000664:	2900      	cmp	r1, #0
 8000666:	d175      	bne.n	8000754 <__aeabi_dadd+0x2ac>
 8000668:	4661      	mov	r1, ip
 800066a:	4653      	mov	r3, sl
 800066c:	4319      	orrs	r1, r3
 800066e:	d100      	bne.n	8000672 <__aeabi_dadd+0x1ca>
 8000670:	e0f6      	b.n	8000860 <__aeabi_dadd+0x3b8>
 8000672:	1e51      	subs	r1, r2, #1
 8000674:	2a01      	cmp	r2, #1
 8000676:	d100      	bne.n	800067a <__aeabi_dadd+0x1d2>
 8000678:	e191      	b.n	800099e <__aeabi_dadd+0x4f6>
 800067a:	4d6d      	ldr	r5, [pc, #436]	@ (8000830 <__aeabi_dadd+0x388>)
 800067c:	42aa      	cmp	r2, r5
 800067e:	d100      	bne.n	8000682 <__aeabi_dadd+0x1da>
 8000680:	e0dc      	b.n	800083c <__aeabi_dadd+0x394>
 8000682:	2501      	movs	r5, #1
 8000684:	2938      	cmp	r1, #56	@ 0x38
 8000686:	dc14      	bgt.n	80006b2 <__aeabi_dadd+0x20a>
 8000688:	000a      	movs	r2, r1
 800068a:	2a1f      	cmp	r2, #31
 800068c:	dd00      	ble.n	8000690 <__aeabi_dadd+0x1e8>
 800068e:	e1a2      	b.n	80009d6 <__aeabi_dadd+0x52e>
 8000690:	2120      	movs	r1, #32
 8000692:	4653      	mov	r3, sl
 8000694:	1a89      	subs	r1, r1, r2
 8000696:	408b      	lsls	r3, r1
 8000698:	001d      	movs	r5, r3
 800069a:	4663      	mov	r3, ip
 800069c:	40d3      	lsrs	r3, r2
 800069e:	431d      	orrs	r5, r3
 80006a0:	4663      	mov	r3, ip
 80006a2:	408b      	lsls	r3, r1
 80006a4:	0019      	movs	r1, r3
 80006a6:	1e4b      	subs	r3, r1, #1
 80006a8:	4199      	sbcs	r1, r3
 80006aa:	4653      	mov	r3, sl
 80006ac:	40d3      	lsrs	r3, r2
 80006ae:	430d      	orrs	r5, r1
 80006b0:	18e4      	adds	r4, r4, r3
 80006b2:	182d      	adds	r5, r5, r0
 80006b4:	4285      	cmp	r5, r0
 80006b6:	4180      	sbcs	r0, r0
 80006b8:	4240      	negs	r0, r0
 80006ba:	1824      	adds	r4, r4, r0
 80006bc:	0223      	lsls	r3, r4, #8
 80006be:	d559      	bpl.n	8000774 <__aeabi_dadd+0x2cc>
 80006c0:	4b5b      	ldr	r3, [pc, #364]	@ (8000830 <__aeabi_dadd+0x388>)
 80006c2:	3701      	adds	r7, #1
 80006c4:	429f      	cmp	r7, r3
 80006c6:	d051      	beq.n	800076c <__aeabi_dadd+0x2c4>
 80006c8:	2101      	movs	r1, #1
 80006ca:	4b5a      	ldr	r3, [pc, #360]	@ (8000834 <__aeabi_dadd+0x38c>)
 80006cc:	086a      	lsrs	r2, r5, #1
 80006ce:	401c      	ands	r4, r3
 80006d0:	4029      	ands	r1, r5
 80006d2:	430a      	orrs	r2, r1
 80006d4:	07e5      	lsls	r5, r4, #31
 80006d6:	4315      	orrs	r5, r2
 80006d8:	0864      	lsrs	r4, r4, #1
 80006da:	e75f      	b.n	800059c <__aeabi_dadd+0xf4>
 80006dc:	4661      	mov	r1, ip
 80006de:	4653      	mov	r3, sl
 80006e0:	4319      	orrs	r1, r3
 80006e2:	d100      	bne.n	80006e6 <__aeabi_dadd+0x23e>
 80006e4:	e0bc      	b.n	8000860 <__aeabi_dadd+0x3b8>
 80006e6:	1e51      	subs	r1, r2, #1
 80006e8:	2a01      	cmp	r2, #1
 80006ea:	d100      	bne.n	80006ee <__aeabi_dadd+0x246>
 80006ec:	e164      	b.n	80009b8 <__aeabi_dadd+0x510>
 80006ee:	4d50      	ldr	r5, [pc, #320]	@ (8000830 <__aeabi_dadd+0x388>)
 80006f0:	42aa      	cmp	r2, r5
 80006f2:	d100      	bne.n	80006f6 <__aeabi_dadd+0x24e>
 80006f4:	e16a      	b.n	80009cc <__aeabi_dadd+0x524>
 80006f6:	2501      	movs	r5, #1
 80006f8:	2938      	cmp	r1, #56	@ 0x38
 80006fa:	dd00      	ble.n	80006fe <__aeabi_dadd+0x256>
 80006fc:	e722      	b.n	8000544 <__aeabi_dadd+0x9c>
 80006fe:	000a      	movs	r2, r1
 8000700:	e70e      	b.n	8000520 <__aeabi_dadd+0x78>
 8000702:	4a4d      	ldr	r2, [pc, #308]	@ (8000838 <__aeabi_dadd+0x390>)
 8000704:	1c7d      	adds	r5, r7, #1
 8000706:	4215      	tst	r5, r2
 8000708:	d000      	beq.n	800070c <__aeabi_dadd+0x264>
 800070a:	e0d0      	b.n	80008ae <__aeabi_dadd+0x406>
 800070c:	0025      	movs	r5, r4
 800070e:	4662      	mov	r2, ip
 8000710:	4653      	mov	r3, sl
 8000712:	4305      	orrs	r5, r0
 8000714:	431a      	orrs	r2, r3
 8000716:	2f00      	cmp	r7, #0
 8000718:	d000      	beq.n	800071c <__aeabi_dadd+0x274>
 800071a:	e137      	b.n	800098c <__aeabi_dadd+0x4e4>
 800071c:	2d00      	cmp	r5, #0
 800071e:	d100      	bne.n	8000722 <__aeabi_dadd+0x27a>
 8000720:	e1a8      	b.n	8000a74 <__aeabi_dadd+0x5cc>
 8000722:	2a00      	cmp	r2, #0
 8000724:	d100      	bne.n	8000728 <__aeabi_dadd+0x280>
 8000726:	e16a      	b.n	80009fe <__aeabi_dadd+0x556>
 8000728:	4663      	mov	r3, ip
 800072a:	1ac5      	subs	r5, r0, r3
 800072c:	4653      	mov	r3, sl
 800072e:	1ae2      	subs	r2, r4, r3
 8000730:	42a8      	cmp	r0, r5
 8000732:	419b      	sbcs	r3, r3
 8000734:	425b      	negs	r3, r3
 8000736:	1ad3      	subs	r3, r2, r3
 8000738:	021a      	lsls	r2, r3, #8
 800073a:	d400      	bmi.n	800073e <__aeabi_dadd+0x296>
 800073c:	e203      	b.n	8000b46 <__aeabi_dadd+0x69e>
 800073e:	4663      	mov	r3, ip
 8000740:	1a1d      	subs	r5, r3, r0
 8000742:	45ac      	cmp	ip, r5
 8000744:	4192      	sbcs	r2, r2
 8000746:	4653      	mov	r3, sl
 8000748:	4252      	negs	r2, r2
 800074a:	1b1c      	subs	r4, r3, r4
 800074c:	000e      	movs	r6, r1
 800074e:	4688      	mov	r8, r1
 8000750:	1aa4      	subs	r4, r4, r2
 8000752:	e723      	b.n	800059c <__aeabi_dadd+0xf4>
 8000754:	4936      	ldr	r1, [pc, #216]	@ (8000830 <__aeabi_dadd+0x388>)
 8000756:	428f      	cmp	r7, r1
 8000758:	d070      	beq.n	800083c <__aeabi_dadd+0x394>
 800075a:	2501      	movs	r5, #1
 800075c:	2a38      	cmp	r2, #56	@ 0x38
 800075e:	dca8      	bgt.n	80006b2 <__aeabi_dadd+0x20a>
 8000760:	2180      	movs	r1, #128	@ 0x80
 8000762:	4653      	mov	r3, sl
 8000764:	0409      	lsls	r1, r1, #16
 8000766:	430b      	orrs	r3, r1
 8000768:	469a      	mov	sl, r3
 800076a:	e78e      	b.n	800068a <__aeabi_dadd+0x1e2>
 800076c:	003c      	movs	r4, r7
 800076e:	2500      	movs	r5, #0
 8000770:	2200      	movs	r2, #0
 8000772:	e731      	b.n	80005d8 <__aeabi_dadd+0x130>
 8000774:	2307      	movs	r3, #7
 8000776:	402b      	ands	r3, r5
 8000778:	2b00      	cmp	r3, #0
 800077a:	d000      	beq.n	800077e <__aeabi_dadd+0x2d6>
 800077c:	e710      	b.n	80005a0 <__aeabi_dadd+0xf8>
 800077e:	e093      	b.n	80008a8 <__aeabi_dadd+0x400>
 8000780:	2a00      	cmp	r2, #0
 8000782:	d074      	beq.n	800086e <__aeabi_dadd+0x3c6>
 8000784:	464a      	mov	r2, r9
 8000786:	1bd2      	subs	r2, r2, r7
 8000788:	2f00      	cmp	r7, #0
 800078a:	d100      	bne.n	800078e <__aeabi_dadd+0x2e6>
 800078c:	e0c7      	b.n	800091e <__aeabi_dadd+0x476>
 800078e:	4928      	ldr	r1, [pc, #160]	@ (8000830 <__aeabi_dadd+0x388>)
 8000790:	4589      	cmp	r9, r1
 8000792:	d100      	bne.n	8000796 <__aeabi_dadd+0x2ee>
 8000794:	e185      	b.n	8000aa2 <__aeabi_dadd+0x5fa>
 8000796:	2501      	movs	r5, #1
 8000798:	2a38      	cmp	r2, #56	@ 0x38
 800079a:	dc12      	bgt.n	80007c2 <__aeabi_dadd+0x31a>
 800079c:	2180      	movs	r1, #128	@ 0x80
 800079e:	0409      	lsls	r1, r1, #16
 80007a0:	430c      	orrs	r4, r1
 80007a2:	2a1f      	cmp	r2, #31
 80007a4:	dd00      	ble.n	80007a8 <__aeabi_dadd+0x300>
 80007a6:	e1ab      	b.n	8000b00 <__aeabi_dadd+0x658>
 80007a8:	2120      	movs	r1, #32
 80007aa:	0025      	movs	r5, r4
 80007ac:	1a89      	subs	r1, r1, r2
 80007ae:	0007      	movs	r7, r0
 80007b0:	4088      	lsls	r0, r1
 80007b2:	408d      	lsls	r5, r1
 80007b4:	40d7      	lsrs	r7, r2
 80007b6:	1e41      	subs	r1, r0, #1
 80007b8:	4188      	sbcs	r0, r1
 80007ba:	40d4      	lsrs	r4, r2
 80007bc:	433d      	orrs	r5, r7
 80007be:	4305      	orrs	r5, r0
 80007c0:	44a2      	add	sl, r4
 80007c2:	4465      	add	r5, ip
 80007c4:	4565      	cmp	r5, ip
 80007c6:	4192      	sbcs	r2, r2
 80007c8:	4252      	negs	r2, r2
 80007ca:	4452      	add	r2, sl
 80007cc:	0014      	movs	r4, r2
 80007ce:	464f      	mov	r7, r9
 80007d0:	e774      	b.n	80006bc <__aeabi_dadd+0x214>
 80007d2:	0028      	movs	r0, r5
 80007d4:	f001 fcde 	bl	8002194 <__clzsi2>
 80007d8:	0003      	movs	r3, r0
 80007da:	3318      	adds	r3, #24
 80007dc:	2b1f      	cmp	r3, #31
 80007de:	dc00      	bgt.n	80007e2 <__aeabi_dadd+0x33a>
 80007e0:	e6c2      	b.n	8000568 <__aeabi_dadd+0xc0>
 80007e2:	002a      	movs	r2, r5
 80007e4:	3808      	subs	r0, #8
 80007e6:	4082      	lsls	r2, r0
 80007e8:	429f      	cmp	r7, r3
 80007ea:	dd00      	ble.n	80007ee <__aeabi_dadd+0x346>
 80007ec:	e0a9      	b.n	8000942 <__aeabi_dadd+0x49a>
 80007ee:	1bdb      	subs	r3, r3, r7
 80007f0:	1c58      	adds	r0, r3, #1
 80007f2:	281f      	cmp	r0, #31
 80007f4:	dc00      	bgt.n	80007f8 <__aeabi_dadd+0x350>
 80007f6:	e1ac      	b.n	8000b52 <__aeabi_dadd+0x6aa>
 80007f8:	0015      	movs	r5, r2
 80007fa:	3b1f      	subs	r3, #31
 80007fc:	40dd      	lsrs	r5, r3
 80007fe:	2820      	cmp	r0, #32
 8000800:	d005      	beq.n	800080e <__aeabi_dadd+0x366>
 8000802:	2340      	movs	r3, #64	@ 0x40
 8000804:	1a1b      	subs	r3, r3, r0
 8000806:	409a      	lsls	r2, r3
 8000808:	1e53      	subs	r3, r2, #1
 800080a:	419a      	sbcs	r2, r3
 800080c:	4315      	orrs	r5, r2
 800080e:	2307      	movs	r3, #7
 8000810:	2700      	movs	r7, #0
 8000812:	402b      	ands	r3, r5
 8000814:	e7b0      	b.n	8000778 <__aeabi_dadd+0x2d0>
 8000816:	08ed      	lsrs	r5, r5, #3
 8000818:	4b05      	ldr	r3, [pc, #20]	@ (8000830 <__aeabi_dadd+0x388>)
 800081a:	0762      	lsls	r2, r4, #29
 800081c:	432a      	orrs	r2, r5
 800081e:	08e4      	lsrs	r4, r4, #3
 8000820:	429f      	cmp	r7, r3
 8000822:	d00f      	beq.n	8000844 <__aeabi_dadd+0x39c>
 8000824:	0324      	lsls	r4, r4, #12
 8000826:	0b25      	lsrs	r5, r4, #12
 8000828:	057c      	lsls	r4, r7, #21
 800082a:	0d64      	lsrs	r4, r4, #21
 800082c:	e6d4      	b.n	80005d8 <__aeabi_dadd+0x130>
 800082e:	46c0      	nop			@ (mov r8, r8)
 8000830:	000007ff 	.word	0x000007ff
 8000834:	ff7fffff 	.word	0xff7fffff
 8000838:	000007fe 	.word	0x000007fe
 800083c:	08c0      	lsrs	r0, r0, #3
 800083e:	0762      	lsls	r2, r4, #29
 8000840:	4302      	orrs	r2, r0
 8000842:	08e4      	lsrs	r4, r4, #3
 8000844:	0013      	movs	r3, r2
 8000846:	4323      	orrs	r3, r4
 8000848:	d100      	bne.n	800084c <__aeabi_dadd+0x3a4>
 800084a:	e186      	b.n	8000b5a <__aeabi_dadd+0x6b2>
 800084c:	2580      	movs	r5, #128	@ 0x80
 800084e:	032d      	lsls	r5, r5, #12
 8000850:	4325      	orrs	r5, r4
 8000852:	032d      	lsls	r5, r5, #12
 8000854:	4cc3      	ldr	r4, [pc, #780]	@ (8000b64 <__aeabi_dadd+0x6bc>)
 8000856:	0b2d      	lsrs	r5, r5, #12
 8000858:	e6be      	b.n	80005d8 <__aeabi_dadd+0x130>
 800085a:	4660      	mov	r0, ip
 800085c:	4654      	mov	r4, sl
 800085e:	000e      	movs	r6, r1
 8000860:	0017      	movs	r7, r2
 8000862:	08c5      	lsrs	r5, r0, #3
 8000864:	e7d8      	b.n	8000818 <__aeabi_dadd+0x370>
 8000866:	4cc0      	ldr	r4, [pc, #768]	@ (8000b68 <__aeabi_dadd+0x6c0>)
 8000868:	1aff      	subs	r7, r7, r3
 800086a:	4014      	ands	r4, r2
 800086c:	e696      	b.n	800059c <__aeabi_dadd+0xf4>
 800086e:	4abf      	ldr	r2, [pc, #764]	@ (8000b6c <__aeabi_dadd+0x6c4>)
 8000870:	1c79      	adds	r1, r7, #1
 8000872:	4211      	tst	r1, r2
 8000874:	d16b      	bne.n	800094e <__aeabi_dadd+0x4a6>
 8000876:	0022      	movs	r2, r4
 8000878:	4302      	orrs	r2, r0
 800087a:	2f00      	cmp	r7, #0
 800087c:	d000      	beq.n	8000880 <__aeabi_dadd+0x3d8>
 800087e:	e0db      	b.n	8000a38 <__aeabi_dadd+0x590>
 8000880:	2a00      	cmp	r2, #0
 8000882:	d100      	bne.n	8000886 <__aeabi_dadd+0x3de>
 8000884:	e12d      	b.n	8000ae2 <__aeabi_dadd+0x63a>
 8000886:	4662      	mov	r2, ip
 8000888:	4653      	mov	r3, sl
 800088a:	431a      	orrs	r2, r3
 800088c:	d100      	bne.n	8000890 <__aeabi_dadd+0x3e8>
 800088e:	e0b6      	b.n	80009fe <__aeabi_dadd+0x556>
 8000890:	4663      	mov	r3, ip
 8000892:	18c5      	adds	r5, r0, r3
 8000894:	4285      	cmp	r5, r0
 8000896:	4180      	sbcs	r0, r0
 8000898:	4454      	add	r4, sl
 800089a:	4240      	negs	r0, r0
 800089c:	1824      	adds	r4, r4, r0
 800089e:	0223      	lsls	r3, r4, #8
 80008a0:	d502      	bpl.n	80008a8 <__aeabi_dadd+0x400>
 80008a2:	000f      	movs	r7, r1
 80008a4:	4bb0      	ldr	r3, [pc, #704]	@ (8000b68 <__aeabi_dadd+0x6c0>)
 80008a6:	401c      	ands	r4, r3
 80008a8:	003a      	movs	r2, r7
 80008aa:	0028      	movs	r0, r5
 80008ac:	e7d8      	b.n	8000860 <__aeabi_dadd+0x3b8>
 80008ae:	4662      	mov	r2, ip
 80008b0:	1a85      	subs	r5, r0, r2
 80008b2:	42a8      	cmp	r0, r5
 80008b4:	4192      	sbcs	r2, r2
 80008b6:	4653      	mov	r3, sl
 80008b8:	4252      	negs	r2, r2
 80008ba:	4691      	mov	r9, r2
 80008bc:	1ae3      	subs	r3, r4, r3
 80008be:	001a      	movs	r2, r3
 80008c0:	464b      	mov	r3, r9
 80008c2:	1ad2      	subs	r2, r2, r3
 80008c4:	0013      	movs	r3, r2
 80008c6:	4691      	mov	r9, r2
 80008c8:	021a      	lsls	r2, r3, #8
 80008ca:	d454      	bmi.n	8000976 <__aeabi_dadd+0x4ce>
 80008cc:	464a      	mov	r2, r9
 80008ce:	464c      	mov	r4, r9
 80008d0:	432a      	orrs	r2, r5
 80008d2:	d000      	beq.n	80008d6 <__aeabi_dadd+0x42e>
 80008d4:	e640      	b.n	8000558 <__aeabi_dadd+0xb0>
 80008d6:	2600      	movs	r6, #0
 80008d8:	2400      	movs	r4, #0
 80008da:	2500      	movs	r5, #0
 80008dc:	e67c      	b.n	80005d8 <__aeabi_dadd+0x130>
 80008de:	4da1      	ldr	r5, [pc, #644]	@ (8000b64 <__aeabi_dadd+0x6bc>)
 80008e0:	45a9      	cmp	r9, r5
 80008e2:	d100      	bne.n	80008e6 <__aeabi_dadd+0x43e>
 80008e4:	e090      	b.n	8000a08 <__aeabi_dadd+0x560>
 80008e6:	2501      	movs	r5, #1
 80008e8:	2a38      	cmp	r2, #56	@ 0x38
 80008ea:	dd00      	ble.n	80008ee <__aeabi_dadd+0x446>
 80008ec:	e6ab      	b.n	8000646 <__aeabi_dadd+0x19e>
 80008ee:	2580      	movs	r5, #128	@ 0x80
 80008f0:	042d      	lsls	r5, r5, #16
 80008f2:	432c      	orrs	r4, r5
 80008f4:	e695      	b.n	8000622 <__aeabi_dadd+0x17a>
 80008f6:	0011      	movs	r1, r2
 80008f8:	4655      	mov	r5, sl
 80008fa:	3920      	subs	r1, #32
 80008fc:	40cd      	lsrs	r5, r1
 80008fe:	46a9      	mov	r9, r5
 8000900:	2a20      	cmp	r2, #32
 8000902:	d006      	beq.n	8000912 <__aeabi_dadd+0x46a>
 8000904:	2140      	movs	r1, #64	@ 0x40
 8000906:	4653      	mov	r3, sl
 8000908:	1a8a      	subs	r2, r1, r2
 800090a:	4093      	lsls	r3, r2
 800090c:	4662      	mov	r2, ip
 800090e:	431a      	orrs	r2, r3
 8000910:	4694      	mov	ip, r2
 8000912:	4665      	mov	r5, ip
 8000914:	1e6b      	subs	r3, r5, #1
 8000916:	419d      	sbcs	r5, r3
 8000918:	464b      	mov	r3, r9
 800091a:	431d      	orrs	r5, r3
 800091c:	e612      	b.n	8000544 <__aeabi_dadd+0x9c>
 800091e:	0021      	movs	r1, r4
 8000920:	4301      	orrs	r1, r0
 8000922:	d100      	bne.n	8000926 <__aeabi_dadd+0x47e>
 8000924:	e0c4      	b.n	8000ab0 <__aeabi_dadd+0x608>
 8000926:	1e51      	subs	r1, r2, #1
 8000928:	2a01      	cmp	r2, #1
 800092a:	d100      	bne.n	800092e <__aeabi_dadd+0x486>
 800092c:	e0fb      	b.n	8000b26 <__aeabi_dadd+0x67e>
 800092e:	4d8d      	ldr	r5, [pc, #564]	@ (8000b64 <__aeabi_dadd+0x6bc>)
 8000930:	42aa      	cmp	r2, r5
 8000932:	d100      	bne.n	8000936 <__aeabi_dadd+0x48e>
 8000934:	e0b5      	b.n	8000aa2 <__aeabi_dadd+0x5fa>
 8000936:	2501      	movs	r5, #1
 8000938:	2938      	cmp	r1, #56	@ 0x38
 800093a:	dd00      	ble.n	800093e <__aeabi_dadd+0x496>
 800093c:	e741      	b.n	80007c2 <__aeabi_dadd+0x31a>
 800093e:	000a      	movs	r2, r1
 8000940:	e72f      	b.n	80007a2 <__aeabi_dadd+0x2fa>
 8000942:	4c89      	ldr	r4, [pc, #548]	@ (8000b68 <__aeabi_dadd+0x6c0>)
 8000944:	1aff      	subs	r7, r7, r3
 8000946:	4014      	ands	r4, r2
 8000948:	0762      	lsls	r2, r4, #29
 800094a:	08e4      	lsrs	r4, r4, #3
 800094c:	e76a      	b.n	8000824 <__aeabi_dadd+0x37c>
 800094e:	4a85      	ldr	r2, [pc, #532]	@ (8000b64 <__aeabi_dadd+0x6bc>)
 8000950:	4291      	cmp	r1, r2
 8000952:	d100      	bne.n	8000956 <__aeabi_dadd+0x4ae>
 8000954:	e0e3      	b.n	8000b1e <__aeabi_dadd+0x676>
 8000956:	4663      	mov	r3, ip
 8000958:	18c2      	adds	r2, r0, r3
 800095a:	4282      	cmp	r2, r0
 800095c:	4180      	sbcs	r0, r0
 800095e:	0023      	movs	r3, r4
 8000960:	4240      	negs	r0, r0
 8000962:	4453      	add	r3, sl
 8000964:	181b      	adds	r3, r3, r0
 8000966:	07dd      	lsls	r5, r3, #31
 8000968:	085c      	lsrs	r4, r3, #1
 800096a:	2307      	movs	r3, #7
 800096c:	0852      	lsrs	r2, r2, #1
 800096e:	4315      	orrs	r5, r2
 8000970:	000f      	movs	r7, r1
 8000972:	402b      	ands	r3, r5
 8000974:	e700      	b.n	8000778 <__aeabi_dadd+0x2d0>
 8000976:	4663      	mov	r3, ip
 8000978:	1a1d      	subs	r5, r3, r0
 800097a:	45ac      	cmp	ip, r5
 800097c:	4192      	sbcs	r2, r2
 800097e:	4653      	mov	r3, sl
 8000980:	4252      	negs	r2, r2
 8000982:	1b1c      	subs	r4, r3, r4
 8000984:	000e      	movs	r6, r1
 8000986:	4688      	mov	r8, r1
 8000988:	1aa4      	subs	r4, r4, r2
 800098a:	e5e5      	b.n	8000558 <__aeabi_dadd+0xb0>
 800098c:	2d00      	cmp	r5, #0
 800098e:	d000      	beq.n	8000992 <__aeabi_dadd+0x4ea>
 8000990:	e091      	b.n	8000ab6 <__aeabi_dadd+0x60e>
 8000992:	2a00      	cmp	r2, #0
 8000994:	d138      	bne.n	8000a08 <__aeabi_dadd+0x560>
 8000996:	2480      	movs	r4, #128	@ 0x80
 8000998:	2600      	movs	r6, #0
 800099a:	0324      	lsls	r4, r4, #12
 800099c:	e756      	b.n	800084c <__aeabi_dadd+0x3a4>
 800099e:	4663      	mov	r3, ip
 80009a0:	18c5      	adds	r5, r0, r3
 80009a2:	4285      	cmp	r5, r0
 80009a4:	4180      	sbcs	r0, r0
 80009a6:	4454      	add	r4, sl
 80009a8:	4240      	negs	r0, r0
 80009aa:	1824      	adds	r4, r4, r0
 80009ac:	2701      	movs	r7, #1
 80009ae:	0223      	lsls	r3, r4, #8
 80009b0:	d400      	bmi.n	80009b4 <__aeabi_dadd+0x50c>
 80009b2:	e6df      	b.n	8000774 <__aeabi_dadd+0x2cc>
 80009b4:	2702      	movs	r7, #2
 80009b6:	e687      	b.n	80006c8 <__aeabi_dadd+0x220>
 80009b8:	4663      	mov	r3, ip
 80009ba:	1ac5      	subs	r5, r0, r3
 80009bc:	42a8      	cmp	r0, r5
 80009be:	4180      	sbcs	r0, r0
 80009c0:	4653      	mov	r3, sl
 80009c2:	4240      	negs	r0, r0
 80009c4:	1ae4      	subs	r4, r4, r3
 80009c6:	2701      	movs	r7, #1
 80009c8:	1a24      	subs	r4, r4, r0
 80009ca:	e5c0      	b.n	800054e <__aeabi_dadd+0xa6>
 80009cc:	0762      	lsls	r2, r4, #29
 80009ce:	08c0      	lsrs	r0, r0, #3
 80009d0:	4302      	orrs	r2, r0
 80009d2:	08e4      	lsrs	r4, r4, #3
 80009d4:	e736      	b.n	8000844 <__aeabi_dadd+0x39c>
 80009d6:	0011      	movs	r1, r2
 80009d8:	4653      	mov	r3, sl
 80009da:	3920      	subs	r1, #32
 80009dc:	40cb      	lsrs	r3, r1
 80009de:	4699      	mov	r9, r3
 80009e0:	2a20      	cmp	r2, #32
 80009e2:	d006      	beq.n	80009f2 <__aeabi_dadd+0x54a>
 80009e4:	2140      	movs	r1, #64	@ 0x40
 80009e6:	4653      	mov	r3, sl
 80009e8:	1a8a      	subs	r2, r1, r2
 80009ea:	4093      	lsls	r3, r2
 80009ec:	4662      	mov	r2, ip
 80009ee:	431a      	orrs	r2, r3
 80009f0:	4694      	mov	ip, r2
 80009f2:	4665      	mov	r5, ip
 80009f4:	1e6b      	subs	r3, r5, #1
 80009f6:	419d      	sbcs	r5, r3
 80009f8:	464b      	mov	r3, r9
 80009fa:	431d      	orrs	r5, r3
 80009fc:	e659      	b.n	80006b2 <__aeabi_dadd+0x20a>
 80009fe:	0762      	lsls	r2, r4, #29
 8000a00:	08c0      	lsrs	r0, r0, #3
 8000a02:	4302      	orrs	r2, r0
 8000a04:	08e4      	lsrs	r4, r4, #3
 8000a06:	e70d      	b.n	8000824 <__aeabi_dadd+0x37c>
 8000a08:	4653      	mov	r3, sl
 8000a0a:	075a      	lsls	r2, r3, #29
 8000a0c:	4663      	mov	r3, ip
 8000a0e:	08d8      	lsrs	r0, r3, #3
 8000a10:	4653      	mov	r3, sl
 8000a12:	000e      	movs	r6, r1
 8000a14:	4302      	orrs	r2, r0
 8000a16:	08dc      	lsrs	r4, r3, #3
 8000a18:	e714      	b.n	8000844 <__aeabi_dadd+0x39c>
 8000a1a:	0015      	movs	r5, r2
 8000a1c:	0026      	movs	r6, r4
 8000a1e:	3d20      	subs	r5, #32
 8000a20:	40ee      	lsrs	r6, r5
 8000a22:	2a20      	cmp	r2, #32
 8000a24:	d003      	beq.n	8000a2e <__aeabi_dadd+0x586>
 8000a26:	2540      	movs	r5, #64	@ 0x40
 8000a28:	1aaa      	subs	r2, r5, r2
 8000a2a:	4094      	lsls	r4, r2
 8000a2c:	4320      	orrs	r0, r4
 8000a2e:	1e42      	subs	r2, r0, #1
 8000a30:	4190      	sbcs	r0, r2
 8000a32:	0005      	movs	r5, r0
 8000a34:	4335      	orrs	r5, r6
 8000a36:	e606      	b.n	8000646 <__aeabi_dadd+0x19e>
 8000a38:	2a00      	cmp	r2, #0
 8000a3a:	d07c      	beq.n	8000b36 <__aeabi_dadd+0x68e>
 8000a3c:	4662      	mov	r2, ip
 8000a3e:	4653      	mov	r3, sl
 8000a40:	08c0      	lsrs	r0, r0, #3
 8000a42:	431a      	orrs	r2, r3
 8000a44:	d100      	bne.n	8000a48 <__aeabi_dadd+0x5a0>
 8000a46:	e6fa      	b.n	800083e <__aeabi_dadd+0x396>
 8000a48:	0762      	lsls	r2, r4, #29
 8000a4a:	4310      	orrs	r0, r2
 8000a4c:	2280      	movs	r2, #128	@ 0x80
 8000a4e:	08e4      	lsrs	r4, r4, #3
 8000a50:	0312      	lsls	r2, r2, #12
 8000a52:	4214      	tst	r4, r2
 8000a54:	d008      	beq.n	8000a68 <__aeabi_dadd+0x5c0>
 8000a56:	08d9      	lsrs	r1, r3, #3
 8000a58:	4211      	tst	r1, r2
 8000a5a:	d105      	bne.n	8000a68 <__aeabi_dadd+0x5c0>
 8000a5c:	4663      	mov	r3, ip
 8000a5e:	08d8      	lsrs	r0, r3, #3
 8000a60:	4653      	mov	r3, sl
 8000a62:	000c      	movs	r4, r1
 8000a64:	075b      	lsls	r3, r3, #29
 8000a66:	4318      	orrs	r0, r3
 8000a68:	0f42      	lsrs	r2, r0, #29
 8000a6a:	00c0      	lsls	r0, r0, #3
 8000a6c:	08c0      	lsrs	r0, r0, #3
 8000a6e:	0752      	lsls	r2, r2, #29
 8000a70:	4302      	orrs	r2, r0
 8000a72:	e6e7      	b.n	8000844 <__aeabi_dadd+0x39c>
 8000a74:	2a00      	cmp	r2, #0
 8000a76:	d100      	bne.n	8000a7a <__aeabi_dadd+0x5d2>
 8000a78:	e72d      	b.n	80008d6 <__aeabi_dadd+0x42e>
 8000a7a:	4663      	mov	r3, ip
 8000a7c:	08d8      	lsrs	r0, r3, #3
 8000a7e:	4653      	mov	r3, sl
 8000a80:	075a      	lsls	r2, r3, #29
 8000a82:	000e      	movs	r6, r1
 8000a84:	4302      	orrs	r2, r0
 8000a86:	08dc      	lsrs	r4, r3, #3
 8000a88:	e6cc      	b.n	8000824 <__aeabi_dadd+0x37c>
 8000a8a:	4663      	mov	r3, ip
 8000a8c:	1a1d      	subs	r5, r3, r0
 8000a8e:	45ac      	cmp	ip, r5
 8000a90:	4192      	sbcs	r2, r2
 8000a92:	4653      	mov	r3, sl
 8000a94:	4252      	negs	r2, r2
 8000a96:	1b1c      	subs	r4, r3, r4
 8000a98:	000e      	movs	r6, r1
 8000a9a:	4688      	mov	r8, r1
 8000a9c:	1aa4      	subs	r4, r4, r2
 8000a9e:	3701      	adds	r7, #1
 8000aa0:	e555      	b.n	800054e <__aeabi_dadd+0xa6>
 8000aa2:	4663      	mov	r3, ip
 8000aa4:	08d9      	lsrs	r1, r3, #3
 8000aa6:	4653      	mov	r3, sl
 8000aa8:	075a      	lsls	r2, r3, #29
 8000aaa:	430a      	orrs	r2, r1
 8000aac:	08dc      	lsrs	r4, r3, #3
 8000aae:	e6c9      	b.n	8000844 <__aeabi_dadd+0x39c>
 8000ab0:	4660      	mov	r0, ip
 8000ab2:	4654      	mov	r4, sl
 8000ab4:	e6d4      	b.n	8000860 <__aeabi_dadd+0x3b8>
 8000ab6:	08c0      	lsrs	r0, r0, #3
 8000ab8:	2a00      	cmp	r2, #0
 8000aba:	d100      	bne.n	8000abe <__aeabi_dadd+0x616>
 8000abc:	e6bf      	b.n	800083e <__aeabi_dadd+0x396>
 8000abe:	0762      	lsls	r2, r4, #29
 8000ac0:	4310      	orrs	r0, r2
 8000ac2:	2280      	movs	r2, #128	@ 0x80
 8000ac4:	08e4      	lsrs	r4, r4, #3
 8000ac6:	0312      	lsls	r2, r2, #12
 8000ac8:	4214      	tst	r4, r2
 8000aca:	d0cd      	beq.n	8000a68 <__aeabi_dadd+0x5c0>
 8000acc:	08dd      	lsrs	r5, r3, #3
 8000ace:	4215      	tst	r5, r2
 8000ad0:	d1ca      	bne.n	8000a68 <__aeabi_dadd+0x5c0>
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	08d8      	lsrs	r0, r3, #3
 8000ad6:	4653      	mov	r3, sl
 8000ad8:	075b      	lsls	r3, r3, #29
 8000ada:	000e      	movs	r6, r1
 8000adc:	002c      	movs	r4, r5
 8000ade:	4318      	orrs	r0, r3
 8000ae0:	e7c2      	b.n	8000a68 <__aeabi_dadd+0x5c0>
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	08d9      	lsrs	r1, r3, #3
 8000ae6:	4653      	mov	r3, sl
 8000ae8:	075a      	lsls	r2, r3, #29
 8000aea:	430a      	orrs	r2, r1
 8000aec:	08dc      	lsrs	r4, r3, #3
 8000aee:	e699      	b.n	8000824 <__aeabi_dadd+0x37c>
 8000af0:	4663      	mov	r3, ip
 8000af2:	08d8      	lsrs	r0, r3, #3
 8000af4:	4653      	mov	r3, sl
 8000af6:	075a      	lsls	r2, r3, #29
 8000af8:	000e      	movs	r6, r1
 8000afa:	4302      	orrs	r2, r0
 8000afc:	08dc      	lsrs	r4, r3, #3
 8000afe:	e6a1      	b.n	8000844 <__aeabi_dadd+0x39c>
 8000b00:	0011      	movs	r1, r2
 8000b02:	0027      	movs	r7, r4
 8000b04:	3920      	subs	r1, #32
 8000b06:	40cf      	lsrs	r7, r1
 8000b08:	2a20      	cmp	r2, #32
 8000b0a:	d003      	beq.n	8000b14 <__aeabi_dadd+0x66c>
 8000b0c:	2140      	movs	r1, #64	@ 0x40
 8000b0e:	1a8a      	subs	r2, r1, r2
 8000b10:	4094      	lsls	r4, r2
 8000b12:	4320      	orrs	r0, r4
 8000b14:	1e42      	subs	r2, r0, #1
 8000b16:	4190      	sbcs	r0, r2
 8000b18:	0005      	movs	r5, r0
 8000b1a:	433d      	orrs	r5, r7
 8000b1c:	e651      	b.n	80007c2 <__aeabi_dadd+0x31a>
 8000b1e:	000c      	movs	r4, r1
 8000b20:	2500      	movs	r5, #0
 8000b22:	2200      	movs	r2, #0
 8000b24:	e558      	b.n	80005d8 <__aeabi_dadd+0x130>
 8000b26:	4460      	add	r0, ip
 8000b28:	4560      	cmp	r0, ip
 8000b2a:	4192      	sbcs	r2, r2
 8000b2c:	4454      	add	r4, sl
 8000b2e:	4252      	negs	r2, r2
 8000b30:	0005      	movs	r5, r0
 8000b32:	18a4      	adds	r4, r4, r2
 8000b34:	e73a      	b.n	80009ac <__aeabi_dadd+0x504>
 8000b36:	4653      	mov	r3, sl
 8000b38:	075a      	lsls	r2, r3, #29
 8000b3a:	4663      	mov	r3, ip
 8000b3c:	08d9      	lsrs	r1, r3, #3
 8000b3e:	4653      	mov	r3, sl
 8000b40:	430a      	orrs	r2, r1
 8000b42:	08dc      	lsrs	r4, r3, #3
 8000b44:	e67e      	b.n	8000844 <__aeabi_dadd+0x39c>
 8000b46:	001a      	movs	r2, r3
 8000b48:	001c      	movs	r4, r3
 8000b4a:	432a      	orrs	r2, r5
 8000b4c:	d000      	beq.n	8000b50 <__aeabi_dadd+0x6a8>
 8000b4e:	e6ab      	b.n	80008a8 <__aeabi_dadd+0x400>
 8000b50:	e6c1      	b.n	80008d6 <__aeabi_dadd+0x42e>
 8000b52:	2120      	movs	r1, #32
 8000b54:	2500      	movs	r5, #0
 8000b56:	1a09      	subs	r1, r1, r0
 8000b58:	e519      	b.n	800058e <__aeabi_dadd+0xe6>
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	2500      	movs	r5, #0
 8000b5e:	4c01      	ldr	r4, [pc, #4]	@ (8000b64 <__aeabi_dadd+0x6bc>)
 8000b60:	e53a      	b.n	80005d8 <__aeabi_dadd+0x130>
 8000b62:	46c0      	nop			@ (mov r8, r8)
 8000b64:	000007ff 	.word	0x000007ff
 8000b68:	ff7fffff 	.word	0xff7fffff
 8000b6c:	000007fe 	.word	0x000007fe

08000b70 <__aeabi_ddiv>:
 8000b70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b72:	46de      	mov	lr, fp
 8000b74:	4645      	mov	r5, r8
 8000b76:	4657      	mov	r7, sl
 8000b78:	464e      	mov	r6, r9
 8000b7a:	b5e0      	push	{r5, r6, r7, lr}
 8000b7c:	b087      	sub	sp, #28
 8000b7e:	9200      	str	r2, [sp, #0]
 8000b80:	9301      	str	r3, [sp, #4]
 8000b82:	030b      	lsls	r3, r1, #12
 8000b84:	0b1b      	lsrs	r3, r3, #12
 8000b86:	469b      	mov	fp, r3
 8000b88:	0fca      	lsrs	r2, r1, #31
 8000b8a:	004b      	lsls	r3, r1, #1
 8000b8c:	0004      	movs	r4, r0
 8000b8e:	4680      	mov	r8, r0
 8000b90:	0d5b      	lsrs	r3, r3, #21
 8000b92:	9202      	str	r2, [sp, #8]
 8000b94:	d100      	bne.n	8000b98 <__aeabi_ddiv+0x28>
 8000b96:	e16a      	b.n	8000e6e <__aeabi_ddiv+0x2fe>
 8000b98:	4ad4      	ldr	r2, [pc, #848]	@ (8000eec <__aeabi_ddiv+0x37c>)
 8000b9a:	4293      	cmp	r3, r2
 8000b9c:	d100      	bne.n	8000ba0 <__aeabi_ddiv+0x30>
 8000b9e:	e18c      	b.n	8000eba <__aeabi_ddiv+0x34a>
 8000ba0:	4659      	mov	r1, fp
 8000ba2:	0f42      	lsrs	r2, r0, #29
 8000ba4:	00c9      	lsls	r1, r1, #3
 8000ba6:	430a      	orrs	r2, r1
 8000ba8:	2180      	movs	r1, #128	@ 0x80
 8000baa:	0409      	lsls	r1, r1, #16
 8000bac:	4311      	orrs	r1, r2
 8000bae:	00c2      	lsls	r2, r0, #3
 8000bb0:	4690      	mov	r8, r2
 8000bb2:	4acf      	ldr	r2, [pc, #828]	@ (8000ef0 <__aeabi_ddiv+0x380>)
 8000bb4:	4689      	mov	r9, r1
 8000bb6:	4692      	mov	sl, r2
 8000bb8:	449a      	add	sl, r3
 8000bba:	2300      	movs	r3, #0
 8000bbc:	2400      	movs	r4, #0
 8000bbe:	9303      	str	r3, [sp, #12]
 8000bc0:	9e00      	ldr	r6, [sp, #0]
 8000bc2:	9f01      	ldr	r7, [sp, #4]
 8000bc4:	033b      	lsls	r3, r7, #12
 8000bc6:	0b1b      	lsrs	r3, r3, #12
 8000bc8:	469b      	mov	fp, r3
 8000bca:	007b      	lsls	r3, r7, #1
 8000bcc:	0030      	movs	r0, r6
 8000bce:	0d5b      	lsrs	r3, r3, #21
 8000bd0:	0ffd      	lsrs	r5, r7, #31
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d100      	bne.n	8000bd8 <__aeabi_ddiv+0x68>
 8000bd6:	e128      	b.n	8000e2a <__aeabi_ddiv+0x2ba>
 8000bd8:	4ac4      	ldr	r2, [pc, #784]	@ (8000eec <__aeabi_ddiv+0x37c>)
 8000bda:	4293      	cmp	r3, r2
 8000bdc:	d100      	bne.n	8000be0 <__aeabi_ddiv+0x70>
 8000bde:	e177      	b.n	8000ed0 <__aeabi_ddiv+0x360>
 8000be0:	4659      	mov	r1, fp
 8000be2:	0f72      	lsrs	r2, r6, #29
 8000be4:	00c9      	lsls	r1, r1, #3
 8000be6:	430a      	orrs	r2, r1
 8000be8:	2180      	movs	r1, #128	@ 0x80
 8000bea:	0409      	lsls	r1, r1, #16
 8000bec:	4311      	orrs	r1, r2
 8000bee:	468b      	mov	fp, r1
 8000bf0:	49bf      	ldr	r1, [pc, #764]	@ (8000ef0 <__aeabi_ddiv+0x380>)
 8000bf2:	00f2      	lsls	r2, r6, #3
 8000bf4:	468c      	mov	ip, r1
 8000bf6:	4651      	mov	r1, sl
 8000bf8:	4463      	add	r3, ip
 8000bfa:	1acb      	subs	r3, r1, r3
 8000bfc:	469a      	mov	sl, r3
 8000bfe:	2300      	movs	r3, #0
 8000c00:	9e02      	ldr	r6, [sp, #8]
 8000c02:	406e      	eors	r6, r5
 8000c04:	2c0f      	cmp	r4, #15
 8000c06:	d827      	bhi.n	8000c58 <__aeabi_ddiv+0xe8>
 8000c08:	49ba      	ldr	r1, [pc, #744]	@ (8000ef4 <__aeabi_ddiv+0x384>)
 8000c0a:	00a4      	lsls	r4, r4, #2
 8000c0c:	5909      	ldr	r1, [r1, r4]
 8000c0e:	468f      	mov	pc, r1
 8000c10:	46cb      	mov	fp, r9
 8000c12:	4642      	mov	r2, r8
 8000c14:	9e02      	ldr	r6, [sp, #8]
 8000c16:	9b03      	ldr	r3, [sp, #12]
 8000c18:	2b02      	cmp	r3, #2
 8000c1a:	d016      	beq.n	8000c4a <__aeabi_ddiv+0xda>
 8000c1c:	2b03      	cmp	r3, #3
 8000c1e:	d100      	bne.n	8000c22 <__aeabi_ddiv+0xb2>
 8000c20:	e2a6      	b.n	8001170 <__aeabi_ddiv+0x600>
 8000c22:	2b01      	cmp	r3, #1
 8000c24:	d000      	beq.n	8000c28 <__aeabi_ddiv+0xb8>
 8000c26:	e0df      	b.n	8000de8 <__aeabi_ddiv+0x278>
 8000c28:	2200      	movs	r2, #0
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	2400      	movs	r4, #0
 8000c2e:	4690      	mov	r8, r2
 8000c30:	051b      	lsls	r3, r3, #20
 8000c32:	4323      	orrs	r3, r4
 8000c34:	07f6      	lsls	r6, r6, #31
 8000c36:	4333      	orrs	r3, r6
 8000c38:	4640      	mov	r0, r8
 8000c3a:	0019      	movs	r1, r3
 8000c3c:	b007      	add	sp, #28
 8000c3e:	bcf0      	pop	{r4, r5, r6, r7}
 8000c40:	46bb      	mov	fp, r7
 8000c42:	46b2      	mov	sl, r6
 8000c44:	46a9      	mov	r9, r5
 8000c46:	46a0      	mov	r8, r4
 8000c48:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	2400      	movs	r4, #0
 8000c4e:	4690      	mov	r8, r2
 8000c50:	4ba6      	ldr	r3, [pc, #664]	@ (8000eec <__aeabi_ddiv+0x37c>)
 8000c52:	e7ed      	b.n	8000c30 <__aeabi_ddiv+0xc0>
 8000c54:	002e      	movs	r6, r5
 8000c56:	e7df      	b.n	8000c18 <__aeabi_ddiv+0xa8>
 8000c58:	45cb      	cmp	fp, r9
 8000c5a:	d200      	bcs.n	8000c5e <__aeabi_ddiv+0xee>
 8000c5c:	e1d4      	b.n	8001008 <__aeabi_ddiv+0x498>
 8000c5e:	d100      	bne.n	8000c62 <__aeabi_ddiv+0xf2>
 8000c60:	e1cf      	b.n	8001002 <__aeabi_ddiv+0x492>
 8000c62:	2301      	movs	r3, #1
 8000c64:	425b      	negs	r3, r3
 8000c66:	469c      	mov	ip, r3
 8000c68:	4644      	mov	r4, r8
 8000c6a:	4648      	mov	r0, r9
 8000c6c:	2700      	movs	r7, #0
 8000c6e:	44e2      	add	sl, ip
 8000c70:	465b      	mov	r3, fp
 8000c72:	0e15      	lsrs	r5, r2, #24
 8000c74:	021b      	lsls	r3, r3, #8
 8000c76:	431d      	orrs	r5, r3
 8000c78:	0c19      	lsrs	r1, r3, #16
 8000c7a:	042b      	lsls	r3, r5, #16
 8000c7c:	0212      	lsls	r2, r2, #8
 8000c7e:	9500      	str	r5, [sp, #0]
 8000c80:	0c1d      	lsrs	r5, r3, #16
 8000c82:	4691      	mov	r9, r2
 8000c84:	9102      	str	r1, [sp, #8]
 8000c86:	9503      	str	r5, [sp, #12]
 8000c88:	f7ff fac2 	bl	8000210 <__aeabi_uidivmod>
 8000c8c:	0002      	movs	r2, r0
 8000c8e:	436a      	muls	r2, r5
 8000c90:	040b      	lsls	r3, r1, #16
 8000c92:	0c21      	lsrs	r1, r4, #16
 8000c94:	4680      	mov	r8, r0
 8000c96:	4319      	orrs	r1, r3
 8000c98:	428a      	cmp	r2, r1
 8000c9a:	d909      	bls.n	8000cb0 <__aeabi_ddiv+0x140>
 8000c9c:	9d00      	ldr	r5, [sp, #0]
 8000c9e:	2301      	movs	r3, #1
 8000ca0:	46ac      	mov	ip, r5
 8000ca2:	425b      	negs	r3, r3
 8000ca4:	4461      	add	r1, ip
 8000ca6:	469c      	mov	ip, r3
 8000ca8:	44e0      	add	r8, ip
 8000caa:	428d      	cmp	r5, r1
 8000cac:	d800      	bhi.n	8000cb0 <__aeabi_ddiv+0x140>
 8000cae:	e1fb      	b.n	80010a8 <__aeabi_ddiv+0x538>
 8000cb0:	1a88      	subs	r0, r1, r2
 8000cb2:	9902      	ldr	r1, [sp, #8]
 8000cb4:	f7ff faac 	bl	8000210 <__aeabi_uidivmod>
 8000cb8:	9a03      	ldr	r2, [sp, #12]
 8000cba:	0424      	lsls	r4, r4, #16
 8000cbc:	4342      	muls	r2, r0
 8000cbe:	0409      	lsls	r1, r1, #16
 8000cc0:	0c24      	lsrs	r4, r4, #16
 8000cc2:	0003      	movs	r3, r0
 8000cc4:	430c      	orrs	r4, r1
 8000cc6:	42a2      	cmp	r2, r4
 8000cc8:	d906      	bls.n	8000cd8 <__aeabi_ddiv+0x168>
 8000cca:	9900      	ldr	r1, [sp, #0]
 8000ccc:	3b01      	subs	r3, #1
 8000cce:	468c      	mov	ip, r1
 8000cd0:	4464      	add	r4, ip
 8000cd2:	42a1      	cmp	r1, r4
 8000cd4:	d800      	bhi.n	8000cd8 <__aeabi_ddiv+0x168>
 8000cd6:	e1e1      	b.n	800109c <__aeabi_ddiv+0x52c>
 8000cd8:	1aa0      	subs	r0, r4, r2
 8000cda:	4642      	mov	r2, r8
 8000cdc:	0412      	lsls	r2, r2, #16
 8000cde:	431a      	orrs	r2, r3
 8000ce0:	4693      	mov	fp, r2
 8000ce2:	464b      	mov	r3, r9
 8000ce4:	4659      	mov	r1, fp
 8000ce6:	0c1b      	lsrs	r3, r3, #16
 8000ce8:	001d      	movs	r5, r3
 8000cea:	9304      	str	r3, [sp, #16]
 8000cec:	040b      	lsls	r3, r1, #16
 8000cee:	4649      	mov	r1, r9
 8000cf0:	0409      	lsls	r1, r1, #16
 8000cf2:	0c09      	lsrs	r1, r1, #16
 8000cf4:	000c      	movs	r4, r1
 8000cf6:	0c1b      	lsrs	r3, r3, #16
 8000cf8:	435c      	muls	r4, r3
 8000cfa:	0c12      	lsrs	r2, r2, #16
 8000cfc:	436b      	muls	r3, r5
 8000cfe:	4688      	mov	r8, r1
 8000d00:	4351      	muls	r1, r2
 8000d02:	436a      	muls	r2, r5
 8000d04:	0c25      	lsrs	r5, r4, #16
 8000d06:	46ac      	mov	ip, r5
 8000d08:	185b      	adds	r3, r3, r1
 8000d0a:	4463      	add	r3, ip
 8000d0c:	4299      	cmp	r1, r3
 8000d0e:	d903      	bls.n	8000d18 <__aeabi_ddiv+0x1a8>
 8000d10:	2180      	movs	r1, #128	@ 0x80
 8000d12:	0249      	lsls	r1, r1, #9
 8000d14:	468c      	mov	ip, r1
 8000d16:	4462      	add	r2, ip
 8000d18:	0c19      	lsrs	r1, r3, #16
 8000d1a:	0424      	lsls	r4, r4, #16
 8000d1c:	041b      	lsls	r3, r3, #16
 8000d1e:	0c24      	lsrs	r4, r4, #16
 8000d20:	188a      	adds	r2, r1, r2
 8000d22:	191c      	adds	r4, r3, r4
 8000d24:	4290      	cmp	r0, r2
 8000d26:	d302      	bcc.n	8000d2e <__aeabi_ddiv+0x1be>
 8000d28:	d116      	bne.n	8000d58 <__aeabi_ddiv+0x1e8>
 8000d2a:	42a7      	cmp	r7, r4
 8000d2c:	d214      	bcs.n	8000d58 <__aeabi_ddiv+0x1e8>
 8000d2e:	465b      	mov	r3, fp
 8000d30:	9d00      	ldr	r5, [sp, #0]
 8000d32:	3b01      	subs	r3, #1
 8000d34:	444f      	add	r7, r9
 8000d36:	9305      	str	r3, [sp, #20]
 8000d38:	454f      	cmp	r7, r9
 8000d3a:	419b      	sbcs	r3, r3
 8000d3c:	46ac      	mov	ip, r5
 8000d3e:	425b      	negs	r3, r3
 8000d40:	4463      	add	r3, ip
 8000d42:	18c0      	adds	r0, r0, r3
 8000d44:	4285      	cmp	r5, r0
 8000d46:	d300      	bcc.n	8000d4a <__aeabi_ddiv+0x1da>
 8000d48:	e1a1      	b.n	800108e <__aeabi_ddiv+0x51e>
 8000d4a:	4282      	cmp	r2, r0
 8000d4c:	d900      	bls.n	8000d50 <__aeabi_ddiv+0x1e0>
 8000d4e:	e1f6      	b.n	800113e <__aeabi_ddiv+0x5ce>
 8000d50:	d100      	bne.n	8000d54 <__aeabi_ddiv+0x1e4>
 8000d52:	e1f1      	b.n	8001138 <__aeabi_ddiv+0x5c8>
 8000d54:	9b05      	ldr	r3, [sp, #20]
 8000d56:	469b      	mov	fp, r3
 8000d58:	1b3c      	subs	r4, r7, r4
 8000d5a:	42a7      	cmp	r7, r4
 8000d5c:	41bf      	sbcs	r7, r7
 8000d5e:	9d00      	ldr	r5, [sp, #0]
 8000d60:	1a80      	subs	r0, r0, r2
 8000d62:	427f      	negs	r7, r7
 8000d64:	1bc0      	subs	r0, r0, r7
 8000d66:	4285      	cmp	r5, r0
 8000d68:	d100      	bne.n	8000d6c <__aeabi_ddiv+0x1fc>
 8000d6a:	e1d0      	b.n	800110e <__aeabi_ddiv+0x59e>
 8000d6c:	9902      	ldr	r1, [sp, #8]
 8000d6e:	f7ff fa4f 	bl	8000210 <__aeabi_uidivmod>
 8000d72:	9a03      	ldr	r2, [sp, #12]
 8000d74:	040b      	lsls	r3, r1, #16
 8000d76:	4342      	muls	r2, r0
 8000d78:	0c21      	lsrs	r1, r4, #16
 8000d7a:	0007      	movs	r7, r0
 8000d7c:	4319      	orrs	r1, r3
 8000d7e:	428a      	cmp	r2, r1
 8000d80:	d900      	bls.n	8000d84 <__aeabi_ddiv+0x214>
 8000d82:	e178      	b.n	8001076 <__aeabi_ddiv+0x506>
 8000d84:	1a88      	subs	r0, r1, r2
 8000d86:	9902      	ldr	r1, [sp, #8]
 8000d88:	f7ff fa42 	bl	8000210 <__aeabi_uidivmod>
 8000d8c:	9a03      	ldr	r2, [sp, #12]
 8000d8e:	0424      	lsls	r4, r4, #16
 8000d90:	4342      	muls	r2, r0
 8000d92:	0409      	lsls	r1, r1, #16
 8000d94:	0c24      	lsrs	r4, r4, #16
 8000d96:	0003      	movs	r3, r0
 8000d98:	430c      	orrs	r4, r1
 8000d9a:	42a2      	cmp	r2, r4
 8000d9c:	d900      	bls.n	8000da0 <__aeabi_ddiv+0x230>
 8000d9e:	e15d      	b.n	800105c <__aeabi_ddiv+0x4ec>
 8000da0:	4641      	mov	r1, r8
 8000da2:	1aa4      	subs	r4, r4, r2
 8000da4:	043a      	lsls	r2, r7, #16
 8000da6:	431a      	orrs	r2, r3
 8000da8:	9d04      	ldr	r5, [sp, #16]
 8000daa:	0413      	lsls	r3, r2, #16
 8000dac:	0c1b      	lsrs	r3, r3, #16
 8000dae:	4359      	muls	r1, r3
 8000db0:	4647      	mov	r7, r8
 8000db2:	436b      	muls	r3, r5
 8000db4:	469c      	mov	ip, r3
 8000db6:	0c10      	lsrs	r0, r2, #16
 8000db8:	4347      	muls	r7, r0
 8000dba:	0c0b      	lsrs	r3, r1, #16
 8000dbc:	44bc      	add	ip, r7
 8000dbe:	4463      	add	r3, ip
 8000dc0:	4368      	muls	r0, r5
 8000dc2:	429f      	cmp	r7, r3
 8000dc4:	d903      	bls.n	8000dce <__aeabi_ddiv+0x25e>
 8000dc6:	2580      	movs	r5, #128	@ 0x80
 8000dc8:	026d      	lsls	r5, r5, #9
 8000dca:	46ac      	mov	ip, r5
 8000dcc:	4460      	add	r0, ip
 8000dce:	0c1f      	lsrs	r7, r3, #16
 8000dd0:	0409      	lsls	r1, r1, #16
 8000dd2:	041b      	lsls	r3, r3, #16
 8000dd4:	0c09      	lsrs	r1, r1, #16
 8000dd6:	183f      	adds	r7, r7, r0
 8000dd8:	185b      	adds	r3, r3, r1
 8000dda:	42bc      	cmp	r4, r7
 8000ddc:	d200      	bcs.n	8000de0 <__aeabi_ddiv+0x270>
 8000dde:	e102      	b.n	8000fe6 <__aeabi_ddiv+0x476>
 8000de0:	d100      	bne.n	8000de4 <__aeabi_ddiv+0x274>
 8000de2:	e0fd      	b.n	8000fe0 <__aeabi_ddiv+0x470>
 8000de4:	2301      	movs	r3, #1
 8000de6:	431a      	orrs	r2, r3
 8000de8:	4b43      	ldr	r3, [pc, #268]	@ (8000ef8 <__aeabi_ddiv+0x388>)
 8000dea:	4453      	add	r3, sl
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	dc00      	bgt.n	8000df2 <__aeabi_ddiv+0x282>
 8000df0:	e0ae      	b.n	8000f50 <__aeabi_ddiv+0x3e0>
 8000df2:	0751      	lsls	r1, r2, #29
 8000df4:	d000      	beq.n	8000df8 <__aeabi_ddiv+0x288>
 8000df6:	e198      	b.n	800112a <__aeabi_ddiv+0x5ba>
 8000df8:	4659      	mov	r1, fp
 8000dfa:	01c9      	lsls	r1, r1, #7
 8000dfc:	d506      	bpl.n	8000e0c <__aeabi_ddiv+0x29c>
 8000dfe:	4659      	mov	r1, fp
 8000e00:	4b3e      	ldr	r3, [pc, #248]	@ (8000efc <__aeabi_ddiv+0x38c>)
 8000e02:	4019      	ands	r1, r3
 8000e04:	2380      	movs	r3, #128	@ 0x80
 8000e06:	468b      	mov	fp, r1
 8000e08:	00db      	lsls	r3, r3, #3
 8000e0a:	4453      	add	r3, sl
 8000e0c:	493c      	ldr	r1, [pc, #240]	@ (8000f00 <__aeabi_ddiv+0x390>)
 8000e0e:	428b      	cmp	r3, r1
 8000e10:	dd00      	ble.n	8000e14 <__aeabi_ddiv+0x2a4>
 8000e12:	e71a      	b.n	8000c4a <__aeabi_ddiv+0xda>
 8000e14:	4659      	mov	r1, fp
 8000e16:	08d2      	lsrs	r2, r2, #3
 8000e18:	0749      	lsls	r1, r1, #29
 8000e1a:	4311      	orrs	r1, r2
 8000e1c:	465a      	mov	r2, fp
 8000e1e:	055b      	lsls	r3, r3, #21
 8000e20:	0254      	lsls	r4, r2, #9
 8000e22:	4688      	mov	r8, r1
 8000e24:	0b24      	lsrs	r4, r4, #12
 8000e26:	0d5b      	lsrs	r3, r3, #21
 8000e28:	e702      	b.n	8000c30 <__aeabi_ddiv+0xc0>
 8000e2a:	465a      	mov	r2, fp
 8000e2c:	9b00      	ldr	r3, [sp, #0]
 8000e2e:	431a      	orrs	r2, r3
 8000e30:	d100      	bne.n	8000e34 <__aeabi_ddiv+0x2c4>
 8000e32:	e07e      	b.n	8000f32 <__aeabi_ddiv+0x3c2>
 8000e34:	465b      	mov	r3, fp
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d100      	bne.n	8000e3c <__aeabi_ddiv+0x2cc>
 8000e3a:	e100      	b.n	800103e <__aeabi_ddiv+0x4ce>
 8000e3c:	4658      	mov	r0, fp
 8000e3e:	f001 f9a9 	bl	8002194 <__clzsi2>
 8000e42:	0002      	movs	r2, r0
 8000e44:	0003      	movs	r3, r0
 8000e46:	3a0b      	subs	r2, #11
 8000e48:	271d      	movs	r7, #29
 8000e4a:	9e00      	ldr	r6, [sp, #0]
 8000e4c:	1aba      	subs	r2, r7, r2
 8000e4e:	0019      	movs	r1, r3
 8000e50:	4658      	mov	r0, fp
 8000e52:	40d6      	lsrs	r6, r2
 8000e54:	3908      	subs	r1, #8
 8000e56:	4088      	lsls	r0, r1
 8000e58:	0032      	movs	r2, r6
 8000e5a:	4302      	orrs	r2, r0
 8000e5c:	4693      	mov	fp, r2
 8000e5e:	9a00      	ldr	r2, [sp, #0]
 8000e60:	408a      	lsls	r2, r1
 8000e62:	4928      	ldr	r1, [pc, #160]	@ (8000f04 <__aeabi_ddiv+0x394>)
 8000e64:	4453      	add	r3, sl
 8000e66:	468a      	mov	sl, r1
 8000e68:	449a      	add	sl, r3
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	e6c8      	b.n	8000c00 <__aeabi_ddiv+0x90>
 8000e6e:	465b      	mov	r3, fp
 8000e70:	4303      	orrs	r3, r0
 8000e72:	4699      	mov	r9, r3
 8000e74:	d056      	beq.n	8000f24 <__aeabi_ddiv+0x3b4>
 8000e76:	465b      	mov	r3, fp
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d100      	bne.n	8000e7e <__aeabi_ddiv+0x30e>
 8000e7c:	e0cd      	b.n	800101a <__aeabi_ddiv+0x4aa>
 8000e7e:	4658      	mov	r0, fp
 8000e80:	f001 f988 	bl	8002194 <__clzsi2>
 8000e84:	230b      	movs	r3, #11
 8000e86:	425b      	negs	r3, r3
 8000e88:	469c      	mov	ip, r3
 8000e8a:	0002      	movs	r2, r0
 8000e8c:	4484      	add	ip, r0
 8000e8e:	4666      	mov	r6, ip
 8000e90:	231d      	movs	r3, #29
 8000e92:	1b9b      	subs	r3, r3, r6
 8000e94:	0026      	movs	r6, r4
 8000e96:	0011      	movs	r1, r2
 8000e98:	4658      	mov	r0, fp
 8000e9a:	40de      	lsrs	r6, r3
 8000e9c:	3908      	subs	r1, #8
 8000e9e:	4088      	lsls	r0, r1
 8000ea0:	0033      	movs	r3, r6
 8000ea2:	4303      	orrs	r3, r0
 8000ea4:	4699      	mov	r9, r3
 8000ea6:	0023      	movs	r3, r4
 8000ea8:	408b      	lsls	r3, r1
 8000eaa:	4698      	mov	r8, r3
 8000eac:	4b16      	ldr	r3, [pc, #88]	@ (8000f08 <__aeabi_ddiv+0x398>)
 8000eae:	2400      	movs	r4, #0
 8000eb0:	1a9b      	subs	r3, r3, r2
 8000eb2:	469a      	mov	sl, r3
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	9303      	str	r3, [sp, #12]
 8000eb8:	e682      	b.n	8000bc0 <__aeabi_ddiv+0x50>
 8000eba:	465a      	mov	r2, fp
 8000ebc:	4302      	orrs	r2, r0
 8000ebe:	4691      	mov	r9, r2
 8000ec0:	d12a      	bne.n	8000f18 <__aeabi_ddiv+0x3a8>
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	469a      	mov	sl, r3
 8000ec6:	2302      	movs	r3, #2
 8000ec8:	4690      	mov	r8, r2
 8000eca:	2408      	movs	r4, #8
 8000ecc:	9303      	str	r3, [sp, #12]
 8000ece:	e677      	b.n	8000bc0 <__aeabi_ddiv+0x50>
 8000ed0:	465a      	mov	r2, fp
 8000ed2:	9b00      	ldr	r3, [sp, #0]
 8000ed4:	431a      	orrs	r2, r3
 8000ed6:	4b0d      	ldr	r3, [pc, #52]	@ (8000f0c <__aeabi_ddiv+0x39c>)
 8000ed8:	469c      	mov	ip, r3
 8000eda:	44e2      	add	sl, ip
 8000edc:	2a00      	cmp	r2, #0
 8000ede:	d117      	bne.n	8000f10 <__aeabi_ddiv+0x3a0>
 8000ee0:	2302      	movs	r3, #2
 8000ee2:	431c      	orrs	r4, r3
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	469b      	mov	fp, r3
 8000ee8:	3302      	adds	r3, #2
 8000eea:	e689      	b.n	8000c00 <__aeabi_ddiv+0x90>
 8000eec:	000007ff 	.word	0x000007ff
 8000ef0:	fffffc01 	.word	0xfffffc01
 8000ef4:	080057f0 	.word	0x080057f0
 8000ef8:	000003ff 	.word	0x000003ff
 8000efc:	feffffff 	.word	0xfeffffff
 8000f00:	000007fe 	.word	0x000007fe
 8000f04:	000003f3 	.word	0x000003f3
 8000f08:	fffffc0d 	.word	0xfffffc0d
 8000f0c:	fffff801 	.word	0xfffff801
 8000f10:	2303      	movs	r3, #3
 8000f12:	0032      	movs	r2, r6
 8000f14:	431c      	orrs	r4, r3
 8000f16:	e673      	b.n	8000c00 <__aeabi_ddiv+0x90>
 8000f18:	469a      	mov	sl, r3
 8000f1a:	2303      	movs	r3, #3
 8000f1c:	46d9      	mov	r9, fp
 8000f1e:	240c      	movs	r4, #12
 8000f20:	9303      	str	r3, [sp, #12]
 8000f22:	e64d      	b.n	8000bc0 <__aeabi_ddiv+0x50>
 8000f24:	2300      	movs	r3, #0
 8000f26:	4698      	mov	r8, r3
 8000f28:	469a      	mov	sl, r3
 8000f2a:	3301      	adds	r3, #1
 8000f2c:	2404      	movs	r4, #4
 8000f2e:	9303      	str	r3, [sp, #12]
 8000f30:	e646      	b.n	8000bc0 <__aeabi_ddiv+0x50>
 8000f32:	2301      	movs	r3, #1
 8000f34:	431c      	orrs	r4, r3
 8000f36:	2300      	movs	r3, #0
 8000f38:	469b      	mov	fp, r3
 8000f3a:	3301      	adds	r3, #1
 8000f3c:	e660      	b.n	8000c00 <__aeabi_ddiv+0x90>
 8000f3e:	2300      	movs	r3, #0
 8000f40:	2480      	movs	r4, #128	@ 0x80
 8000f42:	4698      	mov	r8, r3
 8000f44:	2600      	movs	r6, #0
 8000f46:	4b92      	ldr	r3, [pc, #584]	@ (8001190 <__aeabi_ddiv+0x620>)
 8000f48:	0324      	lsls	r4, r4, #12
 8000f4a:	e671      	b.n	8000c30 <__aeabi_ddiv+0xc0>
 8000f4c:	2201      	movs	r2, #1
 8000f4e:	4252      	negs	r2, r2
 8000f50:	2101      	movs	r1, #1
 8000f52:	1ac9      	subs	r1, r1, r3
 8000f54:	2938      	cmp	r1, #56	@ 0x38
 8000f56:	dd00      	ble.n	8000f5a <__aeabi_ddiv+0x3ea>
 8000f58:	e666      	b.n	8000c28 <__aeabi_ddiv+0xb8>
 8000f5a:	291f      	cmp	r1, #31
 8000f5c:	dc00      	bgt.n	8000f60 <__aeabi_ddiv+0x3f0>
 8000f5e:	e0ab      	b.n	80010b8 <__aeabi_ddiv+0x548>
 8000f60:	201f      	movs	r0, #31
 8000f62:	4240      	negs	r0, r0
 8000f64:	1ac3      	subs	r3, r0, r3
 8000f66:	4658      	mov	r0, fp
 8000f68:	40d8      	lsrs	r0, r3
 8000f6a:	0003      	movs	r3, r0
 8000f6c:	2920      	cmp	r1, #32
 8000f6e:	d004      	beq.n	8000f7a <__aeabi_ddiv+0x40a>
 8000f70:	4658      	mov	r0, fp
 8000f72:	4988      	ldr	r1, [pc, #544]	@ (8001194 <__aeabi_ddiv+0x624>)
 8000f74:	4451      	add	r1, sl
 8000f76:	4088      	lsls	r0, r1
 8000f78:	4302      	orrs	r2, r0
 8000f7a:	1e51      	subs	r1, r2, #1
 8000f7c:	418a      	sbcs	r2, r1
 8000f7e:	431a      	orrs	r2, r3
 8000f80:	2307      	movs	r3, #7
 8000f82:	0019      	movs	r1, r3
 8000f84:	2400      	movs	r4, #0
 8000f86:	4011      	ands	r1, r2
 8000f88:	4213      	tst	r3, r2
 8000f8a:	d00c      	beq.n	8000fa6 <__aeabi_ddiv+0x436>
 8000f8c:	230f      	movs	r3, #15
 8000f8e:	4013      	ands	r3, r2
 8000f90:	2b04      	cmp	r3, #4
 8000f92:	d100      	bne.n	8000f96 <__aeabi_ddiv+0x426>
 8000f94:	e0f9      	b.n	800118a <__aeabi_ddiv+0x61a>
 8000f96:	1d11      	adds	r1, r2, #4
 8000f98:	4291      	cmp	r1, r2
 8000f9a:	419b      	sbcs	r3, r3
 8000f9c:	000a      	movs	r2, r1
 8000f9e:	425b      	negs	r3, r3
 8000fa0:	0759      	lsls	r1, r3, #29
 8000fa2:	025b      	lsls	r3, r3, #9
 8000fa4:	0b1c      	lsrs	r4, r3, #12
 8000fa6:	08d2      	lsrs	r2, r2, #3
 8000fa8:	430a      	orrs	r2, r1
 8000faa:	4690      	mov	r8, r2
 8000fac:	2300      	movs	r3, #0
 8000fae:	e63f      	b.n	8000c30 <__aeabi_ddiv+0xc0>
 8000fb0:	2480      	movs	r4, #128	@ 0x80
 8000fb2:	464b      	mov	r3, r9
 8000fb4:	0324      	lsls	r4, r4, #12
 8000fb6:	4223      	tst	r3, r4
 8000fb8:	d009      	beq.n	8000fce <__aeabi_ddiv+0x45e>
 8000fba:	465b      	mov	r3, fp
 8000fbc:	4223      	tst	r3, r4
 8000fbe:	d106      	bne.n	8000fce <__aeabi_ddiv+0x45e>
 8000fc0:	431c      	orrs	r4, r3
 8000fc2:	0324      	lsls	r4, r4, #12
 8000fc4:	002e      	movs	r6, r5
 8000fc6:	4690      	mov	r8, r2
 8000fc8:	4b71      	ldr	r3, [pc, #452]	@ (8001190 <__aeabi_ddiv+0x620>)
 8000fca:	0b24      	lsrs	r4, r4, #12
 8000fcc:	e630      	b.n	8000c30 <__aeabi_ddiv+0xc0>
 8000fce:	2480      	movs	r4, #128	@ 0x80
 8000fd0:	464b      	mov	r3, r9
 8000fd2:	0324      	lsls	r4, r4, #12
 8000fd4:	431c      	orrs	r4, r3
 8000fd6:	0324      	lsls	r4, r4, #12
 8000fd8:	9e02      	ldr	r6, [sp, #8]
 8000fda:	4b6d      	ldr	r3, [pc, #436]	@ (8001190 <__aeabi_ddiv+0x620>)
 8000fdc:	0b24      	lsrs	r4, r4, #12
 8000fde:	e627      	b.n	8000c30 <__aeabi_ddiv+0xc0>
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d100      	bne.n	8000fe6 <__aeabi_ddiv+0x476>
 8000fe4:	e700      	b.n	8000de8 <__aeabi_ddiv+0x278>
 8000fe6:	9800      	ldr	r0, [sp, #0]
 8000fe8:	1e51      	subs	r1, r2, #1
 8000fea:	4684      	mov	ip, r0
 8000fec:	4464      	add	r4, ip
 8000fee:	4284      	cmp	r4, r0
 8000ff0:	d200      	bcs.n	8000ff4 <__aeabi_ddiv+0x484>
 8000ff2:	e084      	b.n	80010fe <__aeabi_ddiv+0x58e>
 8000ff4:	42bc      	cmp	r4, r7
 8000ff6:	d200      	bcs.n	8000ffa <__aeabi_ddiv+0x48a>
 8000ff8:	e0ae      	b.n	8001158 <__aeabi_ddiv+0x5e8>
 8000ffa:	d100      	bne.n	8000ffe <__aeabi_ddiv+0x48e>
 8000ffc:	e0c1      	b.n	8001182 <__aeabi_ddiv+0x612>
 8000ffe:	000a      	movs	r2, r1
 8001000:	e6f0      	b.n	8000de4 <__aeabi_ddiv+0x274>
 8001002:	4542      	cmp	r2, r8
 8001004:	d900      	bls.n	8001008 <__aeabi_ddiv+0x498>
 8001006:	e62c      	b.n	8000c62 <__aeabi_ddiv+0xf2>
 8001008:	464b      	mov	r3, r9
 800100a:	07dc      	lsls	r4, r3, #31
 800100c:	0858      	lsrs	r0, r3, #1
 800100e:	4643      	mov	r3, r8
 8001010:	085b      	lsrs	r3, r3, #1
 8001012:	431c      	orrs	r4, r3
 8001014:	4643      	mov	r3, r8
 8001016:	07df      	lsls	r7, r3, #31
 8001018:	e62a      	b.n	8000c70 <__aeabi_ddiv+0x100>
 800101a:	f001 f8bb 	bl	8002194 <__clzsi2>
 800101e:	2315      	movs	r3, #21
 8001020:	469c      	mov	ip, r3
 8001022:	4484      	add	ip, r0
 8001024:	0002      	movs	r2, r0
 8001026:	4663      	mov	r3, ip
 8001028:	3220      	adds	r2, #32
 800102a:	2b1c      	cmp	r3, #28
 800102c:	dc00      	bgt.n	8001030 <__aeabi_ddiv+0x4c0>
 800102e:	e72e      	b.n	8000e8e <__aeabi_ddiv+0x31e>
 8001030:	0023      	movs	r3, r4
 8001032:	3808      	subs	r0, #8
 8001034:	4083      	lsls	r3, r0
 8001036:	4699      	mov	r9, r3
 8001038:	2300      	movs	r3, #0
 800103a:	4698      	mov	r8, r3
 800103c:	e736      	b.n	8000eac <__aeabi_ddiv+0x33c>
 800103e:	f001 f8a9 	bl	8002194 <__clzsi2>
 8001042:	0002      	movs	r2, r0
 8001044:	0003      	movs	r3, r0
 8001046:	3215      	adds	r2, #21
 8001048:	3320      	adds	r3, #32
 800104a:	2a1c      	cmp	r2, #28
 800104c:	dc00      	bgt.n	8001050 <__aeabi_ddiv+0x4e0>
 800104e:	e6fb      	b.n	8000e48 <__aeabi_ddiv+0x2d8>
 8001050:	9900      	ldr	r1, [sp, #0]
 8001052:	3808      	subs	r0, #8
 8001054:	4081      	lsls	r1, r0
 8001056:	2200      	movs	r2, #0
 8001058:	468b      	mov	fp, r1
 800105a:	e702      	b.n	8000e62 <__aeabi_ddiv+0x2f2>
 800105c:	9900      	ldr	r1, [sp, #0]
 800105e:	3b01      	subs	r3, #1
 8001060:	468c      	mov	ip, r1
 8001062:	4464      	add	r4, ip
 8001064:	42a1      	cmp	r1, r4
 8001066:	d900      	bls.n	800106a <__aeabi_ddiv+0x4fa>
 8001068:	e69a      	b.n	8000da0 <__aeabi_ddiv+0x230>
 800106a:	42a2      	cmp	r2, r4
 800106c:	d800      	bhi.n	8001070 <__aeabi_ddiv+0x500>
 800106e:	e697      	b.n	8000da0 <__aeabi_ddiv+0x230>
 8001070:	1e83      	subs	r3, r0, #2
 8001072:	4464      	add	r4, ip
 8001074:	e694      	b.n	8000da0 <__aeabi_ddiv+0x230>
 8001076:	46ac      	mov	ip, r5
 8001078:	4461      	add	r1, ip
 800107a:	3f01      	subs	r7, #1
 800107c:	428d      	cmp	r5, r1
 800107e:	d900      	bls.n	8001082 <__aeabi_ddiv+0x512>
 8001080:	e680      	b.n	8000d84 <__aeabi_ddiv+0x214>
 8001082:	428a      	cmp	r2, r1
 8001084:	d800      	bhi.n	8001088 <__aeabi_ddiv+0x518>
 8001086:	e67d      	b.n	8000d84 <__aeabi_ddiv+0x214>
 8001088:	1e87      	subs	r7, r0, #2
 800108a:	4461      	add	r1, ip
 800108c:	e67a      	b.n	8000d84 <__aeabi_ddiv+0x214>
 800108e:	4285      	cmp	r5, r0
 8001090:	d000      	beq.n	8001094 <__aeabi_ddiv+0x524>
 8001092:	e65f      	b.n	8000d54 <__aeabi_ddiv+0x1e4>
 8001094:	45b9      	cmp	r9, r7
 8001096:	d900      	bls.n	800109a <__aeabi_ddiv+0x52a>
 8001098:	e65c      	b.n	8000d54 <__aeabi_ddiv+0x1e4>
 800109a:	e656      	b.n	8000d4a <__aeabi_ddiv+0x1da>
 800109c:	42a2      	cmp	r2, r4
 800109e:	d800      	bhi.n	80010a2 <__aeabi_ddiv+0x532>
 80010a0:	e61a      	b.n	8000cd8 <__aeabi_ddiv+0x168>
 80010a2:	1e83      	subs	r3, r0, #2
 80010a4:	4464      	add	r4, ip
 80010a6:	e617      	b.n	8000cd8 <__aeabi_ddiv+0x168>
 80010a8:	428a      	cmp	r2, r1
 80010aa:	d800      	bhi.n	80010ae <__aeabi_ddiv+0x53e>
 80010ac:	e600      	b.n	8000cb0 <__aeabi_ddiv+0x140>
 80010ae:	46ac      	mov	ip, r5
 80010b0:	1e83      	subs	r3, r0, #2
 80010b2:	4698      	mov	r8, r3
 80010b4:	4461      	add	r1, ip
 80010b6:	e5fb      	b.n	8000cb0 <__aeabi_ddiv+0x140>
 80010b8:	4837      	ldr	r0, [pc, #220]	@ (8001198 <__aeabi_ddiv+0x628>)
 80010ba:	0014      	movs	r4, r2
 80010bc:	4450      	add	r0, sl
 80010be:	4082      	lsls	r2, r0
 80010c0:	465b      	mov	r3, fp
 80010c2:	0017      	movs	r7, r2
 80010c4:	4083      	lsls	r3, r0
 80010c6:	40cc      	lsrs	r4, r1
 80010c8:	1e7a      	subs	r2, r7, #1
 80010ca:	4197      	sbcs	r7, r2
 80010cc:	4323      	orrs	r3, r4
 80010ce:	433b      	orrs	r3, r7
 80010d0:	001a      	movs	r2, r3
 80010d2:	465b      	mov	r3, fp
 80010d4:	40cb      	lsrs	r3, r1
 80010d6:	0751      	lsls	r1, r2, #29
 80010d8:	d009      	beq.n	80010ee <__aeabi_ddiv+0x57e>
 80010da:	210f      	movs	r1, #15
 80010dc:	4011      	ands	r1, r2
 80010de:	2904      	cmp	r1, #4
 80010e0:	d005      	beq.n	80010ee <__aeabi_ddiv+0x57e>
 80010e2:	1d11      	adds	r1, r2, #4
 80010e4:	4291      	cmp	r1, r2
 80010e6:	4192      	sbcs	r2, r2
 80010e8:	4252      	negs	r2, r2
 80010ea:	189b      	adds	r3, r3, r2
 80010ec:	000a      	movs	r2, r1
 80010ee:	0219      	lsls	r1, r3, #8
 80010f0:	d400      	bmi.n	80010f4 <__aeabi_ddiv+0x584>
 80010f2:	e755      	b.n	8000fa0 <__aeabi_ddiv+0x430>
 80010f4:	2200      	movs	r2, #0
 80010f6:	2301      	movs	r3, #1
 80010f8:	2400      	movs	r4, #0
 80010fa:	4690      	mov	r8, r2
 80010fc:	e598      	b.n	8000c30 <__aeabi_ddiv+0xc0>
 80010fe:	000a      	movs	r2, r1
 8001100:	42bc      	cmp	r4, r7
 8001102:	d000      	beq.n	8001106 <__aeabi_ddiv+0x596>
 8001104:	e66e      	b.n	8000de4 <__aeabi_ddiv+0x274>
 8001106:	454b      	cmp	r3, r9
 8001108:	d000      	beq.n	800110c <__aeabi_ddiv+0x59c>
 800110a:	e66b      	b.n	8000de4 <__aeabi_ddiv+0x274>
 800110c:	e66c      	b.n	8000de8 <__aeabi_ddiv+0x278>
 800110e:	4b23      	ldr	r3, [pc, #140]	@ (800119c <__aeabi_ddiv+0x62c>)
 8001110:	4a23      	ldr	r2, [pc, #140]	@ (80011a0 <__aeabi_ddiv+0x630>)
 8001112:	4453      	add	r3, sl
 8001114:	4592      	cmp	sl, r2
 8001116:	da00      	bge.n	800111a <__aeabi_ddiv+0x5aa>
 8001118:	e718      	b.n	8000f4c <__aeabi_ddiv+0x3dc>
 800111a:	2101      	movs	r1, #1
 800111c:	4249      	negs	r1, r1
 800111e:	1d0a      	adds	r2, r1, #4
 8001120:	428a      	cmp	r2, r1
 8001122:	4189      	sbcs	r1, r1
 8001124:	4249      	negs	r1, r1
 8001126:	448b      	add	fp, r1
 8001128:	e666      	b.n	8000df8 <__aeabi_ddiv+0x288>
 800112a:	210f      	movs	r1, #15
 800112c:	4011      	ands	r1, r2
 800112e:	2904      	cmp	r1, #4
 8001130:	d100      	bne.n	8001134 <__aeabi_ddiv+0x5c4>
 8001132:	e661      	b.n	8000df8 <__aeabi_ddiv+0x288>
 8001134:	0011      	movs	r1, r2
 8001136:	e7f2      	b.n	800111e <__aeabi_ddiv+0x5ae>
 8001138:	42bc      	cmp	r4, r7
 800113a:	d800      	bhi.n	800113e <__aeabi_ddiv+0x5ce>
 800113c:	e60a      	b.n	8000d54 <__aeabi_ddiv+0x1e4>
 800113e:	2302      	movs	r3, #2
 8001140:	425b      	negs	r3, r3
 8001142:	469c      	mov	ip, r3
 8001144:	9900      	ldr	r1, [sp, #0]
 8001146:	444f      	add	r7, r9
 8001148:	454f      	cmp	r7, r9
 800114a:	419b      	sbcs	r3, r3
 800114c:	44e3      	add	fp, ip
 800114e:	468c      	mov	ip, r1
 8001150:	425b      	negs	r3, r3
 8001152:	4463      	add	r3, ip
 8001154:	18c0      	adds	r0, r0, r3
 8001156:	e5ff      	b.n	8000d58 <__aeabi_ddiv+0x1e8>
 8001158:	4649      	mov	r1, r9
 800115a:	9d00      	ldr	r5, [sp, #0]
 800115c:	0048      	lsls	r0, r1, #1
 800115e:	4548      	cmp	r0, r9
 8001160:	4189      	sbcs	r1, r1
 8001162:	46ac      	mov	ip, r5
 8001164:	4249      	negs	r1, r1
 8001166:	4461      	add	r1, ip
 8001168:	4681      	mov	r9, r0
 800116a:	3a02      	subs	r2, #2
 800116c:	1864      	adds	r4, r4, r1
 800116e:	e7c7      	b.n	8001100 <__aeabi_ddiv+0x590>
 8001170:	2480      	movs	r4, #128	@ 0x80
 8001172:	465b      	mov	r3, fp
 8001174:	0324      	lsls	r4, r4, #12
 8001176:	431c      	orrs	r4, r3
 8001178:	0324      	lsls	r4, r4, #12
 800117a:	4690      	mov	r8, r2
 800117c:	4b04      	ldr	r3, [pc, #16]	@ (8001190 <__aeabi_ddiv+0x620>)
 800117e:	0b24      	lsrs	r4, r4, #12
 8001180:	e556      	b.n	8000c30 <__aeabi_ddiv+0xc0>
 8001182:	4599      	cmp	r9, r3
 8001184:	d3e8      	bcc.n	8001158 <__aeabi_ddiv+0x5e8>
 8001186:	000a      	movs	r2, r1
 8001188:	e7bd      	b.n	8001106 <__aeabi_ddiv+0x596>
 800118a:	2300      	movs	r3, #0
 800118c:	e708      	b.n	8000fa0 <__aeabi_ddiv+0x430>
 800118e:	46c0      	nop			@ (mov r8, r8)
 8001190:	000007ff 	.word	0x000007ff
 8001194:	0000043e 	.word	0x0000043e
 8001198:	0000041e 	.word	0x0000041e
 800119c:	000003ff 	.word	0x000003ff
 80011a0:	fffffc02 	.word	0xfffffc02

080011a4 <__eqdf2>:
 80011a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80011a6:	4657      	mov	r7, sl
 80011a8:	46de      	mov	lr, fp
 80011aa:	464e      	mov	r6, r9
 80011ac:	4645      	mov	r5, r8
 80011ae:	b5e0      	push	{r5, r6, r7, lr}
 80011b0:	000d      	movs	r5, r1
 80011b2:	0004      	movs	r4, r0
 80011b4:	0fe8      	lsrs	r0, r5, #31
 80011b6:	4683      	mov	fp, r0
 80011b8:	0309      	lsls	r1, r1, #12
 80011ba:	0fd8      	lsrs	r0, r3, #31
 80011bc:	0b09      	lsrs	r1, r1, #12
 80011be:	4682      	mov	sl, r0
 80011c0:	4819      	ldr	r0, [pc, #100]	@ (8001228 <__eqdf2+0x84>)
 80011c2:	468c      	mov	ip, r1
 80011c4:	031f      	lsls	r7, r3, #12
 80011c6:	0069      	lsls	r1, r5, #1
 80011c8:	005e      	lsls	r6, r3, #1
 80011ca:	0d49      	lsrs	r1, r1, #21
 80011cc:	0b3f      	lsrs	r7, r7, #12
 80011ce:	0d76      	lsrs	r6, r6, #21
 80011d0:	4281      	cmp	r1, r0
 80011d2:	d018      	beq.n	8001206 <__eqdf2+0x62>
 80011d4:	4286      	cmp	r6, r0
 80011d6:	d00f      	beq.n	80011f8 <__eqdf2+0x54>
 80011d8:	2001      	movs	r0, #1
 80011da:	42b1      	cmp	r1, r6
 80011dc:	d10d      	bne.n	80011fa <__eqdf2+0x56>
 80011de:	45bc      	cmp	ip, r7
 80011e0:	d10b      	bne.n	80011fa <__eqdf2+0x56>
 80011e2:	4294      	cmp	r4, r2
 80011e4:	d109      	bne.n	80011fa <__eqdf2+0x56>
 80011e6:	45d3      	cmp	fp, sl
 80011e8:	d01c      	beq.n	8001224 <__eqdf2+0x80>
 80011ea:	2900      	cmp	r1, #0
 80011ec:	d105      	bne.n	80011fa <__eqdf2+0x56>
 80011ee:	4660      	mov	r0, ip
 80011f0:	4320      	orrs	r0, r4
 80011f2:	1e43      	subs	r3, r0, #1
 80011f4:	4198      	sbcs	r0, r3
 80011f6:	e000      	b.n	80011fa <__eqdf2+0x56>
 80011f8:	2001      	movs	r0, #1
 80011fa:	bcf0      	pop	{r4, r5, r6, r7}
 80011fc:	46bb      	mov	fp, r7
 80011fe:	46b2      	mov	sl, r6
 8001200:	46a9      	mov	r9, r5
 8001202:	46a0      	mov	r8, r4
 8001204:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001206:	2001      	movs	r0, #1
 8001208:	428e      	cmp	r6, r1
 800120a:	d1f6      	bne.n	80011fa <__eqdf2+0x56>
 800120c:	4661      	mov	r1, ip
 800120e:	4339      	orrs	r1, r7
 8001210:	000f      	movs	r7, r1
 8001212:	4317      	orrs	r7, r2
 8001214:	4327      	orrs	r7, r4
 8001216:	d1f0      	bne.n	80011fa <__eqdf2+0x56>
 8001218:	465b      	mov	r3, fp
 800121a:	4652      	mov	r2, sl
 800121c:	1a98      	subs	r0, r3, r2
 800121e:	1e43      	subs	r3, r0, #1
 8001220:	4198      	sbcs	r0, r3
 8001222:	e7ea      	b.n	80011fa <__eqdf2+0x56>
 8001224:	2000      	movs	r0, #0
 8001226:	e7e8      	b.n	80011fa <__eqdf2+0x56>
 8001228:	000007ff 	.word	0x000007ff

0800122c <__gedf2>:
 800122c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800122e:	4657      	mov	r7, sl
 8001230:	464e      	mov	r6, r9
 8001232:	4645      	mov	r5, r8
 8001234:	46de      	mov	lr, fp
 8001236:	b5e0      	push	{r5, r6, r7, lr}
 8001238:	000d      	movs	r5, r1
 800123a:	030f      	lsls	r7, r1, #12
 800123c:	0b39      	lsrs	r1, r7, #12
 800123e:	b083      	sub	sp, #12
 8001240:	0004      	movs	r4, r0
 8001242:	4680      	mov	r8, r0
 8001244:	9101      	str	r1, [sp, #4]
 8001246:	0058      	lsls	r0, r3, #1
 8001248:	0fe9      	lsrs	r1, r5, #31
 800124a:	4f31      	ldr	r7, [pc, #196]	@ (8001310 <__gedf2+0xe4>)
 800124c:	0d40      	lsrs	r0, r0, #21
 800124e:	468c      	mov	ip, r1
 8001250:	006e      	lsls	r6, r5, #1
 8001252:	0319      	lsls	r1, r3, #12
 8001254:	4682      	mov	sl, r0
 8001256:	4691      	mov	r9, r2
 8001258:	0d76      	lsrs	r6, r6, #21
 800125a:	0b09      	lsrs	r1, r1, #12
 800125c:	0fd8      	lsrs	r0, r3, #31
 800125e:	42be      	cmp	r6, r7
 8001260:	d01f      	beq.n	80012a2 <__gedf2+0x76>
 8001262:	45ba      	cmp	sl, r7
 8001264:	d00f      	beq.n	8001286 <__gedf2+0x5a>
 8001266:	2e00      	cmp	r6, #0
 8001268:	d12f      	bne.n	80012ca <__gedf2+0x9e>
 800126a:	4655      	mov	r5, sl
 800126c:	9e01      	ldr	r6, [sp, #4]
 800126e:	4334      	orrs	r4, r6
 8001270:	2d00      	cmp	r5, #0
 8001272:	d127      	bne.n	80012c4 <__gedf2+0x98>
 8001274:	430a      	orrs	r2, r1
 8001276:	d03a      	beq.n	80012ee <__gedf2+0xc2>
 8001278:	2c00      	cmp	r4, #0
 800127a:	d145      	bne.n	8001308 <__gedf2+0xdc>
 800127c:	2800      	cmp	r0, #0
 800127e:	d11a      	bne.n	80012b6 <__gedf2+0x8a>
 8001280:	2001      	movs	r0, #1
 8001282:	4240      	negs	r0, r0
 8001284:	e017      	b.n	80012b6 <__gedf2+0x8a>
 8001286:	4311      	orrs	r1, r2
 8001288:	d13b      	bne.n	8001302 <__gedf2+0xd6>
 800128a:	2e00      	cmp	r6, #0
 800128c:	d102      	bne.n	8001294 <__gedf2+0x68>
 800128e:	9f01      	ldr	r7, [sp, #4]
 8001290:	4327      	orrs	r7, r4
 8001292:	d0f3      	beq.n	800127c <__gedf2+0x50>
 8001294:	4584      	cmp	ip, r0
 8001296:	d109      	bne.n	80012ac <__gedf2+0x80>
 8001298:	4663      	mov	r3, ip
 800129a:	2b00      	cmp	r3, #0
 800129c:	d0f0      	beq.n	8001280 <__gedf2+0x54>
 800129e:	4660      	mov	r0, ip
 80012a0:	e009      	b.n	80012b6 <__gedf2+0x8a>
 80012a2:	9f01      	ldr	r7, [sp, #4]
 80012a4:	4327      	orrs	r7, r4
 80012a6:	d12c      	bne.n	8001302 <__gedf2+0xd6>
 80012a8:	45b2      	cmp	sl, r6
 80012aa:	d024      	beq.n	80012f6 <__gedf2+0xca>
 80012ac:	4663      	mov	r3, ip
 80012ae:	2002      	movs	r0, #2
 80012b0:	3b01      	subs	r3, #1
 80012b2:	4018      	ands	r0, r3
 80012b4:	3801      	subs	r0, #1
 80012b6:	b003      	add	sp, #12
 80012b8:	bcf0      	pop	{r4, r5, r6, r7}
 80012ba:	46bb      	mov	fp, r7
 80012bc:	46b2      	mov	sl, r6
 80012be:	46a9      	mov	r9, r5
 80012c0:	46a0      	mov	r8, r4
 80012c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80012c4:	2c00      	cmp	r4, #0
 80012c6:	d0d9      	beq.n	800127c <__gedf2+0x50>
 80012c8:	e7e4      	b.n	8001294 <__gedf2+0x68>
 80012ca:	4654      	mov	r4, sl
 80012cc:	2c00      	cmp	r4, #0
 80012ce:	d0ed      	beq.n	80012ac <__gedf2+0x80>
 80012d0:	4584      	cmp	ip, r0
 80012d2:	d1eb      	bne.n	80012ac <__gedf2+0x80>
 80012d4:	4556      	cmp	r6, sl
 80012d6:	dce9      	bgt.n	80012ac <__gedf2+0x80>
 80012d8:	dbde      	blt.n	8001298 <__gedf2+0x6c>
 80012da:	9b01      	ldr	r3, [sp, #4]
 80012dc:	428b      	cmp	r3, r1
 80012de:	d8e5      	bhi.n	80012ac <__gedf2+0x80>
 80012e0:	d1da      	bne.n	8001298 <__gedf2+0x6c>
 80012e2:	45c8      	cmp	r8, r9
 80012e4:	d8e2      	bhi.n	80012ac <__gedf2+0x80>
 80012e6:	2000      	movs	r0, #0
 80012e8:	45c8      	cmp	r8, r9
 80012ea:	d2e4      	bcs.n	80012b6 <__gedf2+0x8a>
 80012ec:	e7d4      	b.n	8001298 <__gedf2+0x6c>
 80012ee:	2000      	movs	r0, #0
 80012f0:	2c00      	cmp	r4, #0
 80012f2:	d0e0      	beq.n	80012b6 <__gedf2+0x8a>
 80012f4:	e7da      	b.n	80012ac <__gedf2+0x80>
 80012f6:	4311      	orrs	r1, r2
 80012f8:	d103      	bne.n	8001302 <__gedf2+0xd6>
 80012fa:	4584      	cmp	ip, r0
 80012fc:	d1d6      	bne.n	80012ac <__gedf2+0x80>
 80012fe:	2000      	movs	r0, #0
 8001300:	e7d9      	b.n	80012b6 <__gedf2+0x8a>
 8001302:	2002      	movs	r0, #2
 8001304:	4240      	negs	r0, r0
 8001306:	e7d6      	b.n	80012b6 <__gedf2+0x8a>
 8001308:	4584      	cmp	ip, r0
 800130a:	d0e6      	beq.n	80012da <__gedf2+0xae>
 800130c:	e7ce      	b.n	80012ac <__gedf2+0x80>
 800130e:	46c0      	nop			@ (mov r8, r8)
 8001310:	000007ff 	.word	0x000007ff

08001314 <__ledf2>:
 8001314:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001316:	4657      	mov	r7, sl
 8001318:	464e      	mov	r6, r9
 800131a:	4645      	mov	r5, r8
 800131c:	46de      	mov	lr, fp
 800131e:	b5e0      	push	{r5, r6, r7, lr}
 8001320:	000d      	movs	r5, r1
 8001322:	030f      	lsls	r7, r1, #12
 8001324:	0004      	movs	r4, r0
 8001326:	4680      	mov	r8, r0
 8001328:	0fe8      	lsrs	r0, r5, #31
 800132a:	0b39      	lsrs	r1, r7, #12
 800132c:	4684      	mov	ip, r0
 800132e:	b083      	sub	sp, #12
 8001330:	0058      	lsls	r0, r3, #1
 8001332:	4f30      	ldr	r7, [pc, #192]	@ (80013f4 <__ledf2+0xe0>)
 8001334:	0d40      	lsrs	r0, r0, #21
 8001336:	9101      	str	r1, [sp, #4]
 8001338:	031e      	lsls	r6, r3, #12
 800133a:	0069      	lsls	r1, r5, #1
 800133c:	4682      	mov	sl, r0
 800133e:	4691      	mov	r9, r2
 8001340:	0d49      	lsrs	r1, r1, #21
 8001342:	0b36      	lsrs	r6, r6, #12
 8001344:	0fd8      	lsrs	r0, r3, #31
 8001346:	42b9      	cmp	r1, r7
 8001348:	d020      	beq.n	800138c <__ledf2+0x78>
 800134a:	45ba      	cmp	sl, r7
 800134c:	d00f      	beq.n	800136e <__ledf2+0x5a>
 800134e:	2900      	cmp	r1, #0
 8001350:	d12b      	bne.n	80013aa <__ledf2+0x96>
 8001352:	9901      	ldr	r1, [sp, #4]
 8001354:	430c      	orrs	r4, r1
 8001356:	4651      	mov	r1, sl
 8001358:	2900      	cmp	r1, #0
 800135a:	d137      	bne.n	80013cc <__ledf2+0xb8>
 800135c:	4332      	orrs	r2, r6
 800135e:	d038      	beq.n	80013d2 <__ledf2+0xbe>
 8001360:	2c00      	cmp	r4, #0
 8001362:	d144      	bne.n	80013ee <__ledf2+0xda>
 8001364:	2800      	cmp	r0, #0
 8001366:	d119      	bne.n	800139c <__ledf2+0x88>
 8001368:	2001      	movs	r0, #1
 800136a:	4240      	negs	r0, r0
 800136c:	e016      	b.n	800139c <__ledf2+0x88>
 800136e:	4316      	orrs	r6, r2
 8001370:	d113      	bne.n	800139a <__ledf2+0x86>
 8001372:	2900      	cmp	r1, #0
 8001374:	d102      	bne.n	800137c <__ledf2+0x68>
 8001376:	9f01      	ldr	r7, [sp, #4]
 8001378:	4327      	orrs	r7, r4
 800137a:	d0f3      	beq.n	8001364 <__ledf2+0x50>
 800137c:	4584      	cmp	ip, r0
 800137e:	d020      	beq.n	80013c2 <__ledf2+0xae>
 8001380:	4663      	mov	r3, ip
 8001382:	2002      	movs	r0, #2
 8001384:	3b01      	subs	r3, #1
 8001386:	4018      	ands	r0, r3
 8001388:	3801      	subs	r0, #1
 800138a:	e007      	b.n	800139c <__ledf2+0x88>
 800138c:	9f01      	ldr	r7, [sp, #4]
 800138e:	4327      	orrs	r7, r4
 8001390:	d103      	bne.n	800139a <__ledf2+0x86>
 8001392:	458a      	cmp	sl, r1
 8001394:	d1f4      	bne.n	8001380 <__ledf2+0x6c>
 8001396:	4316      	orrs	r6, r2
 8001398:	d01f      	beq.n	80013da <__ledf2+0xc6>
 800139a:	2002      	movs	r0, #2
 800139c:	b003      	add	sp, #12
 800139e:	bcf0      	pop	{r4, r5, r6, r7}
 80013a0:	46bb      	mov	fp, r7
 80013a2:	46b2      	mov	sl, r6
 80013a4:	46a9      	mov	r9, r5
 80013a6:	46a0      	mov	r8, r4
 80013a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80013aa:	4654      	mov	r4, sl
 80013ac:	2c00      	cmp	r4, #0
 80013ae:	d0e7      	beq.n	8001380 <__ledf2+0x6c>
 80013b0:	4584      	cmp	ip, r0
 80013b2:	d1e5      	bne.n	8001380 <__ledf2+0x6c>
 80013b4:	4551      	cmp	r1, sl
 80013b6:	dce3      	bgt.n	8001380 <__ledf2+0x6c>
 80013b8:	db03      	blt.n	80013c2 <__ledf2+0xae>
 80013ba:	9b01      	ldr	r3, [sp, #4]
 80013bc:	42b3      	cmp	r3, r6
 80013be:	d8df      	bhi.n	8001380 <__ledf2+0x6c>
 80013c0:	d00f      	beq.n	80013e2 <__ledf2+0xce>
 80013c2:	4663      	mov	r3, ip
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d0cf      	beq.n	8001368 <__ledf2+0x54>
 80013c8:	4660      	mov	r0, ip
 80013ca:	e7e7      	b.n	800139c <__ledf2+0x88>
 80013cc:	2c00      	cmp	r4, #0
 80013ce:	d0c9      	beq.n	8001364 <__ledf2+0x50>
 80013d0:	e7d4      	b.n	800137c <__ledf2+0x68>
 80013d2:	2000      	movs	r0, #0
 80013d4:	2c00      	cmp	r4, #0
 80013d6:	d0e1      	beq.n	800139c <__ledf2+0x88>
 80013d8:	e7d2      	b.n	8001380 <__ledf2+0x6c>
 80013da:	4584      	cmp	ip, r0
 80013dc:	d1d0      	bne.n	8001380 <__ledf2+0x6c>
 80013de:	2000      	movs	r0, #0
 80013e0:	e7dc      	b.n	800139c <__ledf2+0x88>
 80013e2:	45c8      	cmp	r8, r9
 80013e4:	d8cc      	bhi.n	8001380 <__ledf2+0x6c>
 80013e6:	2000      	movs	r0, #0
 80013e8:	45c8      	cmp	r8, r9
 80013ea:	d2d7      	bcs.n	800139c <__ledf2+0x88>
 80013ec:	e7e9      	b.n	80013c2 <__ledf2+0xae>
 80013ee:	4584      	cmp	ip, r0
 80013f0:	d0e3      	beq.n	80013ba <__ledf2+0xa6>
 80013f2:	e7c5      	b.n	8001380 <__ledf2+0x6c>
 80013f4:	000007ff 	.word	0x000007ff

080013f8 <__aeabi_dmul>:
 80013f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80013fa:	4657      	mov	r7, sl
 80013fc:	46de      	mov	lr, fp
 80013fe:	464e      	mov	r6, r9
 8001400:	4645      	mov	r5, r8
 8001402:	b5e0      	push	{r5, r6, r7, lr}
 8001404:	001f      	movs	r7, r3
 8001406:	030b      	lsls	r3, r1, #12
 8001408:	0b1b      	lsrs	r3, r3, #12
 800140a:	0016      	movs	r6, r2
 800140c:	469a      	mov	sl, r3
 800140e:	0fca      	lsrs	r2, r1, #31
 8001410:	004b      	lsls	r3, r1, #1
 8001412:	0004      	movs	r4, r0
 8001414:	4693      	mov	fp, r2
 8001416:	b087      	sub	sp, #28
 8001418:	0d5b      	lsrs	r3, r3, #21
 800141a:	d100      	bne.n	800141e <__aeabi_dmul+0x26>
 800141c:	e0d5      	b.n	80015ca <__aeabi_dmul+0x1d2>
 800141e:	4abb      	ldr	r2, [pc, #748]	@ (800170c <__aeabi_dmul+0x314>)
 8001420:	4293      	cmp	r3, r2
 8001422:	d100      	bne.n	8001426 <__aeabi_dmul+0x2e>
 8001424:	e0f8      	b.n	8001618 <__aeabi_dmul+0x220>
 8001426:	4651      	mov	r1, sl
 8001428:	0f42      	lsrs	r2, r0, #29
 800142a:	00c9      	lsls	r1, r1, #3
 800142c:	430a      	orrs	r2, r1
 800142e:	2180      	movs	r1, #128	@ 0x80
 8001430:	0409      	lsls	r1, r1, #16
 8001432:	4311      	orrs	r1, r2
 8001434:	00c2      	lsls	r2, r0, #3
 8001436:	4691      	mov	r9, r2
 8001438:	4ab5      	ldr	r2, [pc, #724]	@ (8001710 <__aeabi_dmul+0x318>)
 800143a:	468a      	mov	sl, r1
 800143c:	189d      	adds	r5, r3, r2
 800143e:	2300      	movs	r3, #0
 8001440:	4698      	mov	r8, r3
 8001442:	9302      	str	r3, [sp, #8]
 8001444:	033c      	lsls	r4, r7, #12
 8001446:	007b      	lsls	r3, r7, #1
 8001448:	0ffa      	lsrs	r2, r7, #31
 800144a:	0030      	movs	r0, r6
 800144c:	0b24      	lsrs	r4, r4, #12
 800144e:	0d5b      	lsrs	r3, r3, #21
 8001450:	9200      	str	r2, [sp, #0]
 8001452:	d100      	bne.n	8001456 <__aeabi_dmul+0x5e>
 8001454:	e096      	b.n	8001584 <__aeabi_dmul+0x18c>
 8001456:	4aad      	ldr	r2, [pc, #692]	@ (800170c <__aeabi_dmul+0x314>)
 8001458:	4293      	cmp	r3, r2
 800145a:	d031      	beq.n	80014c0 <__aeabi_dmul+0xc8>
 800145c:	0f72      	lsrs	r2, r6, #29
 800145e:	00e4      	lsls	r4, r4, #3
 8001460:	4322      	orrs	r2, r4
 8001462:	2480      	movs	r4, #128	@ 0x80
 8001464:	0424      	lsls	r4, r4, #16
 8001466:	4314      	orrs	r4, r2
 8001468:	4aa9      	ldr	r2, [pc, #676]	@ (8001710 <__aeabi_dmul+0x318>)
 800146a:	00f0      	lsls	r0, r6, #3
 800146c:	4694      	mov	ip, r2
 800146e:	4463      	add	r3, ip
 8001470:	195b      	adds	r3, r3, r5
 8001472:	1c5a      	adds	r2, r3, #1
 8001474:	9201      	str	r2, [sp, #4]
 8001476:	4642      	mov	r2, r8
 8001478:	2600      	movs	r6, #0
 800147a:	2a0a      	cmp	r2, #10
 800147c:	dc42      	bgt.n	8001504 <__aeabi_dmul+0x10c>
 800147e:	465a      	mov	r2, fp
 8001480:	9900      	ldr	r1, [sp, #0]
 8001482:	404a      	eors	r2, r1
 8001484:	4693      	mov	fp, r2
 8001486:	4642      	mov	r2, r8
 8001488:	2a02      	cmp	r2, #2
 800148a:	dc32      	bgt.n	80014f2 <__aeabi_dmul+0xfa>
 800148c:	3a01      	subs	r2, #1
 800148e:	2a01      	cmp	r2, #1
 8001490:	d900      	bls.n	8001494 <__aeabi_dmul+0x9c>
 8001492:	e149      	b.n	8001728 <__aeabi_dmul+0x330>
 8001494:	2e02      	cmp	r6, #2
 8001496:	d100      	bne.n	800149a <__aeabi_dmul+0xa2>
 8001498:	e0ca      	b.n	8001630 <__aeabi_dmul+0x238>
 800149a:	2e01      	cmp	r6, #1
 800149c:	d13d      	bne.n	800151a <__aeabi_dmul+0x122>
 800149e:	2300      	movs	r3, #0
 80014a0:	2400      	movs	r4, #0
 80014a2:	2200      	movs	r2, #0
 80014a4:	0010      	movs	r0, r2
 80014a6:	465a      	mov	r2, fp
 80014a8:	051b      	lsls	r3, r3, #20
 80014aa:	4323      	orrs	r3, r4
 80014ac:	07d2      	lsls	r2, r2, #31
 80014ae:	4313      	orrs	r3, r2
 80014b0:	0019      	movs	r1, r3
 80014b2:	b007      	add	sp, #28
 80014b4:	bcf0      	pop	{r4, r5, r6, r7}
 80014b6:	46bb      	mov	fp, r7
 80014b8:	46b2      	mov	sl, r6
 80014ba:	46a9      	mov	r9, r5
 80014bc:	46a0      	mov	r8, r4
 80014be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80014c0:	4b92      	ldr	r3, [pc, #584]	@ (800170c <__aeabi_dmul+0x314>)
 80014c2:	4326      	orrs	r6, r4
 80014c4:	18eb      	adds	r3, r5, r3
 80014c6:	2e00      	cmp	r6, #0
 80014c8:	d100      	bne.n	80014cc <__aeabi_dmul+0xd4>
 80014ca:	e0bb      	b.n	8001644 <__aeabi_dmul+0x24c>
 80014cc:	2203      	movs	r2, #3
 80014ce:	4641      	mov	r1, r8
 80014d0:	4311      	orrs	r1, r2
 80014d2:	465a      	mov	r2, fp
 80014d4:	4688      	mov	r8, r1
 80014d6:	9900      	ldr	r1, [sp, #0]
 80014d8:	404a      	eors	r2, r1
 80014da:	2180      	movs	r1, #128	@ 0x80
 80014dc:	0109      	lsls	r1, r1, #4
 80014de:	468c      	mov	ip, r1
 80014e0:	0029      	movs	r1, r5
 80014e2:	4461      	add	r1, ip
 80014e4:	9101      	str	r1, [sp, #4]
 80014e6:	4641      	mov	r1, r8
 80014e8:	290a      	cmp	r1, #10
 80014ea:	dd00      	ble.n	80014ee <__aeabi_dmul+0xf6>
 80014ec:	e233      	b.n	8001956 <__aeabi_dmul+0x55e>
 80014ee:	4693      	mov	fp, r2
 80014f0:	2603      	movs	r6, #3
 80014f2:	4642      	mov	r2, r8
 80014f4:	2701      	movs	r7, #1
 80014f6:	4097      	lsls	r7, r2
 80014f8:	21a6      	movs	r1, #166	@ 0xa6
 80014fa:	003a      	movs	r2, r7
 80014fc:	00c9      	lsls	r1, r1, #3
 80014fe:	400a      	ands	r2, r1
 8001500:	420f      	tst	r7, r1
 8001502:	d031      	beq.n	8001568 <__aeabi_dmul+0x170>
 8001504:	9e02      	ldr	r6, [sp, #8]
 8001506:	2e02      	cmp	r6, #2
 8001508:	d100      	bne.n	800150c <__aeabi_dmul+0x114>
 800150a:	e235      	b.n	8001978 <__aeabi_dmul+0x580>
 800150c:	2e03      	cmp	r6, #3
 800150e:	d100      	bne.n	8001512 <__aeabi_dmul+0x11a>
 8001510:	e1d2      	b.n	80018b8 <__aeabi_dmul+0x4c0>
 8001512:	4654      	mov	r4, sl
 8001514:	4648      	mov	r0, r9
 8001516:	2e01      	cmp	r6, #1
 8001518:	d0c1      	beq.n	800149e <__aeabi_dmul+0xa6>
 800151a:	9a01      	ldr	r2, [sp, #4]
 800151c:	4b7d      	ldr	r3, [pc, #500]	@ (8001714 <__aeabi_dmul+0x31c>)
 800151e:	4694      	mov	ip, r2
 8001520:	4463      	add	r3, ip
 8001522:	2b00      	cmp	r3, #0
 8001524:	dc00      	bgt.n	8001528 <__aeabi_dmul+0x130>
 8001526:	e0c0      	b.n	80016aa <__aeabi_dmul+0x2b2>
 8001528:	0742      	lsls	r2, r0, #29
 800152a:	d009      	beq.n	8001540 <__aeabi_dmul+0x148>
 800152c:	220f      	movs	r2, #15
 800152e:	4002      	ands	r2, r0
 8001530:	2a04      	cmp	r2, #4
 8001532:	d005      	beq.n	8001540 <__aeabi_dmul+0x148>
 8001534:	1d02      	adds	r2, r0, #4
 8001536:	4282      	cmp	r2, r0
 8001538:	4180      	sbcs	r0, r0
 800153a:	4240      	negs	r0, r0
 800153c:	1824      	adds	r4, r4, r0
 800153e:	0010      	movs	r0, r2
 8001540:	01e2      	lsls	r2, r4, #7
 8001542:	d506      	bpl.n	8001552 <__aeabi_dmul+0x15a>
 8001544:	4b74      	ldr	r3, [pc, #464]	@ (8001718 <__aeabi_dmul+0x320>)
 8001546:	9a01      	ldr	r2, [sp, #4]
 8001548:	401c      	ands	r4, r3
 800154a:	2380      	movs	r3, #128	@ 0x80
 800154c:	4694      	mov	ip, r2
 800154e:	00db      	lsls	r3, r3, #3
 8001550:	4463      	add	r3, ip
 8001552:	4a72      	ldr	r2, [pc, #456]	@ (800171c <__aeabi_dmul+0x324>)
 8001554:	4293      	cmp	r3, r2
 8001556:	dc6b      	bgt.n	8001630 <__aeabi_dmul+0x238>
 8001558:	0762      	lsls	r2, r4, #29
 800155a:	08c0      	lsrs	r0, r0, #3
 800155c:	0264      	lsls	r4, r4, #9
 800155e:	055b      	lsls	r3, r3, #21
 8001560:	4302      	orrs	r2, r0
 8001562:	0b24      	lsrs	r4, r4, #12
 8001564:	0d5b      	lsrs	r3, r3, #21
 8001566:	e79d      	b.n	80014a4 <__aeabi_dmul+0xac>
 8001568:	2190      	movs	r1, #144	@ 0x90
 800156a:	0089      	lsls	r1, r1, #2
 800156c:	420f      	tst	r7, r1
 800156e:	d163      	bne.n	8001638 <__aeabi_dmul+0x240>
 8001570:	2288      	movs	r2, #136	@ 0x88
 8001572:	423a      	tst	r2, r7
 8001574:	d100      	bne.n	8001578 <__aeabi_dmul+0x180>
 8001576:	e0d7      	b.n	8001728 <__aeabi_dmul+0x330>
 8001578:	9b00      	ldr	r3, [sp, #0]
 800157a:	46a2      	mov	sl, r4
 800157c:	469b      	mov	fp, r3
 800157e:	4681      	mov	r9, r0
 8001580:	9602      	str	r6, [sp, #8]
 8001582:	e7bf      	b.n	8001504 <__aeabi_dmul+0x10c>
 8001584:	0023      	movs	r3, r4
 8001586:	4333      	orrs	r3, r6
 8001588:	d100      	bne.n	800158c <__aeabi_dmul+0x194>
 800158a:	e07f      	b.n	800168c <__aeabi_dmul+0x294>
 800158c:	2c00      	cmp	r4, #0
 800158e:	d100      	bne.n	8001592 <__aeabi_dmul+0x19a>
 8001590:	e1ad      	b.n	80018ee <__aeabi_dmul+0x4f6>
 8001592:	0020      	movs	r0, r4
 8001594:	f000 fdfe 	bl	8002194 <__clzsi2>
 8001598:	0002      	movs	r2, r0
 800159a:	0003      	movs	r3, r0
 800159c:	3a0b      	subs	r2, #11
 800159e:	201d      	movs	r0, #29
 80015a0:	0019      	movs	r1, r3
 80015a2:	1a82      	subs	r2, r0, r2
 80015a4:	0030      	movs	r0, r6
 80015a6:	3908      	subs	r1, #8
 80015a8:	40d0      	lsrs	r0, r2
 80015aa:	408c      	lsls	r4, r1
 80015ac:	4304      	orrs	r4, r0
 80015ae:	0030      	movs	r0, r6
 80015b0:	4088      	lsls	r0, r1
 80015b2:	4a5b      	ldr	r2, [pc, #364]	@ (8001720 <__aeabi_dmul+0x328>)
 80015b4:	1aeb      	subs	r3, r5, r3
 80015b6:	4694      	mov	ip, r2
 80015b8:	4463      	add	r3, ip
 80015ba:	1c5a      	adds	r2, r3, #1
 80015bc:	9201      	str	r2, [sp, #4]
 80015be:	4642      	mov	r2, r8
 80015c0:	2600      	movs	r6, #0
 80015c2:	2a0a      	cmp	r2, #10
 80015c4:	dc00      	bgt.n	80015c8 <__aeabi_dmul+0x1d0>
 80015c6:	e75a      	b.n	800147e <__aeabi_dmul+0x86>
 80015c8:	e79c      	b.n	8001504 <__aeabi_dmul+0x10c>
 80015ca:	4653      	mov	r3, sl
 80015cc:	4303      	orrs	r3, r0
 80015ce:	4699      	mov	r9, r3
 80015d0:	d054      	beq.n	800167c <__aeabi_dmul+0x284>
 80015d2:	4653      	mov	r3, sl
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d100      	bne.n	80015da <__aeabi_dmul+0x1e2>
 80015d8:	e177      	b.n	80018ca <__aeabi_dmul+0x4d2>
 80015da:	4650      	mov	r0, sl
 80015dc:	f000 fdda 	bl	8002194 <__clzsi2>
 80015e0:	230b      	movs	r3, #11
 80015e2:	425b      	negs	r3, r3
 80015e4:	469c      	mov	ip, r3
 80015e6:	0002      	movs	r2, r0
 80015e8:	4484      	add	ip, r0
 80015ea:	0011      	movs	r1, r2
 80015ec:	4650      	mov	r0, sl
 80015ee:	3908      	subs	r1, #8
 80015f0:	4088      	lsls	r0, r1
 80015f2:	231d      	movs	r3, #29
 80015f4:	4680      	mov	r8, r0
 80015f6:	4660      	mov	r0, ip
 80015f8:	1a1b      	subs	r3, r3, r0
 80015fa:	0020      	movs	r0, r4
 80015fc:	40d8      	lsrs	r0, r3
 80015fe:	0003      	movs	r3, r0
 8001600:	4640      	mov	r0, r8
 8001602:	4303      	orrs	r3, r0
 8001604:	469a      	mov	sl, r3
 8001606:	0023      	movs	r3, r4
 8001608:	408b      	lsls	r3, r1
 800160a:	4699      	mov	r9, r3
 800160c:	2300      	movs	r3, #0
 800160e:	4d44      	ldr	r5, [pc, #272]	@ (8001720 <__aeabi_dmul+0x328>)
 8001610:	4698      	mov	r8, r3
 8001612:	1aad      	subs	r5, r5, r2
 8001614:	9302      	str	r3, [sp, #8]
 8001616:	e715      	b.n	8001444 <__aeabi_dmul+0x4c>
 8001618:	4652      	mov	r2, sl
 800161a:	4302      	orrs	r2, r0
 800161c:	4691      	mov	r9, r2
 800161e:	d126      	bne.n	800166e <__aeabi_dmul+0x276>
 8001620:	2200      	movs	r2, #0
 8001622:	001d      	movs	r5, r3
 8001624:	2302      	movs	r3, #2
 8001626:	4692      	mov	sl, r2
 8001628:	3208      	adds	r2, #8
 800162a:	4690      	mov	r8, r2
 800162c:	9302      	str	r3, [sp, #8]
 800162e:	e709      	b.n	8001444 <__aeabi_dmul+0x4c>
 8001630:	2400      	movs	r4, #0
 8001632:	2200      	movs	r2, #0
 8001634:	4b35      	ldr	r3, [pc, #212]	@ (800170c <__aeabi_dmul+0x314>)
 8001636:	e735      	b.n	80014a4 <__aeabi_dmul+0xac>
 8001638:	2300      	movs	r3, #0
 800163a:	2480      	movs	r4, #128	@ 0x80
 800163c:	469b      	mov	fp, r3
 800163e:	0324      	lsls	r4, r4, #12
 8001640:	4b32      	ldr	r3, [pc, #200]	@ (800170c <__aeabi_dmul+0x314>)
 8001642:	e72f      	b.n	80014a4 <__aeabi_dmul+0xac>
 8001644:	2202      	movs	r2, #2
 8001646:	4641      	mov	r1, r8
 8001648:	4311      	orrs	r1, r2
 800164a:	2280      	movs	r2, #128	@ 0x80
 800164c:	0112      	lsls	r2, r2, #4
 800164e:	4694      	mov	ip, r2
 8001650:	002a      	movs	r2, r5
 8001652:	4462      	add	r2, ip
 8001654:	4688      	mov	r8, r1
 8001656:	9201      	str	r2, [sp, #4]
 8001658:	290a      	cmp	r1, #10
 800165a:	dd00      	ble.n	800165e <__aeabi_dmul+0x266>
 800165c:	e752      	b.n	8001504 <__aeabi_dmul+0x10c>
 800165e:	465a      	mov	r2, fp
 8001660:	2000      	movs	r0, #0
 8001662:	9900      	ldr	r1, [sp, #0]
 8001664:	0004      	movs	r4, r0
 8001666:	404a      	eors	r2, r1
 8001668:	4693      	mov	fp, r2
 800166a:	2602      	movs	r6, #2
 800166c:	e70b      	b.n	8001486 <__aeabi_dmul+0x8e>
 800166e:	220c      	movs	r2, #12
 8001670:	001d      	movs	r5, r3
 8001672:	2303      	movs	r3, #3
 8001674:	4681      	mov	r9, r0
 8001676:	4690      	mov	r8, r2
 8001678:	9302      	str	r3, [sp, #8]
 800167a:	e6e3      	b.n	8001444 <__aeabi_dmul+0x4c>
 800167c:	2300      	movs	r3, #0
 800167e:	469a      	mov	sl, r3
 8001680:	3304      	adds	r3, #4
 8001682:	4698      	mov	r8, r3
 8001684:	3b03      	subs	r3, #3
 8001686:	2500      	movs	r5, #0
 8001688:	9302      	str	r3, [sp, #8]
 800168a:	e6db      	b.n	8001444 <__aeabi_dmul+0x4c>
 800168c:	4642      	mov	r2, r8
 800168e:	3301      	adds	r3, #1
 8001690:	431a      	orrs	r2, r3
 8001692:	002b      	movs	r3, r5
 8001694:	4690      	mov	r8, r2
 8001696:	1c5a      	adds	r2, r3, #1
 8001698:	9201      	str	r2, [sp, #4]
 800169a:	4642      	mov	r2, r8
 800169c:	2400      	movs	r4, #0
 800169e:	2000      	movs	r0, #0
 80016a0:	2601      	movs	r6, #1
 80016a2:	2a0a      	cmp	r2, #10
 80016a4:	dc00      	bgt.n	80016a8 <__aeabi_dmul+0x2b0>
 80016a6:	e6ea      	b.n	800147e <__aeabi_dmul+0x86>
 80016a8:	e72c      	b.n	8001504 <__aeabi_dmul+0x10c>
 80016aa:	2201      	movs	r2, #1
 80016ac:	1ad2      	subs	r2, r2, r3
 80016ae:	2a38      	cmp	r2, #56	@ 0x38
 80016b0:	dd00      	ble.n	80016b4 <__aeabi_dmul+0x2bc>
 80016b2:	e6f4      	b.n	800149e <__aeabi_dmul+0xa6>
 80016b4:	2a1f      	cmp	r2, #31
 80016b6:	dc00      	bgt.n	80016ba <__aeabi_dmul+0x2c2>
 80016b8:	e12a      	b.n	8001910 <__aeabi_dmul+0x518>
 80016ba:	211f      	movs	r1, #31
 80016bc:	4249      	negs	r1, r1
 80016be:	1acb      	subs	r3, r1, r3
 80016c0:	0021      	movs	r1, r4
 80016c2:	40d9      	lsrs	r1, r3
 80016c4:	000b      	movs	r3, r1
 80016c6:	2a20      	cmp	r2, #32
 80016c8:	d005      	beq.n	80016d6 <__aeabi_dmul+0x2de>
 80016ca:	4a16      	ldr	r2, [pc, #88]	@ (8001724 <__aeabi_dmul+0x32c>)
 80016cc:	9d01      	ldr	r5, [sp, #4]
 80016ce:	4694      	mov	ip, r2
 80016d0:	4465      	add	r5, ip
 80016d2:	40ac      	lsls	r4, r5
 80016d4:	4320      	orrs	r0, r4
 80016d6:	1e42      	subs	r2, r0, #1
 80016d8:	4190      	sbcs	r0, r2
 80016da:	4318      	orrs	r0, r3
 80016dc:	2307      	movs	r3, #7
 80016de:	0019      	movs	r1, r3
 80016e0:	2400      	movs	r4, #0
 80016e2:	4001      	ands	r1, r0
 80016e4:	4203      	tst	r3, r0
 80016e6:	d00c      	beq.n	8001702 <__aeabi_dmul+0x30a>
 80016e8:	230f      	movs	r3, #15
 80016ea:	4003      	ands	r3, r0
 80016ec:	2b04      	cmp	r3, #4
 80016ee:	d100      	bne.n	80016f2 <__aeabi_dmul+0x2fa>
 80016f0:	e140      	b.n	8001974 <__aeabi_dmul+0x57c>
 80016f2:	1d03      	adds	r3, r0, #4
 80016f4:	4283      	cmp	r3, r0
 80016f6:	41a4      	sbcs	r4, r4
 80016f8:	0018      	movs	r0, r3
 80016fa:	4264      	negs	r4, r4
 80016fc:	0761      	lsls	r1, r4, #29
 80016fe:	0264      	lsls	r4, r4, #9
 8001700:	0b24      	lsrs	r4, r4, #12
 8001702:	08c2      	lsrs	r2, r0, #3
 8001704:	2300      	movs	r3, #0
 8001706:	430a      	orrs	r2, r1
 8001708:	e6cc      	b.n	80014a4 <__aeabi_dmul+0xac>
 800170a:	46c0      	nop			@ (mov r8, r8)
 800170c:	000007ff 	.word	0x000007ff
 8001710:	fffffc01 	.word	0xfffffc01
 8001714:	000003ff 	.word	0x000003ff
 8001718:	feffffff 	.word	0xfeffffff
 800171c:	000007fe 	.word	0x000007fe
 8001720:	fffffc0d 	.word	0xfffffc0d
 8001724:	0000043e 	.word	0x0000043e
 8001728:	4649      	mov	r1, r9
 800172a:	464a      	mov	r2, r9
 800172c:	0409      	lsls	r1, r1, #16
 800172e:	0c09      	lsrs	r1, r1, #16
 8001730:	000d      	movs	r5, r1
 8001732:	0c16      	lsrs	r6, r2, #16
 8001734:	0c02      	lsrs	r2, r0, #16
 8001736:	0400      	lsls	r0, r0, #16
 8001738:	0c00      	lsrs	r0, r0, #16
 800173a:	4345      	muls	r5, r0
 800173c:	46ac      	mov	ip, r5
 800173e:	0005      	movs	r5, r0
 8001740:	4375      	muls	r5, r6
 8001742:	46a8      	mov	r8, r5
 8001744:	0015      	movs	r5, r2
 8001746:	000f      	movs	r7, r1
 8001748:	4375      	muls	r5, r6
 800174a:	9200      	str	r2, [sp, #0]
 800174c:	9502      	str	r5, [sp, #8]
 800174e:	002a      	movs	r2, r5
 8001750:	9d00      	ldr	r5, [sp, #0]
 8001752:	436f      	muls	r7, r5
 8001754:	4665      	mov	r5, ip
 8001756:	0c2d      	lsrs	r5, r5, #16
 8001758:	46a9      	mov	r9, r5
 800175a:	4447      	add	r7, r8
 800175c:	444f      	add	r7, r9
 800175e:	45b8      	cmp	r8, r7
 8001760:	d905      	bls.n	800176e <__aeabi_dmul+0x376>
 8001762:	0015      	movs	r5, r2
 8001764:	2280      	movs	r2, #128	@ 0x80
 8001766:	0252      	lsls	r2, r2, #9
 8001768:	4690      	mov	r8, r2
 800176a:	4445      	add	r5, r8
 800176c:	9502      	str	r5, [sp, #8]
 800176e:	0c3d      	lsrs	r5, r7, #16
 8001770:	9503      	str	r5, [sp, #12]
 8001772:	4665      	mov	r5, ip
 8001774:	042d      	lsls	r5, r5, #16
 8001776:	043f      	lsls	r7, r7, #16
 8001778:	0c2d      	lsrs	r5, r5, #16
 800177a:	46ac      	mov	ip, r5
 800177c:	003d      	movs	r5, r7
 800177e:	4465      	add	r5, ip
 8001780:	9504      	str	r5, [sp, #16]
 8001782:	0c25      	lsrs	r5, r4, #16
 8001784:	0424      	lsls	r4, r4, #16
 8001786:	0c24      	lsrs	r4, r4, #16
 8001788:	46ac      	mov	ip, r5
 800178a:	0025      	movs	r5, r4
 800178c:	4375      	muls	r5, r6
 800178e:	46a8      	mov	r8, r5
 8001790:	4665      	mov	r5, ip
 8001792:	000f      	movs	r7, r1
 8001794:	4369      	muls	r1, r5
 8001796:	4441      	add	r1, r8
 8001798:	4689      	mov	r9, r1
 800179a:	4367      	muls	r7, r4
 800179c:	0c39      	lsrs	r1, r7, #16
 800179e:	4449      	add	r1, r9
 80017a0:	436e      	muls	r6, r5
 80017a2:	4588      	cmp	r8, r1
 80017a4:	d903      	bls.n	80017ae <__aeabi_dmul+0x3b6>
 80017a6:	2280      	movs	r2, #128	@ 0x80
 80017a8:	0252      	lsls	r2, r2, #9
 80017aa:	4690      	mov	r8, r2
 80017ac:	4446      	add	r6, r8
 80017ae:	0c0d      	lsrs	r5, r1, #16
 80017b0:	46a8      	mov	r8, r5
 80017b2:	0035      	movs	r5, r6
 80017b4:	4445      	add	r5, r8
 80017b6:	9505      	str	r5, [sp, #20]
 80017b8:	9d03      	ldr	r5, [sp, #12]
 80017ba:	043f      	lsls	r7, r7, #16
 80017bc:	46a8      	mov	r8, r5
 80017be:	0c3f      	lsrs	r7, r7, #16
 80017c0:	0409      	lsls	r1, r1, #16
 80017c2:	19c9      	adds	r1, r1, r7
 80017c4:	4488      	add	r8, r1
 80017c6:	4645      	mov	r5, r8
 80017c8:	9503      	str	r5, [sp, #12]
 80017ca:	4655      	mov	r5, sl
 80017cc:	042e      	lsls	r6, r5, #16
 80017ce:	0c36      	lsrs	r6, r6, #16
 80017d0:	0c2f      	lsrs	r7, r5, #16
 80017d2:	0035      	movs	r5, r6
 80017d4:	4345      	muls	r5, r0
 80017d6:	4378      	muls	r0, r7
 80017d8:	4681      	mov	r9, r0
 80017da:	0038      	movs	r0, r7
 80017dc:	46a8      	mov	r8, r5
 80017de:	0c2d      	lsrs	r5, r5, #16
 80017e0:	46aa      	mov	sl, r5
 80017e2:	9a00      	ldr	r2, [sp, #0]
 80017e4:	4350      	muls	r0, r2
 80017e6:	4372      	muls	r2, r6
 80017e8:	444a      	add	r2, r9
 80017ea:	4452      	add	r2, sl
 80017ec:	4591      	cmp	r9, r2
 80017ee:	d903      	bls.n	80017f8 <__aeabi_dmul+0x400>
 80017f0:	2580      	movs	r5, #128	@ 0x80
 80017f2:	026d      	lsls	r5, r5, #9
 80017f4:	46a9      	mov	r9, r5
 80017f6:	4448      	add	r0, r9
 80017f8:	0c15      	lsrs	r5, r2, #16
 80017fa:	46a9      	mov	r9, r5
 80017fc:	4645      	mov	r5, r8
 80017fe:	042d      	lsls	r5, r5, #16
 8001800:	0c2d      	lsrs	r5, r5, #16
 8001802:	46a8      	mov	r8, r5
 8001804:	4665      	mov	r5, ip
 8001806:	437d      	muls	r5, r7
 8001808:	0412      	lsls	r2, r2, #16
 800180a:	4448      	add	r0, r9
 800180c:	4490      	add	r8, r2
 800180e:	46a9      	mov	r9, r5
 8001810:	0032      	movs	r2, r6
 8001812:	4665      	mov	r5, ip
 8001814:	4362      	muls	r2, r4
 8001816:	436e      	muls	r6, r5
 8001818:	437c      	muls	r4, r7
 800181a:	0c17      	lsrs	r7, r2, #16
 800181c:	1936      	adds	r6, r6, r4
 800181e:	19bf      	adds	r7, r7, r6
 8001820:	42bc      	cmp	r4, r7
 8001822:	d903      	bls.n	800182c <__aeabi_dmul+0x434>
 8001824:	2480      	movs	r4, #128	@ 0x80
 8001826:	0264      	lsls	r4, r4, #9
 8001828:	46a4      	mov	ip, r4
 800182a:	44e1      	add	r9, ip
 800182c:	9c02      	ldr	r4, [sp, #8]
 800182e:	9e03      	ldr	r6, [sp, #12]
 8001830:	46a4      	mov	ip, r4
 8001832:	9d05      	ldr	r5, [sp, #20]
 8001834:	4466      	add	r6, ip
 8001836:	428e      	cmp	r6, r1
 8001838:	4189      	sbcs	r1, r1
 800183a:	46ac      	mov	ip, r5
 800183c:	0412      	lsls	r2, r2, #16
 800183e:	043c      	lsls	r4, r7, #16
 8001840:	0c12      	lsrs	r2, r2, #16
 8001842:	18a2      	adds	r2, r4, r2
 8001844:	4462      	add	r2, ip
 8001846:	4249      	negs	r1, r1
 8001848:	1854      	adds	r4, r2, r1
 800184a:	4446      	add	r6, r8
 800184c:	46a4      	mov	ip, r4
 800184e:	4546      	cmp	r6, r8
 8001850:	41a4      	sbcs	r4, r4
 8001852:	4682      	mov	sl, r0
 8001854:	4264      	negs	r4, r4
 8001856:	46a0      	mov	r8, r4
 8001858:	42aa      	cmp	r2, r5
 800185a:	4192      	sbcs	r2, r2
 800185c:	458c      	cmp	ip, r1
 800185e:	4189      	sbcs	r1, r1
 8001860:	44e2      	add	sl, ip
 8001862:	44d0      	add	r8, sl
 8001864:	4249      	negs	r1, r1
 8001866:	4252      	negs	r2, r2
 8001868:	430a      	orrs	r2, r1
 800186a:	45a0      	cmp	r8, r4
 800186c:	41a4      	sbcs	r4, r4
 800186e:	4582      	cmp	sl, r0
 8001870:	4189      	sbcs	r1, r1
 8001872:	4264      	negs	r4, r4
 8001874:	4249      	negs	r1, r1
 8001876:	430c      	orrs	r4, r1
 8001878:	4641      	mov	r1, r8
 800187a:	0c3f      	lsrs	r7, r7, #16
 800187c:	19d2      	adds	r2, r2, r7
 800187e:	1912      	adds	r2, r2, r4
 8001880:	0dcc      	lsrs	r4, r1, #23
 8001882:	9904      	ldr	r1, [sp, #16]
 8001884:	0270      	lsls	r0, r6, #9
 8001886:	4308      	orrs	r0, r1
 8001888:	1e41      	subs	r1, r0, #1
 800188a:	4188      	sbcs	r0, r1
 800188c:	4641      	mov	r1, r8
 800188e:	444a      	add	r2, r9
 8001890:	0df6      	lsrs	r6, r6, #23
 8001892:	0252      	lsls	r2, r2, #9
 8001894:	4330      	orrs	r0, r6
 8001896:	0249      	lsls	r1, r1, #9
 8001898:	4314      	orrs	r4, r2
 800189a:	4308      	orrs	r0, r1
 800189c:	01d2      	lsls	r2, r2, #7
 800189e:	d535      	bpl.n	800190c <__aeabi_dmul+0x514>
 80018a0:	2201      	movs	r2, #1
 80018a2:	0843      	lsrs	r3, r0, #1
 80018a4:	4002      	ands	r2, r0
 80018a6:	4313      	orrs	r3, r2
 80018a8:	07e0      	lsls	r0, r4, #31
 80018aa:	4318      	orrs	r0, r3
 80018ac:	0864      	lsrs	r4, r4, #1
 80018ae:	e634      	b.n	800151a <__aeabi_dmul+0x122>
 80018b0:	9b00      	ldr	r3, [sp, #0]
 80018b2:	46a2      	mov	sl, r4
 80018b4:	469b      	mov	fp, r3
 80018b6:	4681      	mov	r9, r0
 80018b8:	2480      	movs	r4, #128	@ 0x80
 80018ba:	4653      	mov	r3, sl
 80018bc:	0324      	lsls	r4, r4, #12
 80018be:	431c      	orrs	r4, r3
 80018c0:	0324      	lsls	r4, r4, #12
 80018c2:	464a      	mov	r2, r9
 80018c4:	4b2e      	ldr	r3, [pc, #184]	@ (8001980 <__aeabi_dmul+0x588>)
 80018c6:	0b24      	lsrs	r4, r4, #12
 80018c8:	e5ec      	b.n	80014a4 <__aeabi_dmul+0xac>
 80018ca:	f000 fc63 	bl	8002194 <__clzsi2>
 80018ce:	2315      	movs	r3, #21
 80018d0:	469c      	mov	ip, r3
 80018d2:	4484      	add	ip, r0
 80018d4:	0002      	movs	r2, r0
 80018d6:	4663      	mov	r3, ip
 80018d8:	3220      	adds	r2, #32
 80018da:	2b1c      	cmp	r3, #28
 80018dc:	dc00      	bgt.n	80018e0 <__aeabi_dmul+0x4e8>
 80018de:	e684      	b.n	80015ea <__aeabi_dmul+0x1f2>
 80018e0:	2300      	movs	r3, #0
 80018e2:	4699      	mov	r9, r3
 80018e4:	0023      	movs	r3, r4
 80018e6:	3808      	subs	r0, #8
 80018e8:	4083      	lsls	r3, r0
 80018ea:	469a      	mov	sl, r3
 80018ec:	e68e      	b.n	800160c <__aeabi_dmul+0x214>
 80018ee:	f000 fc51 	bl	8002194 <__clzsi2>
 80018f2:	0002      	movs	r2, r0
 80018f4:	0003      	movs	r3, r0
 80018f6:	3215      	adds	r2, #21
 80018f8:	3320      	adds	r3, #32
 80018fa:	2a1c      	cmp	r2, #28
 80018fc:	dc00      	bgt.n	8001900 <__aeabi_dmul+0x508>
 80018fe:	e64e      	b.n	800159e <__aeabi_dmul+0x1a6>
 8001900:	0002      	movs	r2, r0
 8001902:	0034      	movs	r4, r6
 8001904:	3a08      	subs	r2, #8
 8001906:	2000      	movs	r0, #0
 8001908:	4094      	lsls	r4, r2
 800190a:	e652      	b.n	80015b2 <__aeabi_dmul+0x1ba>
 800190c:	9301      	str	r3, [sp, #4]
 800190e:	e604      	b.n	800151a <__aeabi_dmul+0x122>
 8001910:	4b1c      	ldr	r3, [pc, #112]	@ (8001984 <__aeabi_dmul+0x58c>)
 8001912:	0021      	movs	r1, r4
 8001914:	469c      	mov	ip, r3
 8001916:	0003      	movs	r3, r0
 8001918:	9d01      	ldr	r5, [sp, #4]
 800191a:	40d3      	lsrs	r3, r2
 800191c:	4465      	add	r5, ip
 800191e:	40a9      	lsls	r1, r5
 8001920:	4319      	orrs	r1, r3
 8001922:	0003      	movs	r3, r0
 8001924:	40ab      	lsls	r3, r5
 8001926:	1e58      	subs	r0, r3, #1
 8001928:	4183      	sbcs	r3, r0
 800192a:	4319      	orrs	r1, r3
 800192c:	0008      	movs	r0, r1
 800192e:	40d4      	lsrs	r4, r2
 8001930:	074b      	lsls	r3, r1, #29
 8001932:	d009      	beq.n	8001948 <__aeabi_dmul+0x550>
 8001934:	230f      	movs	r3, #15
 8001936:	400b      	ands	r3, r1
 8001938:	2b04      	cmp	r3, #4
 800193a:	d005      	beq.n	8001948 <__aeabi_dmul+0x550>
 800193c:	1d0b      	adds	r3, r1, #4
 800193e:	428b      	cmp	r3, r1
 8001940:	4180      	sbcs	r0, r0
 8001942:	4240      	negs	r0, r0
 8001944:	1824      	adds	r4, r4, r0
 8001946:	0018      	movs	r0, r3
 8001948:	0223      	lsls	r3, r4, #8
 800194a:	d400      	bmi.n	800194e <__aeabi_dmul+0x556>
 800194c:	e6d6      	b.n	80016fc <__aeabi_dmul+0x304>
 800194e:	2301      	movs	r3, #1
 8001950:	2400      	movs	r4, #0
 8001952:	2200      	movs	r2, #0
 8001954:	e5a6      	b.n	80014a4 <__aeabi_dmul+0xac>
 8001956:	290f      	cmp	r1, #15
 8001958:	d1aa      	bne.n	80018b0 <__aeabi_dmul+0x4b8>
 800195a:	2380      	movs	r3, #128	@ 0x80
 800195c:	4652      	mov	r2, sl
 800195e:	031b      	lsls	r3, r3, #12
 8001960:	421a      	tst	r2, r3
 8001962:	d0a9      	beq.n	80018b8 <__aeabi_dmul+0x4c0>
 8001964:	421c      	tst	r4, r3
 8001966:	d1a7      	bne.n	80018b8 <__aeabi_dmul+0x4c0>
 8001968:	431c      	orrs	r4, r3
 800196a:	9b00      	ldr	r3, [sp, #0]
 800196c:	0002      	movs	r2, r0
 800196e:	469b      	mov	fp, r3
 8001970:	4b03      	ldr	r3, [pc, #12]	@ (8001980 <__aeabi_dmul+0x588>)
 8001972:	e597      	b.n	80014a4 <__aeabi_dmul+0xac>
 8001974:	2400      	movs	r4, #0
 8001976:	e6c1      	b.n	80016fc <__aeabi_dmul+0x304>
 8001978:	2400      	movs	r4, #0
 800197a:	4b01      	ldr	r3, [pc, #4]	@ (8001980 <__aeabi_dmul+0x588>)
 800197c:	0022      	movs	r2, r4
 800197e:	e591      	b.n	80014a4 <__aeabi_dmul+0xac>
 8001980:	000007ff 	.word	0x000007ff
 8001984:	0000041e 	.word	0x0000041e

08001988 <__aeabi_dsub>:
 8001988:	b5f0      	push	{r4, r5, r6, r7, lr}
 800198a:	464e      	mov	r6, r9
 800198c:	4645      	mov	r5, r8
 800198e:	46de      	mov	lr, fp
 8001990:	4657      	mov	r7, sl
 8001992:	b5e0      	push	{r5, r6, r7, lr}
 8001994:	b085      	sub	sp, #20
 8001996:	9000      	str	r0, [sp, #0]
 8001998:	9101      	str	r1, [sp, #4]
 800199a:	030c      	lsls	r4, r1, #12
 800199c:	004f      	lsls	r7, r1, #1
 800199e:	0fce      	lsrs	r6, r1, #31
 80019a0:	0a61      	lsrs	r1, r4, #9
 80019a2:	9c00      	ldr	r4, [sp, #0]
 80019a4:	46b0      	mov	r8, r6
 80019a6:	0f64      	lsrs	r4, r4, #29
 80019a8:	430c      	orrs	r4, r1
 80019aa:	9900      	ldr	r1, [sp, #0]
 80019ac:	0d7f      	lsrs	r7, r7, #21
 80019ae:	00c8      	lsls	r0, r1, #3
 80019b0:	0011      	movs	r1, r2
 80019b2:	001a      	movs	r2, r3
 80019b4:	031b      	lsls	r3, r3, #12
 80019b6:	469c      	mov	ip, r3
 80019b8:	9100      	str	r1, [sp, #0]
 80019ba:	9201      	str	r2, [sp, #4]
 80019bc:	0051      	lsls	r1, r2, #1
 80019be:	0d4b      	lsrs	r3, r1, #21
 80019c0:	4699      	mov	r9, r3
 80019c2:	9b01      	ldr	r3, [sp, #4]
 80019c4:	9d00      	ldr	r5, [sp, #0]
 80019c6:	0fd9      	lsrs	r1, r3, #31
 80019c8:	4663      	mov	r3, ip
 80019ca:	0f6a      	lsrs	r2, r5, #29
 80019cc:	0a5b      	lsrs	r3, r3, #9
 80019ce:	4313      	orrs	r3, r2
 80019d0:	00ea      	lsls	r2, r5, #3
 80019d2:	4694      	mov	ip, r2
 80019d4:	4693      	mov	fp, r2
 80019d6:	4ac1      	ldr	r2, [pc, #772]	@ (8001cdc <__aeabi_dsub+0x354>)
 80019d8:	9003      	str	r0, [sp, #12]
 80019da:	9302      	str	r3, [sp, #8]
 80019dc:	4591      	cmp	r9, r2
 80019de:	d100      	bne.n	80019e2 <__aeabi_dsub+0x5a>
 80019e0:	e0cd      	b.n	8001b7e <__aeabi_dsub+0x1f6>
 80019e2:	2501      	movs	r5, #1
 80019e4:	4069      	eors	r1, r5
 80019e6:	464d      	mov	r5, r9
 80019e8:	1b7d      	subs	r5, r7, r5
 80019ea:	46aa      	mov	sl, r5
 80019ec:	428e      	cmp	r6, r1
 80019ee:	d100      	bne.n	80019f2 <__aeabi_dsub+0x6a>
 80019f0:	e080      	b.n	8001af4 <__aeabi_dsub+0x16c>
 80019f2:	2d00      	cmp	r5, #0
 80019f4:	dc00      	bgt.n	80019f8 <__aeabi_dsub+0x70>
 80019f6:	e335      	b.n	8002064 <__aeabi_dsub+0x6dc>
 80019f8:	4649      	mov	r1, r9
 80019fa:	2900      	cmp	r1, #0
 80019fc:	d100      	bne.n	8001a00 <__aeabi_dsub+0x78>
 80019fe:	e0df      	b.n	8001bc0 <__aeabi_dsub+0x238>
 8001a00:	4297      	cmp	r7, r2
 8001a02:	d100      	bne.n	8001a06 <__aeabi_dsub+0x7e>
 8001a04:	e194      	b.n	8001d30 <__aeabi_dsub+0x3a8>
 8001a06:	4652      	mov	r2, sl
 8001a08:	2501      	movs	r5, #1
 8001a0a:	2a38      	cmp	r2, #56	@ 0x38
 8001a0c:	dc19      	bgt.n	8001a42 <__aeabi_dsub+0xba>
 8001a0e:	2280      	movs	r2, #128	@ 0x80
 8001a10:	9b02      	ldr	r3, [sp, #8]
 8001a12:	0412      	lsls	r2, r2, #16
 8001a14:	4313      	orrs	r3, r2
 8001a16:	9302      	str	r3, [sp, #8]
 8001a18:	4652      	mov	r2, sl
 8001a1a:	2a1f      	cmp	r2, #31
 8001a1c:	dd00      	ble.n	8001a20 <__aeabi_dsub+0x98>
 8001a1e:	e1e3      	b.n	8001de8 <__aeabi_dsub+0x460>
 8001a20:	4653      	mov	r3, sl
 8001a22:	2220      	movs	r2, #32
 8001a24:	4661      	mov	r1, ip
 8001a26:	9d02      	ldr	r5, [sp, #8]
 8001a28:	1ad2      	subs	r2, r2, r3
 8001a2a:	4095      	lsls	r5, r2
 8001a2c:	40d9      	lsrs	r1, r3
 8001a2e:	430d      	orrs	r5, r1
 8001a30:	4661      	mov	r1, ip
 8001a32:	4091      	lsls	r1, r2
 8001a34:	000a      	movs	r2, r1
 8001a36:	1e51      	subs	r1, r2, #1
 8001a38:	418a      	sbcs	r2, r1
 8001a3a:	4315      	orrs	r5, r2
 8001a3c:	9a02      	ldr	r2, [sp, #8]
 8001a3e:	40da      	lsrs	r2, r3
 8001a40:	1aa4      	subs	r4, r4, r2
 8001a42:	1b45      	subs	r5, r0, r5
 8001a44:	42a8      	cmp	r0, r5
 8001a46:	4180      	sbcs	r0, r0
 8001a48:	4240      	negs	r0, r0
 8001a4a:	1a24      	subs	r4, r4, r0
 8001a4c:	0223      	lsls	r3, r4, #8
 8001a4e:	d400      	bmi.n	8001a52 <__aeabi_dsub+0xca>
 8001a50:	e13d      	b.n	8001cce <__aeabi_dsub+0x346>
 8001a52:	0264      	lsls	r4, r4, #9
 8001a54:	0a64      	lsrs	r4, r4, #9
 8001a56:	2c00      	cmp	r4, #0
 8001a58:	d100      	bne.n	8001a5c <__aeabi_dsub+0xd4>
 8001a5a:	e147      	b.n	8001cec <__aeabi_dsub+0x364>
 8001a5c:	0020      	movs	r0, r4
 8001a5e:	f000 fb99 	bl	8002194 <__clzsi2>
 8001a62:	0003      	movs	r3, r0
 8001a64:	3b08      	subs	r3, #8
 8001a66:	2120      	movs	r1, #32
 8001a68:	0028      	movs	r0, r5
 8001a6a:	1aca      	subs	r2, r1, r3
 8001a6c:	40d0      	lsrs	r0, r2
 8001a6e:	409c      	lsls	r4, r3
 8001a70:	0002      	movs	r2, r0
 8001a72:	409d      	lsls	r5, r3
 8001a74:	4322      	orrs	r2, r4
 8001a76:	429f      	cmp	r7, r3
 8001a78:	dd00      	ble.n	8001a7c <__aeabi_dsub+0xf4>
 8001a7a:	e177      	b.n	8001d6c <__aeabi_dsub+0x3e4>
 8001a7c:	1bd8      	subs	r0, r3, r7
 8001a7e:	3001      	adds	r0, #1
 8001a80:	1a09      	subs	r1, r1, r0
 8001a82:	002c      	movs	r4, r5
 8001a84:	408d      	lsls	r5, r1
 8001a86:	40c4      	lsrs	r4, r0
 8001a88:	1e6b      	subs	r3, r5, #1
 8001a8a:	419d      	sbcs	r5, r3
 8001a8c:	0013      	movs	r3, r2
 8001a8e:	40c2      	lsrs	r2, r0
 8001a90:	408b      	lsls	r3, r1
 8001a92:	4325      	orrs	r5, r4
 8001a94:	2700      	movs	r7, #0
 8001a96:	0014      	movs	r4, r2
 8001a98:	431d      	orrs	r5, r3
 8001a9a:	076b      	lsls	r3, r5, #29
 8001a9c:	d009      	beq.n	8001ab2 <__aeabi_dsub+0x12a>
 8001a9e:	230f      	movs	r3, #15
 8001aa0:	402b      	ands	r3, r5
 8001aa2:	2b04      	cmp	r3, #4
 8001aa4:	d005      	beq.n	8001ab2 <__aeabi_dsub+0x12a>
 8001aa6:	1d2b      	adds	r3, r5, #4
 8001aa8:	42ab      	cmp	r3, r5
 8001aaa:	41ad      	sbcs	r5, r5
 8001aac:	426d      	negs	r5, r5
 8001aae:	1964      	adds	r4, r4, r5
 8001ab0:	001d      	movs	r5, r3
 8001ab2:	0223      	lsls	r3, r4, #8
 8001ab4:	d400      	bmi.n	8001ab8 <__aeabi_dsub+0x130>
 8001ab6:	e140      	b.n	8001d3a <__aeabi_dsub+0x3b2>
 8001ab8:	4a88      	ldr	r2, [pc, #544]	@ (8001cdc <__aeabi_dsub+0x354>)
 8001aba:	3701      	adds	r7, #1
 8001abc:	4297      	cmp	r7, r2
 8001abe:	d100      	bne.n	8001ac2 <__aeabi_dsub+0x13a>
 8001ac0:	e101      	b.n	8001cc6 <__aeabi_dsub+0x33e>
 8001ac2:	2601      	movs	r6, #1
 8001ac4:	4643      	mov	r3, r8
 8001ac6:	4986      	ldr	r1, [pc, #536]	@ (8001ce0 <__aeabi_dsub+0x358>)
 8001ac8:	08ed      	lsrs	r5, r5, #3
 8001aca:	4021      	ands	r1, r4
 8001acc:	074a      	lsls	r2, r1, #29
 8001ace:	432a      	orrs	r2, r5
 8001ad0:	057c      	lsls	r4, r7, #21
 8001ad2:	024d      	lsls	r5, r1, #9
 8001ad4:	0b2d      	lsrs	r5, r5, #12
 8001ad6:	0d64      	lsrs	r4, r4, #21
 8001ad8:	401e      	ands	r6, r3
 8001ada:	0524      	lsls	r4, r4, #20
 8001adc:	432c      	orrs	r4, r5
 8001ade:	07f6      	lsls	r6, r6, #31
 8001ae0:	4334      	orrs	r4, r6
 8001ae2:	0010      	movs	r0, r2
 8001ae4:	0021      	movs	r1, r4
 8001ae6:	b005      	add	sp, #20
 8001ae8:	bcf0      	pop	{r4, r5, r6, r7}
 8001aea:	46bb      	mov	fp, r7
 8001aec:	46b2      	mov	sl, r6
 8001aee:	46a9      	mov	r9, r5
 8001af0:	46a0      	mov	r8, r4
 8001af2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001af4:	2d00      	cmp	r5, #0
 8001af6:	dc00      	bgt.n	8001afa <__aeabi_dsub+0x172>
 8001af8:	e2d0      	b.n	800209c <__aeabi_dsub+0x714>
 8001afa:	4649      	mov	r1, r9
 8001afc:	2900      	cmp	r1, #0
 8001afe:	d000      	beq.n	8001b02 <__aeabi_dsub+0x17a>
 8001b00:	e0d4      	b.n	8001cac <__aeabi_dsub+0x324>
 8001b02:	4661      	mov	r1, ip
 8001b04:	9b02      	ldr	r3, [sp, #8]
 8001b06:	4319      	orrs	r1, r3
 8001b08:	d100      	bne.n	8001b0c <__aeabi_dsub+0x184>
 8001b0a:	e12b      	b.n	8001d64 <__aeabi_dsub+0x3dc>
 8001b0c:	1e69      	subs	r1, r5, #1
 8001b0e:	2d01      	cmp	r5, #1
 8001b10:	d100      	bne.n	8001b14 <__aeabi_dsub+0x18c>
 8001b12:	e1d9      	b.n	8001ec8 <__aeabi_dsub+0x540>
 8001b14:	4295      	cmp	r5, r2
 8001b16:	d100      	bne.n	8001b1a <__aeabi_dsub+0x192>
 8001b18:	e10a      	b.n	8001d30 <__aeabi_dsub+0x3a8>
 8001b1a:	2501      	movs	r5, #1
 8001b1c:	2938      	cmp	r1, #56	@ 0x38
 8001b1e:	dc17      	bgt.n	8001b50 <__aeabi_dsub+0x1c8>
 8001b20:	468a      	mov	sl, r1
 8001b22:	4653      	mov	r3, sl
 8001b24:	2b1f      	cmp	r3, #31
 8001b26:	dd00      	ble.n	8001b2a <__aeabi_dsub+0x1a2>
 8001b28:	e1e7      	b.n	8001efa <__aeabi_dsub+0x572>
 8001b2a:	2220      	movs	r2, #32
 8001b2c:	1ad2      	subs	r2, r2, r3
 8001b2e:	9b02      	ldr	r3, [sp, #8]
 8001b30:	4661      	mov	r1, ip
 8001b32:	4093      	lsls	r3, r2
 8001b34:	001d      	movs	r5, r3
 8001b36:	4653      	mov	r3, sl
 8001b38:	40d9      	lsrs	r1, r3
 8001b3a:	4663      	mov	r3, ip
 8001b3c:	4093      	lsls	r3, r2
 8001b3e:	001a      	movs	r2, r3
 8001b40:	430d      	orrs	r5, r1
 8001b42:	1e51      	subs	r1, r2, #1
 8001b44:	418a      	sbcs	r2, r1
 8001b46:	4653      	mov	r3, sl
 8001b48:	4315      	orrs	r5, r2
 8001b4a:	9a02      	ldr	r2, [sp, #8]
 8001b4c:	40da      	lsrs	r2, r3
 8001b4e:	18a4      	adds	r4, r4, r2
 8001b50:	182d      	adds	r5, r5, r0
 8001b52:	4285      	cmp	r5, r0
 8001b54:	4180      	sbcs	r0, r0
 8001b56:	4240      	negs	r0, r0
 8001b58:	1824      	adds	r4, r4, r0
 8001b5a:	0223      	lsls	r3, r4, #8
 8001b5c:	d400      	bmi.n	8001b60 <__aeabi_dsub+0x1d8>
 8001b5e:	e0b6      	b.n	8001cce <__aeabi_dsub+0x346>
 8001b60:	4b5e      	ldr	r3, [pc, #376]	@ (8001cdc <__aeabi_dsub+0x354>)
 8001b62:	3701      	adds	r7, #1
 8001b64:	429f      	cmp	r7, r3
 8001b66:	d100      	bne.n	8001b6a <__aeabi_dsub+0x1e2>
 8001b68:	e0ad      	b.n	8001cc6 <__aeabi_dsub+0x33e>
 8001b6a:	2101      	movs	r1, #1
 8001b6c:	4b5c      	ldr	r3, [pc, #368]	@ (8001ce0 <__aeabi_dsub+0x358>)
 8001b6e:	086a      	lsrs	r2, r5, #1
 8001b70:	401c      	ands	r4, r3
 8001b72:	4029      	ands	r1, r5
 8001b74:	430a      	orrs	r2, r1
 8001b76:	07e5      	lsls	r5, r4, #31
 8001b78:	4315      	orrs	r5, r2
 8001b7a:	0864      	lsrs	r4, r4, #1
 8001b7c:	e78d      	b.n	8001a9a <__aeabi_dsub+0x112>
 8001b7e:	4a59      	ldr	r2, [pc, #356]	@ (8001ce4 <__aeabi_dsub+0x35c>)
 8001b80:	9b02      	ldr	r3, [sp, #8]
 8001b82:	4692      	mov	sl, r2
 8001b84:	4662      	mov	r2, ip
 8001b86:	44ba      	add	sl, r7
 8001b88:	431a      	orrs	r2, r3
 8001b8a:	d02c      	beq.n	8001be6 <__aeabi_dsub+0x25e>
 8001b8c:	428e      	cmp	r6, r1
 8001b8e:	d02e      	beq.n	8001bee <__aeabi_dsub+0x266>
 8001b90:	4652      	mov	r2, sl
 8001b92:	2a00      	cmp	r2, #0
 8001b94:	d060      	beq.n	8001c58 <__aeabi_dsub+0x2d0>
 8001b96:	2f00      	cmp	r7, #0
 8001b98:	d100      	bne.n	8001b9c <__aeabi_dsub+0x214>
 8001b9a:	e0db      	b.n	8001d54 <__aeabi_dsub+0x3cc>
 8001b9c:	4663      	mov	r3, ip
 8001b9e:	000e      	movs	r6, r1
 8001ba0:	9c02      	ldr	r4, [sp, #8]
 8001ba2:	08d8      	lsrs	r0, r3, #3
 8001ba4:	0762      	lsls	r2, r4, #29
 8001ba6:	4302      	orrs	r2, r0
 8001ba8:	08e4      	lsrs	r4, r4, #3
 8001baa:	0013      	movs	r3, r2
 8001bac:	4323      	orrs	r3, r4
 8001bae:	d100      	bne.n	8001bb2 <__aeabi_dsub+0x22a>
 8001bb0:	e254      	b.n	800205c <__aeabi_dsub+0x6d4>
 8001bb2:	2580      	movs	r5, #128	@ 0x80
 8001bb4:	032d      	lsls	r5, r5, #12
 8001bb6:	4325      	orrs	r5, r4
 8001bb8:	032d      	lsls	r5, r5, #12
 8001bba:	4c48      	ldr	r4, [pc, #288]	@ (8001cdc <__aeabi_dsub+0x354>)
 8001bbc:	0b2d      	lsrs	r5, r5, #12
 8001bbe:	e78c      	b.n	8001ada <__aeabi_dsub+0x152>
 8001bc0:	4661      	mov	r1, ip
 8001bc2:	9b02      	ldr	r3, [sp, #8]
 8001bc4:	4319      	orrs	r1, r3
 8001bc6:	d100      	bne.n	8001bca <__aeabi_dsub+0x242>
 8001bc8:	e0cc      	b.n	8001d64 <__aeabi_dsub+0x3dc>
 8001bca:	0029      	movs	r1, r5
 8001bcc:	3901      	subs	r1, #1
 8001bce:	2d01      	cmp	r5, #1
 8001bd0:	d100      	bne.n	8001bd4 <__aeabi_dsub+0x24c>
 8001bd2:	e188      	b.n	8001ee6 <__aeabi_dsub+0x55e>
 8001bd4:	4295      	cmp	r5, r2
 8001bd6:	d100      	bne.n	8001bda <__aeabi_dsub+0x252>
 8001bd8:	e0aa      	b.n	8001d30 <__aeabi_dsub+0x3a8>
 8001bda:	2501      	movs	r5, #1
 8001bdc:	2938      	cmp	r1, #56	@ 0x38
 8001bde:	dd00      	ble.n	8001be2 <__aeabi_dsub+0x25a>
 8001be0:	e72f      	b.n	8001a42 <__aeabi_dsub+0xba>
 8001be2:	468a      	mov	sl, r1
 8001be4:	e718      	b.n	8001a18 <__aeabi_dsub+0x90>
 8001be6:	2201      	movs	r2, #1
 8001be8:	4051      	eors	r1, r2
 8001bea:	428e      	cmp	r6, r1
 8001bec:	d1d0      	bne.n	8001b90 <__aeabi_dsub+0x208>
 8001bee:	4653      	mov	r3, sl
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d100      	bne.n	8001bf6 <__aeabi_dsub+0x26e>
 8001bf4:	e0be      	b.n	8001d74 <__aeabi_dsub+0x3ec>
 8001bf6:	2f00      	cmp	r7, #0
 8001bf8:	d000      	beq.n	8001bfc <__aeabi_dsub+0x274>
 8001bfa:	e138      	b.n	8001e6e <__aeabi_dsub+0x4e6>
 8001bfc:	46ca      	mov	sl, r9
 8001bfe:	0022      	movs	r2, r4
 8001c00:	4302      	orrs	r2, r0
 8001c02:	d100      	bne.n	8001c06 <__aeabi_dsub+0x27e>
 8001c04:	e1e2      	b.n	8001fcc <__aeabi_dsub+0x644>
 8001c06:	4653      	mov	r3, sl
 8001c08:	1e59      	subs	r1, r3, #1
 8001c0a:	2b01      	cmp	r3, #1
 8001c0c:	d100      	bne.n	8001c10 <__aeabi_dsub+0x288>
 8001c0e:	e20d      	b.n	800202c <__aeabi_dsub+0x6a4>
 8001c10:	4a32      	ldr	r2, [pc, #200]	@ (8001cdc <__aeabi_dsub+0x354>)
 8001c12:	4592      	cmp	sl, r2
 8001c14:	d100      	bne.n	8001c18 <__aeabi_dsub+0x290>
 8001c16:	e1d2      	b.n	8001fbe <__aeabi_dsub+0x636>
 8001c18:	2701      	movs	r7, #1
 8001c1a:	2938      	cmp	r1, #56	@ 0x38
 8001c1c:	dc13      	bgt.n	8001c46 <__aeabi_dsub+0x2be>
 8001c1e:	291f      	cmp	r1, #31
 8001c20:	dd00      	ble.n	8001c24 <__aeabi_dsub+0x29c>
 8001c22:	e1ee      	b.n	8002002 <__aeabi_dsub+0x67a>
 8001c24:	2220      	movs	r2, #32
 8001c26:	9b02      	ldr	r3, [sp, #8]
 8001c28:	1a52      	subs	r2, r2, r1
 8001c2a:	0025      	movs	r5, r4
 8001c2c:	0007      	movs	r7, r0
 8001c2e:	469a      	mov	sl, r3
 8001c30:	40cc      	lsrs	r4, r1
 8001c32:	4090      	lsls	r0, r2
 8001c34:	4095      	lsls	r5, r2
 8001c36:	40cf      	lsrs	r7, r1
 8001c38:	44a2      	add	sl, r4
 8001c3a:	1e42      	subs	r2, r0, #1
 8001c3c:	4190      	sbcs	r0, r2
 8001c3e:	4653      	mov	r3, sl
 8001c40:	432f      	orrs	r7, r5
 8001c42:	4307      	orrs	r7, r0
 8001c44:	9302      	str	r3, [sp, #8]
 8001c46:	003d      	movs	r5, r7
 8001c48:	4465      	add	r5, ip
 8001c4a:	4565      	cmp	r5, ip
 8001c4c:	4192      	sbcs	r2, r2
 8001c4e:	9b02      	ldr	r3, [sp, #8]
 8001c50:	4252      	negs	r2, r2
 8001c52:	464f      	mov	r7, r9
 8001c54:	18d4      	adds	r4, r2, r3
 8001c56:	e780      	b.n	8001b5a <__aeabi_dsub+0x1d2>
 8001c58:	4a23      	ldr	r2, [pc, #140]	@ (8001ce8 <__aeabi_dsub+0x360>)
 8001c5a:	1c7d      	adds	r5, r7, #1
 8001c5c:	4215      	tst	r5, r2
 8001c5e:	d000      	beq.n	8001c62 <__aeabi_dsub+0x2da>
 8001c60:	e0aa      	b.n	8001db8 <__aeabi_dsub+0x430>
 8001c62:	4662      	mov	r2, ip
 8001c64:	0025      	movs	r5, r4
 8001c66:	9b02      	ldr	r3, [sp, #8]
 8001c68:	4305      	orrs	r5, r0
 8001c6a:	431a      	orrs	r2, r3
 8001c6c:	2f00      	cmp	r7, #0
 8001c6e:	d000      	beq.n	8001c72 <__aeabi_dsub+0x2ea>
 8001c70:	e0f5      	b.n	8001e5e <__aeabi_dsub+0x4d6>
 8001c72:	2d00      	cmp	r5, #0
 8001c74:	d100      	bne.n	8001c78 <__aeabi_dsub+0x2f0>
 8001c76:	e16b      	b.n	8001f50 <__aeabi_dsub+0x5c8>
 8001c78:	2a00      	cmp	r2, #0
 8001c7a:	d100      	bne.n	8001c7e <__aeabi_dsub+0x2f6>
 8001c7c:	e152      	b.n	8001f24 <__aeabi_dsub+0x59c>
 8001c7e:	4663      	mov	r3, ip
 8001c80:	1ac5      	subs	r5, r0, r3
 8001c82:	9b02      	ldr	r3, [sp, #8]
 8001c84:	1ae2      	subs	r2, r4, r3
 8001c86:	42a8      	cmp	r0, r5
 8001c88:	419b      	sbcs	r3, r3
 8001c8a:	425b      	negs	r3, r3
 8001c8c:	1ad3      	subs	r3, r2, r3
 8001c8e:	021a      	lsls	r2, r3, #8
 8001c90:	d400      	bmi.n	8001c94 <__aeabi_dsub+0x30c>
 8001c92:	e1d5      	b.n	8002040 <__aeabi_dsub+0x6b8>
 8001c94:	4663      	mov	r3, ip
 8001c96:	1a1d      	subs	r5, r3, r0
 8001c98:	45ac      	cmp	ip, r5
 8001c9a:	4192      	sbcs	r2, r2
 8001c9c:	2601      	movs	r6, #1
 8001c9e:	9b02      	ldr	r3, [sp, #8]
 8001ca0:	4252      	negs	r2, r2
 8001ca2:	1b1c      	subs	r4, r3, r4
 8001ca4:	4688      	mov	r8, r1
 8001ca6:	1aa4      	subs	r4, r4, r2
 8001ca8:	400e      	ands	r6, r1
 8001caa:	e6f6      	b.n	8001a9a <__aeabi_dsub+0x112>
 8001cac:	4297      	cmp	r7, r2
 8001cae:	d03f      	beq.n	8001d30 <__aeabi_dsub+0x3a8>
 8001cb0:	4652      	mov	r2, sl
 8001cb2:	2501      	movs	r5, #1
 8001cb4:	2a38      	cmp	r2, #56	@ 0x38
 8001cb6:	dd00      	ble.n	8001cba <__aeabi_dsub+0x332>
 8001cb8:	e74a      	b.n	8001b50 <__aeabi_dsub+0x1c8>
 8001cba:	2280      	movs	r2, #128	@ 0x80
 8001cbc:	9b02      	ldr	r3, [sp, #8]
 8001cbe:	0412      	lsls	r2, r2, #16
 8001cc0:	4313      	orrs	r3, r2
 8001cc2:	9302      	str	r3, [sp, #8]
 8001cc4:	e72d      	b.n	8001b22 <__aeabi_dsub+0x19a>
 8001cc6:	003c      	movs	r4, r7
 8001cc8:	2500      	movs	r5, #0
 8001cca:	2200      	movs	r2, #0
 8001ccc:	e705      	b.n	8001ada <__aeabi_dsub+0x152>
 8001cce:	2307      	movs	r3, #7
 8001cd0:	402b      	ands	r3, r5
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d000      	beq.n	8001cd8 <__aeabi_dsub+0x350>
 8001cd6:	e6e2      	b.n	8001a9e <__aeabi_dsub+0x116>
 8001cd8:	e06b      	b.n	8001db2 <__aeabi_dsub+0x42a>
 8001cda:	46c0      	nop			@ (mov r8, r8)
 8001cdc:	000007ff 	.word	0x000007ff
 8001ce0:	ff7fffff 	.word	0xff7fffff
 8001ce4:	fffff801 	.word	0xfffff801
 8001ce8:	000007fe 	.word	0x000007fe
 8001cec:	0028      	movs	r0, r5
 8001cee:	f000 fa51 	bl	8002194 <__clzsi2>
 8001cf2:	0003      	movs	r3, r0
 8001cf4:	3318      	adds	r3, #24
 8001cf6:	2b1f      	cmp	r3, #31
 8001cf8:	dc00      	bgt.n	8001cfc <__aeabi_dsub+0x374>
 8001cfa:	e6b4      	b.n	8001a66 <__aeabi_dsub+0xde>
 8001cfc:	002a      	movs	r2, r5
 8001cfe:	3808      	subs	r0, #8
 8001d00:	4082      	lsls	r2, r0
 8001d02:	429f      	cmp	r7, r3
 8001d04:	dd00      	ble.n	8001d08 <__aeabi_dsub+0x380>
 8001d06:	e0b9      	b.n	8001e7c <__aeabi_dsub+0x4f4>
 8001d08:	1bdb      	subs	r3, r3, r7
 8001d0a:	1c58      	adds	r0, r3, #1
 8001d0c:	281f      	cmp	r0, #31
 8001d0e:	dc00      	bgt.n	8001d12 <__aeabi_dsub+0x38a>
 8001d10:	e1a0      	b.n	8002054 <__aeabi_dsub+0x6cc>
 8001d12:	0015      	movs	r5, r2
 8001d14:	3b1f      	subs	r3, #31
 8001d16:	40dd      	lsrs	r5, r3
 8001d18:	2820      	cmp	r0, #32
 8001d1a:	d005      	beq.n	8001d28 <__aeabi_dsub+0x3a0>
 8001d1c:	2340      	movs	r3, #64	@ 0x40
 8001d1e:	1a1b      	subs	r3, r3, r0
 8001d20:	409a      	lsls	r2, r3
 8001d22:	1e53      	subs	r3, r2, #1
 8001d24:	419a      	sbcs	r2, r3
 8001d26:	4315      	orrs	r5, r2
 8001d28:	2307      	movs	r3, #7
 8001d2a:	2700      	movs	r7, #0
 8001d2c:	402b      	ands	r3, r5
 8001d2e:	e7d0      	b.n	8001cd2 <__aeabi_dsub+0x34a>
 8001d30:	08c0      	lsrs	r0, r0, #3
 8001d32:	0762      	lsls	r2, r4, #29
 8001d34:	4302      	orrs	r2, r0
 8001d36:	08e4      	lsrs	r4, r4, #3
 8001d38:	e737      	b.n	8001baa <__aeabi_dsub+0x222>
 8001d3a:	08ea      	lsrs	r2, r5, #3
 8001d3c:	0763      	lsls	r3, r4, #29
 8001d3e:	431a      	orrs	r2, r3
 8001d40:	4bd3      	ldr	r3, [pc, #844]	@ (8002090 <__aeabi_dsub+0x708>)
 8001d42:	08e4      	lsrs	r4, r4, #3
 8001d44:	429f      	cmp	r7, r3
 8001d46:	d100      	bne.n	8001d4a <__aeabi_dsub+0x3c2>
 8001d48:	e72f      	b.n	8001baa <__aeabi_dsub+0x222>
 8001d4a:	0324      	lsls	r4, r4, #12
 8001d4c:	0b25      	lsrs	r5, r4, #12
 8001d4e:	057c      	lsls	r4, r7, #21
 8001d50:	0d64      	lsrs	r4, r4, #21
 8001d52:	e6c2      	b.n	8001ada <__aeabi_dsub+0x152>
 8001d54:	46ca      	mov	sl, r9
 8001d56:	0022      	movs	r2, r4
 8001d58:	4302      	orrs	r2, r0
 8001d5a:	d158      	bne.n	8001e0e <__aeabi_dsub+0x486>
 8001d5c:	4663      	mov	r3, ip
 8001d5e:	000e      	movs	r6, r1
 8001d60:	9c02      	ldr	r4, [sp, #8]
 8001d62:	9303      	str	r3, [sp, #12]
 8001d64:	9b03      	ldr	r3, [sp, #12]
 8001d66:	4657      	mov	r7, sl
 8001d68:	08da      	lsrs	r2, r3, #3
 8001d6a:	e7e7      	b.n	8001d3c <__aeabi_dsub+0x3b4>
 8001d6c:	4cc9      	ldr	r4, [pc, #804]	@ (8002094 <__aeabi_dsub+0x70c>)
 8001d6e:	1aff      	subs	r7, r7, r3
 8001d70:	4014      	ands	r4, r2
 8001d72:	e692      	b.n	8001a9a <__aeabi_dsub+0x112>
 8001d74:	4dc8      	ldr	r5, [pc, #800]	@ (8002098 <__aeabi_dsub+0x710>)
 8001d76:	1c7a      	adds	r2, r7, #1
 8001d78:	422a      	tst	r2, r5
 8001d7a:	d000      	beq.n	8001d7e <__aeabi_dsub+0x3f6>
 8001d7c:	e084      	b.n	8001e88 <__aeabi_dsub+0x500>
 8001d7e:	0022      	movs	r2, r4
 8001d80:	4302      	orrs	r2, r0
 8001d82:	2f00      	cmp	r7, #0
 8001d84:	d000      	beq.n	8001d88 <__aeabi_dsub+0x400>
 8001d86:	e0ef      	b.n	8001f68 <__aeabi_dsub+0x5e0>
 8001d88:	2a00      	cmp	r2, #0
 8001d8a:	d100      	bne.n	8001d8e <__aeabi_dsub+0x406>
 8001d8c:	e0e5      	b.n	8001f5a <__aeabi_dsub+0x5d2>
 8001d8e:	4662      	mov	r2, ip
 8001d90:	9902      	ldr	r1, [sp, #8]
 8001d92:	430a      	orrs	r2, r1
 8001d94:	d100      	bne.n	8001d98 <__aeabi_dsub+0x410>
 8001d96:	e0c5      	b.n	8001f24 <__aeabi_dsub+0x59c>
 8001d98:	4663      	mov	r3, ip
 8001d9a:	18c5      	adds	r5, r0, r3
 8001d9c:	468c      	mov	ip, r1
 8001d9e:	4285      	cmp	r5, r0
 8001da0:	4180      	sbcs	r0, r0
 8001da2:	4464      	add	r4, ip
 8001da4:	4240      	negs	r0, r0
 8001da6:	1824      	adds	r4, r4, r0
 8001da8:	0223      	lsls	r3, r4, #8
 8001daa:	d502      	bpl.n	8001db2 <__aeabi_dsub+0x42a>
 8001dac:	4bb9      	ldr	r3, [pc, #740]	@ (8002094 <__aeabi_dsub+0x70c>)
 8001dae:	3701      	adds	r7, #1
 8001db0:	401c      	ands	r4, r3
 8001db2:	46ba      	mov	sl, r7
 8001db4:	9503      	str	r5, [sp, #12]
 8001db6:	e7d5      	b.n	8001d64 <__aeabi_dsub+0x3dc>
 8001db8:	4662      	mov	r2, ip
 8001dba:	1a85      	subs	r5, r0, r2
 8001dbc:	42a8      	cmp	r0, r5
 8001dbe:	4192      	sbcs	r2, r2
 8001dc0:	4252      	negs	r2, r2
 8001dc2:	4691      	mov	r9, r2
 8001dc4:	9b02      	ldr	r3, [sp, #8]
 8001dc6:	1ae3      	subs	r3, r4, r3
 8001dc8:	001a      	movs	r2, r3
 8001dca:	464b      	mov	r3, r9
 8001dcc:	1ad2      	subs	r2, r2, r3
 8001dce:	0013      	movs	r3, r2
 8001dd0:	4691      	mov	r9, r2
 8001dd2:	021a      	lsls	r2, r3, #8
 8001dd4:	d46c      	bmi.n	8001eb0 <__aeabi_dsub+0x528>
 8001dd6:	464a      	mov	r2, r9
 8001dd8:	464c      	mov	r4, r9
 8001dda:	432a      	orrs	r2, r5
 8001ddc:	d000      	beq.n	8001de0 <__aeabi_dsub+0x458>
 8001dde:	e63a      	b.n	8001a56 <__aeabi_dsub+0xce>
 8001de0:	2600      	movs	r6, #0
 8001de2:	2400      	movs	r4, #0
 8001de4:	2500      	movs	r5, #0
 8001de6:	e678      	b.n	8001ada <__aeabi_dsub+0x152>
 8001de8:	9902      	ldr	r1, [sp, #8]
 8001dea:	4653      	mov	r3, sl
 8001dec:	000d      	movs	r5, r1
 8001dee:	3a20      	subs	r2, #32
 8001df0:	40d5      	lsrs	r5, r2
 8001df2:	2b20      	cmp	r3, #32
 8001df4:	d006      	beq.n	8001e04 <__aeabi_dsub+0x47c>
 8001df6:	2240      	movs	r2, #64	@ 0x40
 8001df8:	1ad2      	subs	r2, r2, r3
 8001dfa:	000b      	movs	r3, r1
 8001dfc:	4093      	lsls	r3, r2
 8001dfe:	4662      	mov	r2, ip
 8001e00:	431a      	orrs	r2, r3
 8001e02:	4693      	mov	fp, r2
 8001e04:	465b      	mov	r3, fp
 8001e06:	1e5a      	subs	r2, r3, #1
 8001e08:	4193      	sbcs	r3, r2
 8001e0a:	431d      	orrs	r5, r3
 8001e0c:	e619      	b.n	8001a42 <__aeabi_dsub+0xba>
 8001e0e:	4653      	mov	r3, sl
 8001e10:	1e5a      	subs	r2, r3, #1
 8001e12:	2b01      	cmp	r3, #1
 8001e14:	d100      	bne.n	8001e18 <__aeabi_dsub+0x490>
 8001e16:	e0c6      	b.n	8001fa6 <__aeabi_dsub+0x61e>
 8001e18:	4e9d      	ldr	r6, [pc, #628]	@ (8002090 <__aeabi_dsub+0x708>)
 8001e1a:	45b2      	cmp	sl, r6
 8001e1c:	d100      	bne.n	8001e20 <__aeabi_dsub+0x498>
 8001e1e:	e6bd      	b.n	8001b9c <__aeabi_dsub+0x214>
 8001e20:	4688      	mov	r8, r1
 8001e22:	000e      	movs	r6, r1
 8001e24:	2501      	movs	r5, #1
 8001e26:	2a38      	cmp	r2, #56	@ 0x38
 8001e28:	dc10      	bgt.n	8001e4c <__aeabi_dsub+0x4c4>
 8001e2a:	2a1f      	cmp	r2, #31
 8001e2c:	dc7f      	bgt.n	8001f2e <__aeabi_dsub+0x5a6>
 8001e2e:	2120      	movs	r1, #32
 8001e30:	0025      	movs	r5, r4
 8001e32:	1a89      	subs	r1, r1, r2
 8001e34:	0007      	movs	r7, r0
 8001e36:	4088      	lsls	r0, r1
 8001e38:	408d      	lsls	r5, r1
 8001e3a:	40d7      	lsrs	r7, r2
 8001e3c:	40d4      	lsrs	r4, r2
 8001e3e:	1e41      	subs	r1, r0, #1
 8001e40:	4188      	sbcs	r0, r1
 8001e42:	9b02      	ldr	r3, [sp, #8]
 8001e44:	433d      	orrs	r5, r7
 8001e46:	1b1b      	subs	r3, r3, r4
 8001e48:	4305      	orrs	r5, r0
 8001e4a:	9302      	str	r3, [sp, #8]
 8001e4c:	4662      	mov	r2, ip
 8001e4e:	1b55      	subs	r5, r2, r5
 8001e50:	45ac      	cmp	ip, r5
 8001e52:	4192      	sbcs	r2, r2
 8001e54:	9b02      	ldr	r3, [sp, #8]
 8001e56:	4252      	negs	r2, r2
 8001e58:	464f      	mov	r7, r9
 8001e5a:	1a9c      	subs	r4, r3, r2
 8001e5c:	e5f6      	b.n	8001a4c <__aeabi_dsub+0xc4>
 8001e5e:	2d00      	cmp	r5, #0
 8001e60:	d000      	beq.n	8001e64 <__aeabi_dsub+0x4dc>
 8001e62:	e0b7      	b.n	8001fd4 <__aeabi_dsub+0x64c>
 8001e64:	2a00      	cmp	r2, #0
 8001e66:	d100      	bne.n	8001e6a <__aeabi_dsub+0x4e2>
 8001e68:	e0f0      	b.n	800204c <__aeabi_dsub+0x6c4>
 8001e6a:	2601      	movs	r6, #1
 8001e6c:	400e      	ands	r6, r1
 8001e6e:	4663      	mov	r3, ip
 8001e70:	9802      	ldr	r0, [sp, #8]
 8001e72:	08d9      	lsrs	r1, r3, #3
 8001e74:	0742      	lsls	r2, r0, #29
 8001e76:	430a      	orrs	r2, r1
 8001e78:	08c4      	lsrs	r4, r0, #3
 8001e7a:	e696      	b.n	8001baa <__aeabi_dsub+0x222>
 8001e7c:	4c85      	ldr	r4, [pc, #532]	@ (8002094 <__aeabi_dsub+0x70c>)
 8001e7e:	1aff      	subs	r7, r7, r3
 8001e80:	4014      	ands	r4, r2
 8001e82:	0762      	lsls	r2, r4, #29
 8001e84:	08e4      	lsrs	r4, r4, #3
 8001e86:	e760      	b.n	8001d4a <__aeabi_dsub+0x3c2>
 8001e88:	4981      	ldr	r1, [pc, #516]	@ (8002090 <__aeabi_dsub+0x708>)
 8001e8a:	428a      	cmp	r2, r1
 8001e8c:	d100      	bne.n	8001e90 <__aeabi_dsub+0x508>
 8001e8e:	e0c9      	b.n	8002024 <__aeabi_dsub+0x69c>
 8001e90:	4663      	mov	r3, ip
 8001e92:	18c1      	adds	r1, r0, r3
 8001e94:	4281      	cmp	r1, r0
 8001e96:	4180      	sbcs	r0, r0
 8001e98:	9b02      	ldr	r3, [sp, #8]
 8001e9a:	4240      	negs	r0, r0
 8001e9c:	18e3      	adds	r3, r4, r3
 8001e9e:	181b      	adds	r3, r3, r0
 8001ea0:	07dd      	lsls	r5, r3, #31
 8001ea2:	085c      	lsrs	r4, r3, #1
 8001ea4:	2307      	movs	r3, #7
 8001ea6:	0849      	lsrs	r1, r1, #1
 8001ea8:	430d      	orrs	r5, r1
 8001eaa:	0017      	movs	r7, r2
 8001eac:	402b      	ands	r3, r5
 8001eae:	e710      	b.n	8001cd2 <__aeabi_dsub+0x34a>
 8001eb0:	4663      	mov	r3, ip
 8001eb2:	1a1d      	subs	r5, r3, r0
 8001eb4:	45ac      	cmp	ip, r5
 8001eb6:	4192      	sbcs	r2, r2
 8001eb8:	2601      	movs	r6, #1
 8001eba:	9b02      	ldr	r3, [sp, #8]
 8001ebc:	4252      	negs	r2, r2
 8001ebe:	1b1c      	subs	r4, r3, r4
 8001ec0:	4688      	mov	r8, r1
 8001ec2:	1aa4      	subs	r4, r4, r2
 8001ec4:	400e      	ands	r6, r1
 8001ec6:	e5c6      	b.n	8001a56 <__aeabi_dsub+0xce>
 8001ec8:	4663      	mov	r3, ip
 8001eca:	18c5      	adds	r5, r0, r3
 8001ecc:	9b02      	ldr	r3, [sp, #8]
 8001ece:	4285      	cmp	r5, r0
 8001ed0:	4180      	sbcs	r0, r0
 8001ed2:	469c      	mov	ip, r3
 8001ed4:	4240      	negs	r0, r0
 8001ed6:	4464      	add	r4, ip
 8001ed8:	1824      	adds	r4, r4, r0
 8001eda:	2701      	movs	r7, #1
 8001edc:	0223      	lsls	r3, r4, #8
 8001ede:	d400      	bmi.n	8001ee2 <__aeabi_dsub+0x55a>
 8001ee0:	e6f5      	b.n	8001cce <__aeabi_dsub+0x346>
 8001ee2:	2702      	movs	r7, #2
 8001ee4:	e641      	b.n	8001b6a <__aeabi_dsub+0x1e2>
 8001ee6:	4663      	mov	r3, ip
 8001ee8:	1ac5      	subs	r5, r0, r3
 8001eea:	42a8      	cmp	r0, r5
 8001eec:	4180      	sbcs	r0, r0
 8001eee:	9b02      	ldr	r3, [sp, #8]
 8001ef0:	4240      	negs	r0, r0
 8001ef2:	1ae4      	subs	r4, r4, r3
 8001ef4:	2701      	movs	r7, #1
 8001ef6:	1a24      	subs	r4, r4, r0
 8001ef8:	e5a8      	b.n	8001a4c <__aeabi_dsub+0xc4>
 8001efa:	9d02      	ldr	r5, [sp, #8]
 8001efc:	4652      	mov	r2, sl
 8001efe:	002b      	movs	r3, r5
 8001f00:	3a20      	subs	r2, #32
 8001f02:	40d3      	lsrs	r3, r2
 8001f04:	0019      	movs	r1, r3
 8001f06:	4653      	mov	r3, sl
 8001f08:	2b20      	cmp	r3, #32
 8001f0a:	d006      	beq.n	8001f1a <__aeabi_dsub+0x592>
 8001f0c:	2240      	movs	r2, #64	@ 0x40
 8001f0e:	1ad2      	subs	r2, r2, r3
 8001f10:	002b      	movs	r3, r5
 8001f12:	4093      	lsls	r3, r2
 8001f14:	4662      	mov	r2, ip
 8001f16:	431a      	orrs	r2, r3
 8001f18:	4693      	mov	fp, r2
 8001f1a:	465d      	mov	r5, fp
 8001f1c:	1e6b      	subs	r3, r5, #1
 8001f1e:	419d      	sbcs	r5, r3
 8001f20:	430d      	orrs	r5, r1
 8001f22:	e615      	b.n	8001b50 <__aeabi_dsub+0x1c8>
 8001f24:	0762      	lsls	r2, r4, #29
 8001f26:	08c0      	lsrs	r0, r0, #3
 8001f28:	4302      	orrs	r2, r0
 8001f2a:	08e4      	lsrs	r4, r4, #3
 8001f2c:	e70d      	b.n	8001d4a <__aeabi_dsub+0x3c2>
 8001f2e:	0011      	movs	r1, r2
 8001f30:	0027      	movs	r7, r4
 8001f32:	3920      	subs	r1, #32
 8001f34:	40cf      	lsrs	r7, r1
 8001f36:	2a20      	cmp	r2, #32
 8001f38:	d005      	beq.n	8001f46 <__aeabi_dsub+0x5be>
 8001f3a:	2140      	movs	r1, #64	@ 0x40
 8001f3c:	1a8a      	subs	r2, r1, r2
 8001f3e:	4094      	lsls	r4, r2
 8001f40:	0025      	movs	r5, r4
 8001f42:	4305      	orrs	r5, r0
 8001f44:	9503      	str	r5, [sp, #12]
 8001f46:	9d03      	ldr	r5, [sp, #12]
 8001f48:	1e6a      	subs	r2, r5, #1
 8001f4a:	4195      	sbcs	r5, r2
 8001f4c:	433d      	orrs	r5, r7
 8001f4e:	e77d      	b.n	8001e4c <__aeabi_dsub+0x4c4>
 8001f50:	2a00      	cmp	r2, #0
 8001f52:	d100      	bne.n	8001f56 <__aeabi_dsub+0x5ce>
 8001f54:	e744      	b.n	8001de0 <__aeabi_dsub+0x458>
 8001f56:	2601      	movs	r6, #1
 8001f58:	400e      	ands	r6, r1
 8001f5a:	4663      	mov	r3, ip
 8001f5c:	08d9      	lsrs	r1, r3, #3
 8001f5e:	9b02      	ldr	r3, [sp, #8]
 8001f60:	075a      	lsls	r2, r3, #29
 8001f62:	430a      	orrs	r2, r1
 8001f64:	08dc      	lsrs	r4, r3, #3
 8001f66:	e6f0      	b.n	8001d4a <__aeabi_dsub+0x3c2>
 8001f68:	2a00      	cmp	r2, #0
 8001f6a:	d028      	beq.n	8001fbe <__aeabi_dsub+0x636>
 8001f6c:	4662      	mov	r2, ip
 8001f6e:	9f02      	ldr	r7, [sp, #8]
 8001f70:	08c0      	lsrs	r0, r0, #3
 8001f72:	433a      	orrs	r2, r7
 8001f74:	d100      	bne.n	8001f78 <__aeabi_dsub+0x5f0>
 8001f76:	e6dc      	b.n	8001d32 <__aeabi_dsub+0x3aa>
 8001f78:	0762      	lsls	r2, r4, #29
 8001f7a:	4310      	orrs	r0, r2
 8001f7c:	2280      	movs	r2, #128	@ 0x80
 8001f7e:	08e4      	lsrs	r4, r4, #3
 8001f80:	0312      	lsls	r2, r2, #12
 8001f82:	4214      	tst	r4, r2
 8001f84:	d009      	beq.n	8001f9a <__aeabi_dsub+0x612>
 8001f86:	08fd      	lsrs	r5, r7, #3
 8001f88:	4215      	tst	r5, r2
 8001f8a:	d106      	bne.n	8001f9a <__aeabi_dsub+0x612>
 8001f8c:	4663      	mov	r3, ip
 8001f8e:	2601      	movs	r6, #1
 8001f90:	002c      	movs	r4, r5
 8001f92:	08d8      	lsrs	r0, r3, #3
 8001f94:	077b      	lsls	r3, r7, #29
 8001f96:	4318      	orrs	r0, r3
 8001f98:	400e      	ands	r6, r1
 8001f9a:	0f42      	lsrs	r2, r0, #29
 8001f9c:	00c0      	lsls	r0, r0, #3
 8001f9e:	08c0      	lsrs	r0, r0, #3
 8001fa0:	0752      	lsls	r2, r2, #29
 8001fa2:	4302      	orrs	r2, r0
 8001fa4:	e601      	b.n	8001baa <__aeabi_dsub+0x222>
 8001fa6:	4663      	mov	r3, ip
 8001fa8:	1a1d      	subs	r5, r3, r0
 8001faa:	45ac      	cmp	ip, r5
 8001fac:	4192      	sbcs	r2, r2
 8001fae:	9b02      	ldr	r3, [sp, #8]
 8001fb0:	4252      	negs	r2, r2
 8001fb2:	1b1c      	subs	r4, r3, r4
 8001fb4:	000e      	movs	r6, r1
 8001fb6:	4688      	mov	r8, r1
 8001fb8:	2701      	movs	r7, #1
 8001fba:	1aa4      	subs	r4, r4, r2
 8001fbc:	e546      	b.n	8001a4c <__aeabi_dsub+0xc4>
 8001fbe:	4663      	mov	r3, ip
 8001fc0:	08d9      	lsrs	r1, r3, #3
 8001fc2:	9b02      	ldr	r3, [sp, #8]
 8001fc4:	075a      	lsls	r2, r3, #29
 8001fc6:	430a      	orrs	r2, r1
 8001fc8:	08dc      	lsrs	r4, r3, #3
 8001fca:	e5ee      	b.n	8001baa <__aeabi_dsub+0x222>
 8001fcc:	4663      	mov	r3, ip
 8001fce:	9c02      	ldr	r4, [sp, #8]
 8001fd0:	9303      	str	r3, [sp, #12]
 8001fd2:	e6c7      	b.n	8001d64 <__aeabi_dsub+0x3dc>
 8001fd4:	08c0      	lsrs	r0, r0, #3
 8001fd6:	2a00      	cmp	r2, #0
 8001fd8:	d100      	bne.n	8001fdc <__aeabi_dsub+0x654>
 8001fda:	e6aa      	b.n	8001d32 <__aeabi_dsub+0x3aa>
 8001fdc:	0762      	lsls	r2, r4, #29
 8001fde:	4310      	orrs	r0, r2
 8001fe0:	2280      	movs	r2, #128	@ 0x80
 8001fe2:	08e4      	lsrs	r4, r4, #3
 8001fe4:	0312      	lsls	r2, r2, #12
 8001fe6:	4214      	tst	r4, r2
 8001fe8:	d0d7      	beq.n	8001f9a <__aeabi_dsub+0x612>
 8001fea:	9f02      	ldr	r7, [sp, #8]
 8001fec:	08fd      	lsrs	r5, r7, #3
 8001fee:	4215      	tst	r5, r2
 8001ff0:	d1d3      	bne.n	8001f9a <__aeabi_dsub+0x612>
 8001ff2:	4663      	mov	r3, ip
 8001ff4:	2601      	movs	r6, #1
 8001ff6:	08d8      	lsrs	r0, r3, #3
 8001ff8:	077b      	lsls	r3, r7, #29
 8001ffa:	002c      	movs	r4, r5
 8001ffc:	4318      	orrs	r0, r3
 8001ffe:	400e      	ands	r6, r1
 8002000:	e7cb      	b.n	8001f9a <__aeabi_dsub+0x612>
 8002002:	000a      	movs	r2, r1
 8002004:	0027      	movs	r7, r4
 8002006:	3a20      	subs	r2, #32
 8002008:	40d7      	lsrs	r7, r2
 800200a:	2920      	cmp	r1, #32
 800200c:	d005      	beq.n	800201a <__aeabi_dsub+0x692>
 800200e:	2240      	movs	r2, #64	@ 0x40
 8002010:	1a52      	subs	r2, r2, r1
 8002012:	4094      	lsls	r4, r2
 8002014:	0025      	movs	r5, r4
 8002016:	4305      	orrs	r5, r0
 8002018:	9503      	str	r5, [sp, #12]
 800201a:	9d03      	ldr	r5, [sp, #12]
 800201c:	1e6a      	subs	r2, r5, #1
 800201e:	4195      	sbcs	r5, r2
 8002020:	432f      	orrs	r7, r5
 8002022:	e610      	b.n	8001c46 <__aeabi_dsub+0x2be>
 8002024:	0014      	movs	r4, r2
 8002026:	2500      	movs	r5, #0
 8002028:	2200      	movs	r2, #0
 800202a:	e556      	b.n	8001ada <__aeabi_dsub+0x152>
 800202c:	9b02      	ldr	r3, [sp, #8]
 800202e:	4460      	add	r0, ip
 8002030:	4699      	mov	r9, r3
 8002032:	4560      	cmp	r0, ip
 8002034:	4192      	sbcs	r2, r2
 8002036:	444c      	add	r4, r9
 8002038:	4252      	negs	r2, r2
 800203a:	0005      	movs	r5, r0
 800203c:	18a4      	adds	r4, r4, r2
 800203e:	e74c      	b.n	8001eda <__aeabi_dsub+0x552>
 8002040:	001a      	movs	r2, r3
 8002042:	001c      	movs	r4, r3
 8002044:	432a      	orrs	r2, r5
 8002046:	d000      	beq.n	800204a <__aeabi_dsub+0x6c2>
 8002048:	e6b3      	b.n	8001db2 <__aeabi_dsub+0x42a>
 800204a:	e6c9      	b.n	8001de0 <__aeabi_dsub+0x458>
 800204c:	2480      	movs	r4, #128	@ 0x80
 800204e:	2600      	movs	r6, #0
 8002050:	0324      	lsls	r4, r4, #12
 8002052:	e5ae      	b.n	8001bb2 <__aeabi_dsub+0x22a>
 8002054:	2120      	movs	r1, #32
 8002056:	2500      	movs	r5, #0
 8002058:	1a09      	subs	r1, r1, r0
 800205a:	e517      	b.n	8001a8c <__aeabi_dsub+0x104>
 800205c:	2200      	movs	r2, #0
 800205e:	2500      	movs	r5, #0
 8002060:	4c0b      	ldr	r4, [pc, #44]	@ (8002090 <__aeabi_dsub+0x708>)
 8002062:	e53a      	b.n	8001ada <__aeabi_dsub+0x152>
 8002064:	2d00      	cmp	r5, #0
 8002066:	d100      	bne.n	800206a <__aeabi_dsub+0x6e2>
 8002068:	e5f6      	b.n	8001c58 <__aeabi_dsub+0x2d0>
 800206a:	464b      	mov	r3, r9
 800206c:	1bda      	subs	r2, r3, r7
 800206e:	4692      	mov	sl, r2
 8002070:	2f00      	cmp	r7, #0
 8002072:	d100      	bne.n	8002076 <__aeabi_dsub+0x6ee>
 8002074:	e66f      	b.n	8001d56 <__aeabi_dsub+0x3ce>
 8002076:	2a38      	cmp	r2, #56	@ 0x38
 8002078:	dc05      	bgt.n	8002086 <__aeabi_dsub+0x6fe>
 800207a:	2680      	movs	r6, #128	@ 0x80
 800207c:	0436      	lsls	r6, r6, #16
 800207e:	4334      	orrs	r4, r6
 8002080:	4688      	mov	r8, r1
 8002082:	000e      	movs	r6, r1
 8002084:	e6d1      	b.n	8001e2a <__aeabi_dsub+0x4a2>
 8002086:	4688      	mov	r8, r1
 8002088:	000e      	movs	r6, r1
 800208a:	2501      	movs	r5, #1
 800208c:	e6de      	b.n	8001e4c <__aeabi_dsub+0x4c4>
 800208e:	46c0      	nop			@ (mov r8, r8)
 8002090:	000007ff 	.word	0x000007ff
 8002094:	ff7fffff 	.word	0xff7fffff
 8002098:	000007fe 	.word	0x000007fe
 800209c:	2d00      	cmp	r5, #0
 800209e:	d100      	bne.n	80020a2 <__aeabi_dsub+0x71a>
 80020a0:	e668      	b.n	8001d74 <__aeabi_dsub+0x3ec>
 80020a2:	464b      	mov	r3, r9
 80020a4:	1bd9      	subs	r1, r3, r7
 80020a6:	2f00      	cmp	r7, #0
 80020a8:	d101      	bne.n	80020ae <__aeabi_dsub+0x726>
 80020aa:	468a      	mov	sl, r1
 80020ac:	e5a7      	b.n	8001bfe <__aeabi_dsub+0x276>
 80020ae:	2701      	movs	r7, #1
 80020b0:	2938      	cmp	r1, #56	@ 0x38
 80020b2:	dd00      	ble.n	80020b6 <__aeabi_dsub+0x72e>
 80020b4:	e5c7      	b.n	8001c46 <__aeabi_dsub+0x2be>
 80020b6:	2280      	movs	r2, #128	@ 0x80
 80020b8:	0412      	lsls	r2, r2, #16
 80020ba:	4314      	orrs	r4, r2
 80020bc:	e5af      	b.n	8001c1e <__aeabi_dsub+0x296>
 80020be:	46c0      	nop			@ (mov r8, r8)

080020c0 <__aeabi_d2iz>:
 80020c0:	000b      	movs	r3, r1
 80020c2:	0002      	movs	r2, r0
 80020c4:	b570      	push	{r4, r5, r6, lr}
 80020c6:	4d16      	ldr	r5, [pc, #88]	@ (8002120 <__aeabi_d2iz+0x60>)
 80020c8:	030c      	lsls	r4, r1, #12
 80020ca:	b082      	sub	sp, #8
 80020cc:	0049      	lsls	r1, r1, #1
 80020ce:	2000      	movs	r0, #0
 80020d0:	9200      	str	r2, [sp, #0]
 80020d2:	9301      	str	r3, [sp, #4]
 80020d4:	0b24      	lsrs	r4, r4, #12
 80020d6:	0d49      	lsrs	r1, r1, #21
 80020d8:	0fde      	lsrs	r6, r3, #31
 80020da:	42a9      	cmp	r1, r5
 80020dc:	dd04      	ble.n	80020e8 <__aeabi_d2iz+0x28>
 80020de:	4811      	ldr	r0, [pc, #68]	@ (8002124 <__aeabi_d2iz+0x64>)
 80020e0:	4281      	cmp	r1, r0
 80020e2:	dd03      	ble.n	80020ec <__aeabi_d2iz+0x2c>
 80020e4:	4b10      	ldr	r3, [pc, #64]	@ (8002128 <__aeabi_d2iz+0x68>)
 80020e6:	18f0      	adds	r0, r6, r3
 80020e8:	b002      	add	sp, #8
 80020ea:	bd70      	pop	{r4, r5, r6, pc}
 80020ec:	2080      	movs	r0, #128	@ 0x80
 80020ee:	0340      	lsls	r0, r0, #13
 80020f0:	4320      	orrs	r0, r4
 80020f2:	4c0e      	ldr	r4, [pc, #56]	@ (800212c <__aeabi_d2iz+0x6c>)
 80020f4:	1a64      	subs	r4, r4, r1
 80020f6:	2c1f      	cmp	r4, #31
 80020f8:	dd08      	ble.n	800210c <__aeabi_d2iz+0x4c>
 80020fa:	4b0d      	ldr	r3, [pc, #52]	@ (8002130 <__aeabi_d2iz+0x70>)
 80020fc:	1a5b      	subs	r3, r3, r1
 80020fe:	40d8      	lsrs	r0, r3
 8002100:	0003      	movs	r3, r0
 8002102:	4258      	negs	r0, r3
 8002104:	2e00      	cmp	r6, #0
 8002106:	d1ef      	bne.n	80020e8 <__aeabi_d2iz+0x28>
 8002108:	0018      	movs	r0, r3
 800210a:	e7ed      	b.n	80020e8 <__aeabi_d2iz+0x28>
 800210c:	4b09      	ldr	r3, [pc, #36]	@ (8002134 <__aeabi_d2iz+0x74>)
 800210e:	9a00      	ldr	r2, [sp, #0]
 8002110:	469c      	mov	ip, r3
 8002112:	0003      	movs	r3, r0
 8002114:	4461      	add	r1, ip
 8002116:	408b      	lsls	r3, r1
 8002118:	40e2      	lsrs	r2, r4
 800211a:	4313      	orrs	r3, r2
 800211c:	e7f1      	b.n	8002102 <__aeabi_d2iz+0x42>
 800211e:	46c0      	nop			@ (mov r8, r8)
 8002120:	000003fe 	.word	0x000003fe
 8002124:	0000041d 	.word	0x0000041d
 8002128:	7fffffff 	.word	0x7fffffff
 800212c:	00000433 	.word	0x00000433
 8002130:	00000413 	.word	0x00000413
 8002134:	fffffbed 	.word	0xfffffbed

08002138 <__aeabi_i2d>:
 8002138:	b570      	push	{r4, r5, r6, lr}
 800213a:	2800      	cmp	r0, #0
 800213c:	d016      	beq.n	800216c <__aeabi_i2d+0x34>
 800213e:	17c3      	asrs	r3, r0, #31
 8002140:	18c5      	adds	r5, r0, r3
 8002142:	405d      	eors	r5, r3
 8002144:	0fc4      	lsrs	r4, r0, #31
 8002146:	0028      	movs	r0, r5
 8002148:	f000 f824 	bl	8002194 <__clzsi2>
 800214c:	4b10      	ldr	r3, [pc, #64]	@ (8002190 <__aeabi_i2d+0x58>)
 800214e:	1a1b      	subs	r3, r3, r0
 8002150:	055b      	lsls	r3, r3, #21
 8002152:	0d5b      	lsrs	r3, r3, #21
 8002154:	280a      	cmp	r0, #10
 8002156:	dc14      	bgt.n	8002182 <__aeabi_i2d+0x4a>
 8002158:	0002      	movs	r2, r0
 800215a:	002e      	movs	r6, r5
 800215c:	3215      	adds	r2, #21
 800215e:	4096      	lsls	r6, r2
 8002160:	220b      	movs	r2, #11
 8002162:	1a12      	subs	r2, r2, r0
 8002164:	40d5      	lsrs	r5, r2
 8002166:	032d      	lsls	r5, r5, #12
 8002168:	0b2d      	lsrs	r5, r5, #12
 800216a:	e003      	b.n	8002174 <__aeabi_i2d+0x3c>
 800216c:	2400      	movs	r4, #0
 800216e:	2300      	movs	r3, #0
 8002170:	2500      	movs	r5, #0
 8002172:	2600      	movs	r6, #0
 8002174:	051b      	lsls	r3, r3, #20
 8002176:	432b      	orrs	r3, r5
 8002178:	07e4      	lsls	r4, r4, #31
 800217a:	4323      	orrs	r3, r4
 800217c:	0030      	movs	r0, r6
 800217e:	0019      	movs	r1, r3
 8002180:	bd70      	pop	{r4, r5, r6, pc}
 8002182:	380b      	subs	r0, #11
 8002184:	4085      	lsls	r5, r0
 8002186:	032d      	lsls	r5, r5, #12
 8002188:	2600      	movs	r6, #0
 800218a:	0b2d      	lsrs	r5, r5, #12
 800218c:	e7f2      	b.n	8002174 <__aeabi_i2d+0x3c>
 800218e:	46c0      	nop			@ (mov r8, r8)
 8002190:	0000041e 	.word	0x0000041e

08002194 <__clzsi2>:
 8002194:	211c      	movs	r1, #28
 8002196:	2301      	movs	r3, #1
 8002198:	041b      	lsls	r3, r3, #16
 800219a:	4298      	cmp	r0, r3
 800219c:	d301      	bcc.n	80021a2 <__clzsi2+0xe>
 800219e:	0c00      	lsrs	r0, r0, #16
 80021a0:	3910      	subs	r1, #16
 80021a2:	0a1b      	lsrs	r3, r3, #8
 80021a4:	4298      	cmp	r0, r3
 80021a6:	d301      	bcc.n	80021ac <__clzsi2+0x18>
 80021a8:	0a00      	lsrs	r0, r0, #8
 80021aa:	3908      	subs	r1, #8
 80021ac:	091b      	lsrs	r3, r3, #4
 80021ae:	4298      	cmp	r0, r3
 80021b0:	d301      	bcc.n	80021b6 <__clzsi2+0x22>
 80021b2:	0900      	lsrs	r0, r0, #4
 80021b4:	3904      	subs	r1, #4
 80021b6:	a202      	add	r2, pc, #8	@ (adr r2, 80021c0 <__clzsi2+0x2c>)
 80021b8:	5c10      	ldrb	r0, [r2, r0]
 80021ba:	1840      	adds	r0, r0, r1
 80021bc:	4770      	bx	lr
 80021be:	46c0      	nop			@ (mov r8, r8)
 80021c0:	02020304 	.word	0x02020304
 80021c4:	01010101 	.word	0x01010101
	...

080021d0 <GenerateSineTable>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void GenerateSineTable()
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	b082      	sub	sp, #8
 80021d4:	af00      	add	r7, sp, #0
    for(int i = 0; i < TABLE_SIZE; i++)
 80021d6:	2300      	movs	r3, #0
 80021d8:	607b      	str	r3, [r7, #4]
 80021da:	e030      	b.n	800223e <GenerateSineTable+0x6e>
    {
        sine_table[i] = (uint8_t)((sin(2 * PI * i / TABLE_SIZE) + 1) * 127.5); // Scale to 0-255
 80021dc:	6878      	ldr	r0, [r7, #4]
 80021de:	f7ff ffab 	bl	8002138 <__aeabi_i2d>
 80021e2:	4a1b      	ldr	r2, [pc, #108]	@ (8002250 <GenerateSineTable+0x80>)
 80021e4:	4b1b      	ldr	r3, [pc, #108]	@ (8002254 <GenerateSineTable+0x84>)
 80021e6:	f7ff f907 	bl	80013f8 <__aeabi_dmul>
 80021ea:	0002      	movs	r2, r0
 80021ec:	000b      	movs	r3, r1
 80021ee:	0010      	movs	r0, r2
 80021f0:	0019      	movs	r1, r3
 80021f2:	2200      	movs	r2, #0
 80021f4:	4b18      	ldr	r3, [pc, #96]	@ (8002258 <GenerateSineTable+0x88>)
 80021f6:	f7fe fcbb 	bl	8000b70 <__aeabi_ddiv>
 80021fa:	0002      	movs	r2, r0
 80021fc:	000b      	movs	r3, r1
 80021fe:	0010      	movs	r0, r2
 8002200:	0019      	movs	r1, r3
 8002202:	f002 fb1d 	bl	8004840 <sin>
 8002206:	2200      	movs	r2, #0
 8002208:	4b14      	ldr	r3, [pc, #80]	@ (800225c <GenerateSineTable+0x8c>)
 800220a:	f7fe f94d 	bl	80004a8 <__aeabi_dadd>
 800220e:	0002      	movs	r2, r0
 8002210:	000b      	movs	r3, r1
 8002212:	0010      	movs	r0, r2
 8002214:	0019      	movs	r1, r3
 8002216:	2200      	movs	r2, #0
 8002218:	4b11      	ldr	r3, [pc, #68]	@ (8002260 <GenerateSineTable+0x90>)
 800221a:	f7ff f8ed 	bl	80013f8 <__aeabi_dmul>
 800221e:	0002      	movs	r2, r0
 8002220:	000b      	movs	r3, r1
 8002222:	0010      	movs	r0, r2
 8002224:	0019      	movs	r1, r3
 8002226:	f7fe f921 	bl	800046c <__aeabi_d2uiz>
 800222a:	0003      	movs	r3, r0
 800222c:	b2d9      	uxtb	r1, r3
 800222e:	4a0d      	ldr	r2, [pc, #52]	@ (8002264 <GenerateSineTable+0x94>)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	18d3      	adds	r3, r2, r3
 8002234:	1c0a      	adds	r2, r1, #0
 8002236:	701a      	strb	r2, [r3, #0]
    for(int i = 0; i < TABLE_SIZE; i++)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	3301      	adds	r3, #1
 800223c:	607b      	str	r3, [r7, #4]
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	2b13      	cmp	r3, #19
 8002242:	ddcb      	ble.n	80021dc <GenerateSineTable+0xc>
    }
}
 8002244:	46c0      	nop			@ (mov r8, r8)
 8002246:	46c0      	nop			@ (mov r8, r8)
 8002248:	46bd      	mov	sp, r7
 800224a:	b002      	add	sp, #8
 800224c:	bd80      	pop	{r7, pc}
 800224e:	46c0      	nop			@ (mov r8, r8)
 8002250:	53c8d4f1 	.word	0x53c8d4f1
 8002254:	401921fb 	.word	0x401921fb
 8002258:	40340000 	.word	0x40340000
 800225c:	3ff00000 	.word	0x3ff00000
 8002260:	405fe000 	.word	0x405fe000
 8002264:	20000140 	.word	0x20000140

08002268 <GenerateSquareTable>:

void GenerateSquareTable()
{
 8002268:	b580      	push	{r7, lr}
 800226a:	b082      	sub	sp, #8
 800226c:	af00      	add	r7, sp, #0
    for(int i = 0; i < TABLE_SIZE; i++)
 800226e:	2300      	movs	r3, #0
 8002270:	607b      	str	r3, [r7, #4]
 8002272:	e00d      	b.n	8002290 <GenerateSquareTable+0x28>
    {
        square_table[i] = (i < (TABLE_SIZE / 2)) ? 255 : 0;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	2b09      	cmp	r3, #9
 8002278:	dc01      	bgt.n	800227e <GenerateSquareTable+0x16>
 800227a:	21ff      	movs	r1, #255	@ 0xff
 800227c:	e000      	b.n	8002280 <GenerateSquareTable+0x18>
 800227e:	2100      	movs	r1, #0
 8002280:	4a07      	ldr	r2, [pc, #28]	@ (80022a0 <GenerateSquareTable+0x38>)
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	18d3      	adds	r3, r2, r3
 8002286:	1c0a      	adds	r2, r1, #0
 8002288:	701a      	strb	r2, [r3, #0]
    for(int i = 0; i < TABLE_SIZE; i++)
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	3301      	adds	r3, #1
 800228e:	607b      	str	r3, [r7, #4]
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	2b13      	cmp	r3, #19
 8002294:	ddee      	ble.n	8002274 <GenerateSquareTable+0xc>
    }
}
 8002296:	46c0      	nop			@ (mov r8, r8)
 8002298:	46c0      	nop			@ (mov r8, r8)
 800229a:	46bd      	mov	sp, r7
 800229c:	b002      	add	sp, #8
 800229e:	bd80      	pop	{r7, pc}
 80022a0:	20000154 	.word	0x20000154

080022a4 <GenerateTriangleTable>:

void GenerateTriangleTable()
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b082      	sub	sp, #8
 80022a8:	af00      	add	r7, sp, #0
    for(int i = 0; i <= TABLE_SIZE/2; i++)
 80022aa:	2300      	movs	r3, #0
 80022ac:	607b      	str	r3, [r7, #4]
 80022ae:	e00c      	b.n	80022ca <GenerateTriangleTable+0x26>
    {
        	triangle_table[i] = i * (255/TABLE_SIZE);    // Rising edge
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	b2db      	uxtb	r3, r3
 80022b4:	220c      	movs	r2, #12
 80022b6:	4353      	muls	r3, r2
 80022b8:	b2d9      	uxtb	r1, r3
 80022ba:	4a13      	ldr	r2, [pc, #76]	@ (8002308 <GenerateTriangleTable+0x64>)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	18d3      	adds	r3, r2, r3
 80022c0:	1c0a      	adds	r2, r1, #0
 80022c2:	701a      	strb	r2, [r3, #0]
    for(int i = 0; i <= TABLE_SIZE/2; i++)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	3301      	adds	r3, #1
 80022c8:	607b      	str	r3, [r7, #4]
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	2b0a      	cmp	r3, #10
 80022ce:	ddef      	ble.n	80022b0 <GenerateTriangleTable+0xc>
    }

    for(int i = TABLE_SIZE/2 + 1; i < TABLE_SIZE; i++)
 80022d0:	230b      	movs	r3, #11
 80022d2:	603b      	str	r3, [r7, #0]
 80022d4:	e010      	b.n	80022f8 <GenerateTriangleTable+0x54>
    {
    	triangle_table[i] = 255 - (i * (255/TABLE_SIZE));    	// Falling edge
 80022d6:	683b      	ldr	r3, [r7, #0]
 80022d8:	b2db      	uxtb	r3, r3
 80022da:	1c1a      	adds	r2, r3, #0
 80022dc:	009b      	lsls	r3, r3, #2
 80022de:	1ad3      	subs	r3, r2, r3
 80022e0:	009b      	lsls	r3, r3, #2
 80022e2:	b2db      	uxtb	r3, r3
 80022e4:	3b01      	subs	r3, #1
 80022e6:	b2d9      	uxtb	r1, r3
 80022e8:	4a07      	ldr	r2, [pc, #28]	@ (8002308 <GenerateTriangleTable+0x64>)
 80022ea:	683b      	ldr	r3, [r7, #0]
 80022ec:	18d3      	adds	r3, r2, r3
 80022ee:	1c0a      	adds	r2, r1, #0
 80022f0:	701a      	strb	r2, [r3, #0]
    for(int i = TABLE_SIZE/2 + 1; i < TABLE_SIZE; i++)
 80022f2:	683b      	ldr	r3, [r7, #0]
 80022f4:	3301      	adds	r3, #1
 80022f6:	603b      	str	r3, [r7, #0]
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	2b13      	cmp	r3, #19
 80022fc:	ddeb      	ble.n	80022d6 <GenerateTriangleTable+0x32>
    }
}
 80022fe:	46c0      	nop			@ (mov r8, r8)
 8002300:	46c0      	nop			@ (mov r8, r8)
 8002302:	46bd      	mov	sp, r7
 8002304:	b002      	add	sp, #8
 8002306:	bd80      	pop	{r7, pc}
 8002308:	20000168 	.word	0x20000168

0800230c <CycleWaveform>:

void CycleWaveform()
{
 800230c:	b580      	push	{r7, lr}
 800230e:	af00      	add	r7, sp, #0
    current_waveform = (current_waveform + 1) % WAVEFORM_COUNT;
 8002310:	4b07      	ldr	r3, [pc, #28]	@ (8002330 <CycleWaveform+0x24>)
 8002312:	781b      	ldrb	r3, [r3, #0]
 8002314:	b2db      	uxtb	r3, r3
 8002316:	3301      	adds	r3, #1
 8002318:	2103      	movs	r1, #3
 800231a:	0018      	movs	r0, r3
 800231c:	f7fe f862 	bl	80003e4 <__aeabi_idivmod>
 8002320:	000b      	movs	r3, r1
 8002322:	b2da      	uxtb	r2, r3
 8002324:	4b02      	ldr	r3, [pc, #8]	@ (8002330 <CycleWaveform+0x24>)
 8002326:	701a      	strb	r2, [r3, #0]
}
 8002328:	46c0      	nop			@ (mov r8, r8)
 800232a:	46bd      	mov	sp, r7
 800232c:	bd80      	pop	{r7, pc}
 800232e:	46c0      	nop			@ (mov r8, r8)
 8002330:	2000017c 	.word	0x2000017c

08002334 <DAC_SetValue>:

void DAC_SetValue(uint8_t value)
{
 8002334:	b590      	push	{r4, r7, lr}
 8002336:	b085      	sub	sp, #20
 8002338:	af00      	add	r7, sp, #0
 800233a:	0002      	movs	r2, r0
 800233c:	1dfb      	adds	r3, r7, #7
 800233e:	701a      	strb	r2, [r3, #0]
    uint16_t data = 0;
 8002340:	240e      	movs	r4, #14
 8002342:	193b      	adds	r3, r7, r4
 8002344:	2200      	movs	r2, #0
 8002346:	801a      	strh	r2, [r3, #0]

    data |= MCP4901_BUFFER;
 8002348:	193b      	adds	r3, r7, r4
 800234a:	881b      	ldrh	r3, [r3, #0]
 800234c:	2280      	movs	r2, #128	@ 0x80
 800234e:	01d2      	lsls	r2, r2, #7
 8002350:	4313      	orrs	r3, r2
 8002352:	b29a      	uxth	r2, r3
 8002354:	193b      	adds	r3, r7, r4
 8002356:	801a      	strh	r2, [r3, #0]
    data |= MCP4901_GAIN2X;
 8002358:	193b      	adds	r3, r7, r4
 800235a:	881b      	ldrh	r3, [r3, #0]
 800235c:	2280      	movs	r2, #128	@ 0x80
 800235e:	0192      	lsls	r2, r2, #6
 8002360:	4313      	orrs	r3, r2
 8002362:	b29a      	uxth	r2, r3
 8002364:	193b      	adds	r3, r7, r4
 8002366:	801a      	strh	r2, [r3, #0]
    data |= MCP4901_ACTIVE;
 8002368:	193b      	adds	r3, r7, r4
 800236a:	881b      	ldrh	r3, [r3, #0]
 800236c:	2280      	movs	r2, #128	@ 0x80
 800236e:	0152      	lsls	r2, r2, #5
 8002370:	4313      	orrs	r3, r2
 8002372:	b29a      	uxth	r2, r3
 8002374:	193b      	adds	r3, r7, r4
 8002376:	801a      	strh	r2, [r3, #0]
    data |= (value << 4); // Place the 8-bit data in bits 11-4
 8002378:	1dfb      	adds	r3, r7, #7
 800237a:	781b      	ldrb	r3, [r3, #0]
 800237c:	011b      	lsls	r3, r3, #4
 800237e:	b21a      	sxth	r2, r3
 8002380:	193b      	adds	r3, r7, r4
 8002382:	881b      	ldrh	r3, [r3, #0]
 8002384:	b21b      	sxth	r3, r3
 8002386:	4313      	orrs	r3, r2
 8002388:	b21b      	sxth	r3, r3
 800238a:	b29a      	uxth	r2, r3
 800238c:	193b      	adds	r3, r7, r4
 800238e:	801a      	strh	r2, [r3, #0]

    // Drive the CS pin low (active low)
    HAL_GPIO_WritePin(LDAC_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
 8002390:	2380      	movs	r3, #128	@ 0x80
 8002392:	009b      	lsls	r3, r3, #2
 8002394:	4811      	ldr	r0, [pc, #68]	@ (80023dc <DAC_SetValue+0xa8>)
 8002396:	2200      	movs	r2, #0
 8002398:	0019      	movs	r1, r3
 800239a:	f000 fee9 	bl	8003170 <HAL_GPIO_WritePin>

    // Transmit data over SPI
    HAL_SPI_Transmit(&hspi1, (uint8_t*)&data, 1, HAL_MAX_DELAY);
 800239e:	2301      	movs	r3, #1
 80023a0:	425b      	negs	r3, r3
 80023a2:	1939      	adds	r1, r7, r4
 80023a4:	480e      	ldr	r0, [pc, #56]	@ (80023e0 <DAC_SetValue+0xac>)
 80023a6:	2201      	movs	r2, #1
 80023a8:	f001 fcd0 	bl	8003d4c <HAL_SPI_Transmit>

    // Then raise CS (causes the data to be latched into the DAC's input register)
    HAL_GPIO_WritePin(LDAC_GPIO_Port, CS_Pin, GPIO_PIN_SET);
 80023ac:	2380      	movs	r3, #128	@ 0x80
 80023ae:	009b      	lsls	r3, r3, #2
 80023b0:	480a      	ldr	r0, [pc, #40]	@ (80023dc <DAC_SetValue+0xa8>)
 80023b2:	2201      	movs	r2, #1
 80023b4:	0019      	movs	r1, r3
 80023b6:	f000 fedb 	bl	8003170 <HAL_GPIO_WritePin>

    // Activate LDAC (active low, the content of the DAC's input register is transferred into the output register,
    // and V_out is updated)
    HAL_GPIO_WritePin(LDAC_GPIO_Port, LDAC_Pin, GPIO_PIN_RESET);
 80023ba:	4b08      	ldr	r3, [pc, #32]	@ (80023dc <DAC_SetValue+0xa8>)
 80023bc:	2200      	movs	r2, #0
 80023be:	2110      	movs	r1, #16
 80023c0:	0018      	movs	r0, r3
 80023c2:	f000 fed5 	bl	8003170 <HAL_GPIO_WritePin>

    // Deactivate LDAC
    HAL_GPIO_WritePin(LDAC_GPIO_Port, LDAC_Pin, GPIO_PIN_SET);
 80023c6:	4b05      	ldr	r3, [pc, #20]	@ (80023dc <DAC_SetValue+0xa8>)
 80023c8:	2201      	movs	r2, #1
 80023ca:	2110      	movs	r1, #16
 80023cc:	0018      	movs	r0, r3
 80023ce:	f000 fecf 	bl	8003170 <HAL_GPIO_WritePin>
}
 80023d2:	46c0      	nop			@ (mov r8, r8)
 80023d4:	46bd      	mov	sp, r7
 80023d6:	b005      	add	sp, #20
 80023d8:	bd90      	pop	{r4, r7, pc}
 80023da:	46c0      	nop			@ (mov r8, r8)
 80023dc:	50000400 	.word	0x50000400
 80023e0:	20000028 	.word	0x20000028

080023e4 <POT_SetValue>:

void POT_SetValue(uint8_t value)
{
 80023e4:	b590      	push	{r4, r7, lr}
 80023e6:	b085      	sub	sp, #20
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	0002      	movs	r2, r0
 80023ec:	1dfb      	adds	r3, r7, #7
 80023ee:	701a      	strb	r2, [r3, #0]
	if(value > 128)
 80023f0:	1dfb      	adds	r3, r7, #7
 80023f2:	781b      	ldrb	r3, [r3, #0]
 80023f4:	2b80      	cmp	r3, #128	@ 0x80
 80023f6:	d902      	bls.n	80023fe <POT_SetValue+0x1a>
	{
		value = 128;
 80023f8:	1dfb      	adds	r3, r7, #7
 80023fa:	2280      	movs	r2, #128	@ 0x80
 80023fc:	701a      	strb	r2, [r3, #0]
	}

	uint16_t data = 0;
 80023fe:	210e      	movs	r1, #14
 8002400:	187b      	adds	r3, r7, r1
 8002402:	2200      	movs	r2, #0
 8002404:	801a      	strh	r2, [r3, #0]

	data |= value;
 8002406:	1dfb      	adds	r3, r7, #7
 8002408:	781b      	ldrb	r3, [r3, #0]
 800240a:	b29a      	uxth	r2, r3
 800240c:	187b      	adds	r3, r7, r1
 800240e:	881b      	ldrh	r3, [r3, #0]
 8002410:	4313      	orrs	r3, r2
 8002412:	b29a      	uxth	r2, r3
 8002414:	000c      	movs	r4, r1
 8002416:	187b      	adds	r3, r7, r1
 8002418:	801a      	strh	r2, [r3, #0]

	// Enable (NCS low)
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_2,GPIO_PIN_RESET);
 800241a:	4b0b      	ldr	r3, [pc, #44]	@ (8002448 <POT_SetValue+0x64>)
 800241c:	2200      	movs	r2, #0
 800241e:	2104      	movs	r1, #4
 8002420:	0018      	movs	r0, r3
 8002422:	f000 fea5 	bl	8003170 <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(&hspi2, (uint8_t*)&data, 1, HAL_MAX_DELAY);
 8002426:	2301      	movs	r3, #1
 8002428:	425b      	negs	r3, r3
 800242a:	1939      	adds	r1, r7, r4
 800242c:	4807      	ldr	r0, [pc, #28]	@ (800244c <POT_SetValue+0x68>)
 800242e:	2201      	movs	r2, #1
 8002430:	f001 fc8c 	bl	8003d4c <HAL_SPI_Transmit>

	// Disable (NCS high)
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_2,GPIO_PIN_SET);
 8002434:	4b04      	ldr	r3, [pc, #16]	@ (8002448 <POT_SetValue+0x64>)
 8002436:	2201      	movs	r2, #1
 8002438:	2104      	movs	r1, #4
 800243a:	0018      	movs	r0, r3
 800243c:	f000 fe98 	bl	8003170 <HAL_GPIO_WritePin>
}
 8002440:	46c0      	nop			@ (mov r8, r8)
 8002442:	46bd      	mov	sp, r7
 8002444:	b005      	add	sp, #20
 8002446:	bd90      	pop	{r4, r7, pc}
 8002448:	50000400 	.word	0x50000400
 800244c:	2000008c 	.word	0x2000008c

08002450 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002450:	b580      	push	{r7, lr}
 8002452:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002454:	f000 fba0 	bl	8002b98 <HAL_Init>

  /* USER CODE BEGIN Init */
  HAL_GPIO_WritePin(LDAC_GPIO_Port, LDAC_Pin, GPIO_PIN_SET);
 8002458:	4b18      	ldr	r3, [pc, #96]	@ (80024bc <main+0x6c>)
 800245a:	2201      	movs	r2, #1
 800245c:	2110      	movs	r1, #16
 800245e:	0018      	movs	r0, r3
 8002460:	f000 fe86 	bl	8003170 <HAL_GPIO_WritePin>
  GenerateSineTable();
 8002464:	f7ff feb4 	bl	80021d0 <GenerateSineTable>
  GenerateSquareTable();
 8002468:	f7ff fefe 	bl	8002268 <GenerateSquareTable>
  GenerateTriangleTable();
 800246c:	f7ff ff1a 	bl	80022a4 <GenerateTriangleTable>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002470:	f000 f82a 	bl	80024c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002474:	f000 f928 	bl	80026c8 <MX_GPIO_Init>
  MX_SPI1_Init();
 8002478:	f000 f886 	bl	8002588 <MX_SPI1_Init>
  MX_TIM14_Init();
 800247c:	f000 f900 	bl	8002680 <MX_TIM14_Init>
  MX_SPI2_Init();
 8002480:	f000 f8c0 	bl	8002604 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim14);
 8002484:	4b0e      	ldr	r3, [pc, #56]	@ (80024c0 <main+0x70>)
 8002486:	0018      	movs	r0, r3
 8002488:	f001 ff8e 	bl	80043a8 <HAL_TIM_Base_Start_IT>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	POT_SetValue(pot_index);
 800248c:	4b0d      	ldr	r3, [pc, #52]	@ (80024c4 <main+0x74>)
 800248e:	781b      	ldrb	r3, [r3, #0]
 8002490:	0018      	movs	r0, r3
 8002492:	f7ff ffa7 	bl	80023e4 <POT_SetValue>

	HAL_Delay(100);
 8002496:	2064      	movs	r0, #100	@ 0x64
 8002498:	f000 fc04 	bl	8002ca4 <HAL_Delay>

	if(pot_index < 128)
 800249c:	4b09      	ldr	r3, [pc, #36]	@ (80024c4 <main+0x74>)
 800249e:	781b      	ldrb	r3, [r3, #0]
 80024a0:	b25b      	sxtb	r3, r3
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	db06      	blt.n	80024b4 <main+0x64>
		pot_index++;
 80024a6:	4b07      	ldr	r3, [pc, #28]	@ (80024c4 <main+0x74>)
 80024a8:	781b      	ldrb	r3, [r3, #0]
 80024aa:	3301      	adds	r3, #1
 80024ac:	b2da      	uxtb	r2, r3
 80024ae:	4b05      	ldr	r3, [pc, #20]	@ (80024c4 <main+0x74>)
 80024b0:	701a      	strb	r2, [r3, #0]
 80024b2:	e7eb      	b.n	800248c <main+0x3c>
	else
		pot_index = 0;
 80024b4:	4b03      	ldr	r3, [pc, #12]	@ (80024c4 <main+0x74>)
 80024b6:	2200      	movs	r2, #0
 80024b8:	701a      	strb	r2, [r3, #0]
	POT_SetValue(pot_index);
 80024ba:	e7e7      	b.n	800248c <main+0x3c>
 80024bc:	50000400 	.word	0x50000400
 80024c0:	200000f0 	.word	0x200000f0
 80024c4:	2000013c 	.word	0x2000013c

080024c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80024c8:	b590      	push	{r4, r7, lr}
 80024ca:	b093      	sub	sp, #76	@ 0x4c
 80024cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80024ce:	2410      	movs	r4, #16
 80024d0:	193b      	adds	r3, r7, r4
 80024d2:	0018      	movs	r0, r3
 80024d4:	2338      	movs	r3, #56	@ 0x38
 80024d6:	001a      	movs	r2, r3
 80024d8:	2100      	movs	r1, #0
 80024da:	f002 f985 	bl	80047e8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80024de:	003b      	movs	r3, r7
 80024e0:	0018      	movs	r0, r3
 80024e2:	2310      	movs	r3, #16
 80024e4:	001a      	movs	r2, r3
 80024e6:	2100      	movs	r1, #0
 80024e8:	f002 f97e 	bl	80047e8 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80024ec:	2380      	movs	r3, #128	@ 0x80
 80024ee:	009b      	lsls	r3, r3, #2
 80024f0:	0018      	movs	r0, r3
 80024f2:	f000 fe8f 	bl	8003214 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80024f6:	193b      	adds	r3, r7, r4
 80024f8:	2202      	movs	r2, #2
 80024fa:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80024fc:	193b      	adds	r3, r7, r4
 80024fe:	2280      	movs	r2, #128	@ 0x80
 8002500:	0052      	lsls	r2, r2, #1
 8002502:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8002504:	0021      	movs	r1, r4
 8002506:	187b      	adds	r3, r7, r1
 8002508:	2200      	movs	r2, #0
 800250a:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800250c:	187b      	adds	r3, r7, r1
 800250e:	2240      	movs	r2, #64	@ 0x40
 8002510:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002512:	187b      	adds	r3, r7, r1
 8002514:	2202      	movs	r2, #2
 8002516:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002518:	187b      	adds	r3, r7, r1
 800251a:	2202      	movs	r2, #2
 800251c:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 800251e:	187b      	adds	r3, r7, r1
 8002520:	2200      	movs	r2, #0
 8002522:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLN = 8;
 8002524:	187b      	adds	r3, r7, r1
 8002526:	2208      	movs	r2, #8
 8002528:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800252a:	187b      	adds	r3, r7, r1
 800252c:	2280      	movs	r2, #128	@ 0x80
 800252e:	0292      	lsls	r2, r2, #10
 8002530:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8002532:	187b      	adds	r3, r7, r1
 8002534:	2280      	movs	r2, #128	@ 0x80
 8002536:	0492      	lsls	r2, r2, #18
 8002538:	631a      	str	r2, [r3, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800253a:	187b      	adds	r3, r7, r1
 800253c:	2280      	movs	r2, #128	@ 0x80
 800253e:	0592      	lsls	r2, r2, #22
 8002540:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002542:	187b      	adds	r3, r7, r1
 8002544:	0018      	movs	r0, r3
 8002546:	f000 fea5 	bl	8003294 <HAL_RCC_OscConfig>
 800254a:	1e03      	subs	r3, r0, #0
 800254c:	d001      	beq.n	8002552 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 800254e:	f000 f961 	bl	8002814 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002552:	003b      	movs	r3, r7
 8002554:	2207      	movs	r2, #7
 8002556:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002558:	003b      	movs	r3, r7
 800255a:	2202      	movs	r2, #2
 800255c:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800255e:	003b      	movs	r3, r7
 8002560:	2200      	movs	r2, #0
 8002562:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002564:	003b      	movs	r3, r7
 8002566:	2280      	movs	r2, #128	@ 0x80
 8002568:	01d2      	lsls	r2, r2, #7
 800256a:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800256c:	003b      	movs	r3, r7
 800256e:	2102      	movs	r1, #2
 8002570:	0018      	movs	r0, r3
 8002572:	f001 f9a9 	bl	80038c8 <HAL_RCC_ClockConfig>
 8002576:	1e03      	subs	r3, r0, #0
 8002578:	d001      	beq.n	800257e <SystemClock_Config+0xb6>
  {
    Error_Handler();
 800257a:	f000 f94b 	bl	8002814 <Error_Handler>
  }
}
 800257e:	46c0      	nop			@ (mov r8, r8)
 8002580:	46bd      	mov	sp, r7
 8002582:	b013      	add	sp, #76	@ 0x4c
 8002584:	bd90      	pop	{r4, r7, pc}
	...

08002588 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002588:	b580      	push	{r7, lr}
 800258a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800258c:	4b1b      	ldr	r3, [pc, #108]	@ (80025fc <MX_SPI1_Init+0x74>)
 800258e:	4a1c      	ldr	r2, [pc, #112]	@ (8002600 <MX_SPI1_Init+0x78>)
 8002590:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002592:	4b1a      	ldr	r3, [pc, #104]	@ (80025fc <MX_SPI1_Init+0x74>)
 8002594:	2282      	movs	r2, #130	@ 0x82
 8002596:	0052      	lsls	r2, r2, #1
 8002598:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800259a:	4b18      	ldr	r3, [pc, #96]	@ (80025fc <MX_SPI1_Init+0x74>)
 800259c:	2200      	movs	r2, #0
 800259e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 80025a0:	4b16      	ldr	r3, [pc, #88]	@ (80025fc <MX_SPI1_Init+0x74>)
 80025a2:	22f0      	movs	r2, #240	@ 0xf0
 80025a4:	0112      	lsls	r2, r2, #4
 80025a6:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80025a8:	4b14      	ldr	r3, [pc, #80]	@ (80025fc <MX_SPI1_Init+0x74>)
 80025aa:	2200      	movs	r2, #0
 80025ac:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80025ae:	4b13      	ldr	r3, [pc, #76]	@ (80025fc <MX_SPI1_Init+0x74>)
 80025b0:	2200      	movs	r2, #0
 80025b2:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80025b4:	4b11      	ldr	r3, [pc, #68]	@ (80025fc <MX_SPI1_Init+0x74>)
 80025b6:	2280      	movs	r2, #128	@ 0x80
 80025b8:	0092      	lsls	r2, r2, #2
 80025ba:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80025bc:	4b0f      	ldr	r3, [pc, #60]	@ (80025fc <MX_SPI1_Init+0x74>)
 80025be:	2218      	movs	r2, #24
 80025c0:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80025c2:	4b0e      	ldr	r3, [pc, #56]	@ (80025fc <MX_SPI1_Init+0x74>)
 80025c4:	2200      	movs	r2, #0
 80025c6:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80025c8:	4b0c      	ldr	r3, [pc, #48]	@ (80025fc <MX_SPI1_Init+0x74>)
 80025ca:	2200      	movs	r2, #0
 80025cc:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80025ce:	4b0b      	ldr	r3, [pc, #44]	@ (80025fc <MX_SPI1_Init+0x74>)
 80025d0:	2200      	movs	r2, #0
 80025d2:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 80025d4:	4b09      	ldr	r3, [pc, #36]	@ (80025fc <MX_SPI1_Init+0x74>)
 80025d6:	2207      	movs	r2, #7
 80025d8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80025da:	4b08      	ldr	r3, [pc, #32]	@ (80025fc <MX_SPI1_Init+0x74>)
 80025dc:	2200      	movs	r2, #0
 80025de:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80025e0:	4b06      	ldr	r3, [pc, #24]	@ (80025fc <MX_SPI1_Init+0x74>)
 80025e2:	2208      	movs	r2, #8
 80025e4:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80025e6:	4b05      	ldr	r3, [pc, #20]	@ (80025fc <MX_SPI1_Init+0x74>)
 80025e8:	0018      	movs	r0, r3
 80025ea:	f001 faf7 	bl	8003bdc <HAL_SPI_Init>
 80025ee:	1e03      	subs	r3, r0, #0
 80025f0:	d001      	beq.n	80025f6 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80025f2:	f000 f90f 	bl	8002814 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80025f6:	46c0      	nop			@ (mov r8, r8)
 80025f8:	46bd      	mov	sp, r7
 80025fa:	bd80      	pop	{r7, pc}
 80025fc:	20000028 	.word	0x20000028
 8002600:	40013000 	.word	0x40013000

08002604 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8002604:	b580      	push	{r7, lr}
 8002606:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8002608:	4b1b      	ldr	r3, [pc, #108]	@ (8002678 <MX_SPI2_Init+0x74>)
 800260a:	4a1c      	ldr	r2, [pc, #112]	@ (800267c <MX_SPI2_Init+0x78>)
 800260c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800260e:	4b1a      	ldr	r3, [pc, #104]	@ (8002678 <MX_SPI2_Init+0x74>)
 8002610:	2282      	movs	r2, #130	@ 0x82
 8002612:	0052      	lsls	r2, r2, #1
 8002614:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8002616:	4b18      	ldr	r3, [pc, #96]	@ (8002678 <MX_SPI2_Init+0x74>)
 8002618:	2200      	movs	r2, #0
 800261a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 800261c:	4b16      	ldr	r3, [pc, #88]	@ (8002678 <MX_SPI2_Init+0x74>)
 800261e:	22f0      	movs	r2, #240	@ 0xf0
 8002620:	0112      	lsls	r2, r2, #4
 8002622:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002624:	4b14      	ldr	r3, [pc, #80]	@ (8002678 <MX_SPI2_Init+0x74>)
 8002626:	2200      	movs	r2, #0
 8002628:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800262a:	4b13      	ldr	r3, [pc, #76]	@ (8002678 <MX_SPI2_Init+0x74>)
 800262c:	2200      	movs	r2, #0
 800262e:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8002630:	4b11      	ldr	r3, [pc, #68]	@ (8002678 <MX_SPI2_Init+0x74>)
 8002632:	2280      	movs	r2, #128	@ 0x80
 8002634:	0092      	lsls	r2, r2, #2
 8002636:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8002638:	4b0f      	ldr	r3, [pc, #60]	@ (8002678 <MX_SPI2_Init+0x74>)
 800263a:	2228      	movs	r2, #40	@ 0x28
 800263c:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800263e:	4b0e      	ldr	r3, [pc, #56]	@ (8002678 <MX_SPI2_Init+0x74>)
 8002640:	2200      	movs	r2, #0
 8002642:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002644:	4b0c      	ldr	r3, [pc, #48]	@ (8002678 <MX_SPI2_Init+0x74>)
 8002646:	2200      	movs	r2, #0
 8002648:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800264a:	4b0b      	ldr	r3, [pc, #44]	@ (8002678 <MX_SPI2_Init+0x74>)
 800264c:	2200      	movs	r2, #0
 800264e:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 8002650:	4b09      	ldr	r3, [pc, #36]	@ (8002678 <MX_SPI2_Init+0x74>)
 8002652:	2207      	movs	r2, #7
 8002654:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002656:	4b08      	ldr	r3, [pc, #32]	@ (8002678 <MX_SPI2_Init+0x74>)
 8002658:	2200      	movs	r2, #0
 800265a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800265c:	4b06      	ldr	r3, [pc, #24]	@ (8002678 <MX_SPI2_Init+0x74>)
 800265e:	2208      	movs	r2, #8
 8002660:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002662:	4b05      	ldr	r3, [pc, #20]	@ (8002678 <MX_SPI2_Init+0x74>)
 8002664:	0018      	movs	r0, r3
 8002666:	f001 fab9 	bl	8003bdc <HAL_SPI_Init>
 800266a:	1e03      	subs	r3, r0, #0
 800266c:	d001      	beq.n	8002672 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 800266e:	f000 f8d1 	bl	8002814 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8002672:	46c0      	nop			@ (mov r8, r8)
 8002674:	46bd      	mov	sp, r7
 8002676:	bd80      	pop	{r7, pc}
 8002678:	2000008c 	.word	0x2000008c
 800267c:	40003800 	.word	0x40003800

08002680 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 8002680:	b580      	push	{r7, lr}
 8002682:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8002684:	4b0e      	ldr	r3, [pc, #56]	@ (80026c0 <MX_TIM14_Init+0x40>)
 8002686:	4a0f      	ldr	r2, [pc, #60]	@ (80026c4 <MX_TIM14_Init+0x44>)
 8002688:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 8;
 800268a:	4b0d      	ldr	r3, [pc, #52]	@ (80026c0 <MX_TIM14_Init+0x40>)
 800268c:	2208      	movs	r2, #8
 800268e:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002690:	4b0b      	ldr	r3, [pc, #44]	@ (80026c0 <MX_TIM14_Init+0x40>)
 8002692:	2200      	movs	r2, #0
 8002694:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 200;
 8002696:	4b0a      	ldr	r3, [pc, #40]	@ (80026c0 <MX_TIM14_Init+0x40>)
 8002698:	22c8      	movs	r2, #200	@ 0xc8
 800269a:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800269c:	4b08      	ldr	r3, [pc, #32]	@ (80026c0 <MX_TIM14_Init+0x40>)
 800269e:	2200      	movs	r2, #0
 80026a0:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80026a2:	4b07      	ldr	r3, [pc, #28]	@ (80026c0 <MX_TIM14_Init+0x40>)
 80026a4:	2200      	movs	r2, #0
 80026a6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 80026a8:	4b05      	ldr	r3, [pc, #20]	@ (80026c0 <MX_TIM14_Init+0x40>)
 80026aa:	0018      	movs	r0, r3
 80026ac:	f001 fe24 	bl	80042f8 <HAL_TIM_Base_Init>
 80026b0:	1e03      	subs	r3, r0, #0
 80026b2:	d001      	beq.n	80026b8 <MX_TIM14_Init+0x38>
  {
    Error_Handler();
 80026b4:	f000 f8ae 	bl	8002814 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 80026b8:	46c0      	nop			@ (mov r8, r8)
 80026ba:	46bd      	mov	sp, r7
 80026bc:	bd80      	pop	{r7, pc}
 80026be:	46c0      	nop			@ (mov r8, r8)
 80026c0:	200000f0 	.word	0x200000f0
 80026c4:	40002000 	.word	0x40002000

080026c8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80026c8:	b590      	push	{r4, r7, lr}
 80026ca:	b089      	sub	sp, #36	@ 0x24
 80026cc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026ce:	240c      	movs	r4, #12
 80026d0:	193b      	adds	r3, r7, r4
 80026d2:	0018      	movs	r0, r3
 80026d4:	2314      	movs	r3, #20
 80026d6:	001a      	movs	r2, r3
 80026d8:	2100      	movs	r1, #0
 80026da:	f002 f885 	bl	80047e8 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80026de:	4b33      	ldr	r3, [pc, #204]	@ (80027ac <MX_GPIO_Init+0xe4>)
 80026e0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80026e2:	4b32      	ldr	r3, [pc, #200]	@ (80027ac <MX_GPIO_Init+0xe4>)
 80026e4:	2102      	movs	r1, #2
 80026e6:	430a      	orrs	r2, r1
 80026e8:	635a      	str	r2, [r3, #52]	@ 0x34
 80026ea:	4b30      	ldr	r3, [pc, #192]	@ (80027ac <MX_GPIO_Init+0xe4>)
 80026ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80026ee:	2202      	movs	r2, #2
 80026f0:	4013      	ands	r3, r2
 80026f2:	60bb      	str	r3, [r7, #8]
 80026f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80026f6:	4b2d      	ldr	r3, [pc, #180]	@ (80027ac <MX_GPIO_Init+0xe4>)
 80026f8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80026fa:	4b2c      	ldr	r3, [pc, #176]	@ (80027ac <MX_GPIO_Init+0xe4>)
 80026fc:	2101      	movs	r1, #1
 80026fe:	430a      	orrs	r2, r1
 8002700:	635a      	str	r2, [r3, #52]	@ 0x34
 8002702:	4b2a      	ldr	r3, [pc, #168]	@ (80027ac <MX_GPIO_Init+0xe4>)
 8002704:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002706:	2201      	movs	r2, #1
 8002708:	4013      	ands	r3, r2
 800270a:	607b      	str	r3, [r7, #4]
 800270c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, CS_Pin|GPIO_PIN_2|GPIO_PIN_3|LDAC_Pin, GPIO_PIN_RESET);
 800270e:	2387      	movs	r3, #135	@ 0x87
 8002710:	009b      	lsls	r3, r3, #2
 8002712:	4827      	ldr	r0, [pc, #156]	@ (80027b0 <MX_GPIO_Init+0xe8>)
 8002714:	2200      	movs	r2, #0
 8002716:	0019      	movs	r1, r3
 8002718:	f000 fd2a 	bl	8003170 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : CS_Pin PB2 PB3 LDAC_Pin */
  GPIO_InitStruct.Pin = CS_Pin|GPIO_PIN_2|GPIO_PIN_3|LDAC_Pin;
 800271c:	193b      	adds	r3, r7, r4
 800271e:	2287      	movs	r2, #135	@ 0x87
 8002720:	0092      	lsls	r2, r2, #2
 8002722:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002724:	193b      	adds	r3, r7, r4
 8002726:	2201      	movs	r2, #1
 8002728:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800272a:	193b      	adds	r3, r7, r4
 800272c:	2200      	movs	r2, #0
 800272e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002730:	193b      	adds	r3, r7, r4
 8002732:	2200      	movs	r2, #0
 8002734:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002736:	193b      	adds	r3, r7, r4
 8002738:	4a1d      	ldr	r2, [pc, #116]	@ (80027b0 <MX_GPIO_Init+0xe8>)
 800273a:	0019      	movs	r1, r3
 800273c:	0010      	movs	r0, r2
 800273e:	f000 fbb3 	bl	8002ea8 <HAL_GPIO_Init>

  /*Configure GPIO pins : T_VCP_TX_Pin T_VCP_RX_Pin */
  GPIO_InitStruct.Pin = T_VCP_TX_Pin|T_VCP_RX_Pin;
 8002742:	193b      	adds	r3, r7, r4
 8002744:	220c      	movs	r2, #12
 8002746:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002748:	193b      	adds	r3, r7, r4
 800274a:	2202      	movs	r2, #2
 800274c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800274e:	193b      	adds	r3, r7, r4
 8002750:	2201      	movs	r2, #1
 8002752:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002754:	193b      	adds	r3, r7, r4
 8002756:	2200      	movs	r2, #0
 8002758:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 800275a:	193b      	adds	r3, r7, r4
 800275c:	2201      	movs	r2, #1
 800275e:	611a      	str	r2, [r3, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002760:	193a      	adds	r2, r7, r4
 8002762:	23a0      	movs	r3, #160	@ 0xa0
 8002764:	05db      	lsls	r3, r3, #23
 8002766:	0011      	movs	r1, r2
 8002768:	0018      	movs	r0, r3
 800276a:	f000 fb9d 	bl	8002ea8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA6 PA7 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_12;
 800276e:	0021      	movs	r1, r4
 8002770:	187b      	adds	r3, r7, r1
 8002772:	2286      	movs	r2, #134	@ 0x86
 8002774:	0152      	lsls	r2, r2, #5
 8002776:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002778:	187b      	adds	r3, r7, r1
 800277a:	2284      	movs	r2, #132	@ 0x84
 800277c:	0392      	lsls	r2, r2, #14
 800277e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002780:	187b      	adds	r3, r7, r1
 8002782:	2202      	movs	r2, #2
 8002784:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002786:	187a      	adds	r2, r7, r1
 8002788:	23a0      	movs	r3, #160	@ 0xa0
 800278a:	05db      	lsls	r3, r3, #23
 800278c:	0011      	movs	r1, r2
 800278e:	0018      	movs	r0, r3
 8002790:	f000 fb8a 	bl	8002ea8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 8002794:	2200      	movs	r2, #0
 8002796:	2100      	movs	r1, #0
 8002798:	2007      	movs	r0, #7
 800279a:	f000 fb53 	bl	8002e44 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 800279e:	2007      	movs	r0, #7
 80027a0:	f000 fb65 	bl	8002e6e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80027a4:	46c0      	nop			@ (mov r8, r8)
 80027a6:	46bd      	mov	sp, r7
 80027a8:	b009      	add	sp, #36	@ 0x24
 80027aa:	bd90      	pop	{r4, r7, pc}
 80027ac:	40021000 	.word	0x40021000
 80027b0:	50000400 	.word	0x50000400

080027b4 <HAL_GPIO_EXTI_Falling_Callback>:

/* USER CODE BEGIN 4 */
//Interrupt for increasing frequency when user push a button. Do exactly the same thing for decreasing it.
void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	b082      	sub	sp, #8
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	0002      	movs	r2, r0
 80027bc:	1dbb      	adds	r3, r7, #6
 80027be:	801a      	strh	r2, [r3, #0]
	if(GPIO_Pin == GPIO_PIN_6)
 80027c0:	1dbb      	adds	r3, r7, #6
 80027c2:	881b      	ldrh	r3, [r3, #0]
 80027c4:	2b40      	cmp	r3, #64	@ 0x40
 80027c6:	d10a      	bne.n	80027de <HAL_GPIO_EXTI_Falling_Callback+0x2a>
	{
		if(TIM14 -> ARR < 2000)
 80027c8:	4b11      	ldr	r3, [pc, #68]	@ (8002810 <HAL_GPIO_EXTI_Falling_Callback+0x5c>)
 80027ca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80027cc:	23fa      	movs	r3, #250	@ 0xfa
 80027ce:	00db      	lsls	r3, r3, #3
 80027d0:	429a      	cmp	r2, r3
 80027d2:	d204      	bcs.n	80027de <HAL_GPIO_EXTI_Falling_Callback+0x2a>
			TIM14 -> ARR += 200; //adjustable, one idea is to divide the frequency band in n slices.
 80027d4:	4b0e      	ldr	r3, [pc, #56]	@ (8002810 <HAL_GPIO_EXTI_Falling_Callback+0x5c>)
 80027d6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80027d8:	4b0d      	ldr	r3, [pc, #52]	@ (8002810 <HAL_GPIO_EXTI_Falling_Callback+0x5c>)
 80027da:	32c8      	adds	r2, #200	@ 0xc8
 80027dc:	62da      	str	r2, [r3, #44]	@ 0x2c
	}

	if(GPIO_Pin == GPIO_PIN_7)
 80027de:	1dbb      	adds	r3, r7, #6
 80027e0:	881b      	ldrh	r3, [r3, #0]
 80027e2:	2b80      	cmp	r3, #128	@ 0x80
 80027e4:	d108      	bne.n	80027f8 <HAL_GPIO_EXTI_Falling_Callback+0x44>
	{
		if(TIM14 -> ARR > 200)
 80027e6:	4b0a      	ldr	r3, [pc, #40]	@ (8002810 <HAL_GPIO_EXTI_Falling_Callback+0x5c>)
 80027e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027ea:	2bc8      	cmp	r3, #200	@ 0xc8
 80027ec:	d904      	bls.n	80027f8 <HAL_GPIO_EXTI_Falling_Callback+0x44>
			TIM14 -> ARR -= 200;
 80027ee:	4b08      	ldr	r3, [pc, #32]	@ (8002810 <HAL_GPIO_EXTI_Falling_Callback+0x5c>)
 80027f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80027f2:	4b07      	ldr	r3, [pc, #28]	@ (8002810 <HAL_GPIO_EXTI_Falling_Callback+0x5c>)
 80027f4:	3ac8      	subs	r2, #200	@ 0xc8
 80027f6:	62da      	str	r2, [r3, #44]	@ 0x2c
	}

	if(GPIO_Pin == GPIO_PIN_12)
 80027f8:	1dbb      	adds	r3, r7, #6
 80027fa:	881a      	ldrh	r2, [r3, #0]
 80027fc:	2380      	movs	r3, #128	@ 0x80
 80027fe:	015b      	lsls	r3, r3, #5
 8002800:	429a      	cmp	r2, r3
 8002802:	d101      	bne.n	8002808 <HAL_GPIO_EXTI_Falling_Callback+0x54>
	{
		CycleWaveform();
 8002804:	f7ff fd82 	bl	800230c <CycleWaveform>
	}
}
 8002808:	46c0      	nop			@ (mov r8, r8)
 800280a:	46bd      	mov	sp, r7
 800280c:	b002      	add	sp, #8
 800280e:	bd80      	pop	{r7, pc}
 8002810:	40002000 	.word	0x40002000

08002814 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002814:	b580      	push	{r7, lr}
 8002816:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002818:	b672      	cpsid	i
}
 800281a:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800281c:	46c0      	nop			@ (mov r8, r8)
 800281e:	e7fd      	b.n	800281c <Error_Handler+0x8>

08002820 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002820:	b580      	push	{r7, lr}
 8002822:	b082      	sub	sp, #8
 8002824:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002826:	4b0f      	ldr	r3, [pc, #60]	@ (8002864 <HAL_MspInit+0x44>)
 8002828:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800282a:	4b0e      	ldr	r3, [pc, #56]	@ (8002864 <HAL_MspInit+0x44>)
 800282c:	2101      	movs	r1, #1
 800282e:	430a      	orrs	r2, r1
 8002830:	641a      	str	r2, [r3, #64]	@ 0x40
 8002832:	4b0c      	ldr	r3, [pc, #48]	@ (8002864 <HAL_MspInit+0x44>)
 8002834:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002836:	2201      	movs	r2, #1
 8002838:	4013      	ands	r3, r2
 800283a:	607b      	str	r3, [r7, #4]
 800283c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800283e:	4b09      	ldr	r3, [pc, #36]	@ (8002864 <HAL_MspInit+0x44>)
 8002840:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002842:	4b08      	ldr	r3, [pc, #32]	@ (8002864 <HAL_MspInit+0x44>)
 8002844:	2180      	movs	r1, #128	@ 0x80
 8002846:	0549      	lsls	r1, r1, #21
 8002848:	430a      	orrs	r2, r1
 800284a:	63da      	str	r2, [r3, #60]	@ 0x3c
 800284c:	4b05      	ldr	r3, [pc, #20]	@ (8002864 <HAL_MspInit+0x44>)
 800284e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002850:	2380      	movs	r3, #128	@ 0x80
 8002852:	055b      	lsls	r3, r3, #21
 8002854:	4013      	ands	r3, r2
 8002856:	603b      	str	r3, [r7, #0]
 8002858:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800285a:	46c0      	nop			@ (mov r8, r8)
 800285c:	46bd      	mov	sp, r7
 800285e:	b002      	add	sp, #8
 8002860:	bd80      	pop	{r7, pc}
 8002862:	46c0      	nop			@ (mov r8, r8)
 8002864:	40021000 	.word	0x40021000

08002868 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002868:	b590      	push	{r4, r7, lr}
 800286a:	b08d      	sub	sp, #52	@ 0x34
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002870:	241c      	movs	r4, #28
 8002872:	193b      	adds	r3, r7, r4
 8002874:	0018      	movs	r0, r3
 8002876:	2314      	movs	r3, #20
 8002878:	001a      	movs	r2, r3
 800287a:	2100      	movs	r1, #0
 800287c:	f001 ffb4 	bl	80047e8 <memset>
  if(hspi->Instance==SPI1)
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	4a53      	ldr	r2, [pc, #332]	@ (80029d4 <HAL_SPI_MspInit+0x16c>)
 8002886:	4293      	cmp	r3, r2
 8002888:	d152      	bne.n	8002930 <HAL_SPI_MspInit+0xc8>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800288a:	4b53      	ldr	r3, [pc, #332]	@ (80029d8 <HAL_SPI_MspInit+0x170>)
 800288c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800288e:	4b52      	ldr	r3, [pc, #328]	@ (80029d8 <HAL_SPI_MspInit+0x170>)
 8002890:	2180      	movs	r1, #128	@ 0x80
 8002892:	0149      	lsls	r1, r1, #5
 8002894:	430a      	orrs	r2, r1
 8002896:	641a      	str	r2, [r3, #64]	@ 0x40
 8002898:	4b4f      	ldr	r3, [pc, #316]	@ (80029d8 <HAL_SPI_MspInit+0x170>)
 800289a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800289c:	2380      	movs	r3, #128	@ 0x80
 800289e:	015b      	lsls	r3, r3, #5
 80028a0:	4013      	ands	r3, r2
 80028a2:	61bb      	str	r3, [r7, #24]
 80028a4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028a6:	4b4c      	ldr	r3, [pc, #304]	@ (80029d8 <HAL_SPI_MspInit+0x170>)
 80028a8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80028aa:	4b4b      	ldr	r3, [pc, #300]	@ (80029d8 <HAL_SPI_MspInit+0x170>)
 80028ac:	2101      	movs	r1, #1
 80028ae:	430a      	orrs	r2, r1
 80028b0:	635a      	str	r2, [r3, #52]	@ 0x34
 80028b2:	4b49      	ldr	r3, [pc, #292]	@ (80029d8 <HAL_SPI_MspInit+0x170>)
 80028b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80028b6:	2201      	movs	r2, #1
 80028b8:	4013      	ands	r3, r2
 80028ba:	617b      	str	r3, [r7, #20]
 80028bc:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80028be:	4b46      	ldr	r3, [pc, #280]	@ (80029d8 <HAL_SPI_MspInit+0x170>)
 80028c0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80028c2:	4b45      	ldr	r3, [pc, #276]	@ (80029d8 <HAL_SPI_MspInit+0x170>)
 80028c4:	2102      	movs	r1, #2
 80028c6:	430a      	orrs	r2, r1
 80028c8:	635a      	str	r2, [r3, #52]	@ 0x34
 80028ca:	4b43      	ldr	r3, [pc, #268]	@ (80029d8 <HAL_SPI_MspInit+0x170>)
 80028cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80028ce:	2202      	movs	r2, #2
 80028d0:	4013      	ands	r3, r2
 80028d2:	613b      	str	r3, [r7, #16]
 80028d4:	693b      	ldr	r3, [r7, #16]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80028d6:	193b      	adds	r3, r7, r4
 80028d8:	2220      	movs	r2, #32
 80028da:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028dc:	193b      	adds	r3, r7, r4
 80028de:	2202      	movs	r2, #2
 80028e0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028e2:	193b      	adds	r3, r7, r4
 80028e4:	2200      	movs	r2, #0
 80028e6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028e8:	193b      	adds	r3, r7, r4
 80028ea:	2200      	movs	r2, #0
 80028ec:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 80028ee:	193b      	adds	r3, r7, r4
 80028f0:	2200      	movs	r2, #0
 80028f2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028f4:	193a      	adds	r2, r7, r4
 80028f6:	23a0      	movs	r3, #160	@ 0xa0
 80028f8:	05db      	lsls	r3, r3, #23
 80028fa:	0011      	movs	r1, r2
 80028fc:	0018      	movs	r0, r3
 80028fe:	f000 fad3 	bl	8002ea8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8002902:	0021      	movs	r1, r4
 8002904:	187b      	adds	r3, r7, r1
 8002906:	2220      	movs	r2, #32
 8002908:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800290a:	187b      	adds	r3, r7, r1
 800290c:	2202      	movs	r2, #2
 800290e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002910:	187b      	adds	r3, r7, r1
 8002912:	2200      	movs	r2, #0
 8002914:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002916:	187b      	adds	r3, r7, r1
 8002918:	2200      	movs	r2, #0
 800291a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 800291c:	187b      	adds	r3, r7, r1
 800291e:	2200      	movs	r2, #0
 8002920:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002922:	187b      	adds	r3, r7, r1
 8002924:	4a2d      	ldr	r2, [pc, #180]	@ (80029dc <HAL_SPI_MspInit+0x174>)
 8002926:	0019      	movs	r1, r3
 8002928:	0010      	movs	r0, r2
 800292a:	f000 fabd 	bl	8002ea8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800292e:	e04c      	b.n	80029ca <HAL_SPI_MspInit+0x162>
  else if(hspi->Instance==SPI2)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	4a2a      	ldr	r2, [pc, #168]	@ (80029e0 <HAL_SPI_MspInit+0x178>)
 8002936:	4293      	cmp	r3, r2
 8002938:	d147      	bne.n	80029ca <HAL_SPI_MspInit+0x162>
    __HAL_RCC_SPI2_CLK_ENABLE();
 800293a:	4b27      	ldr	r3, [pc, #156]	@ (80029d8 <HAL_SPI_MspInit+0x170>)
 800293c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800293e:	4b26      	ldr	r3, [pc, #152]	@ (80029d8 <HAL_SPI_MspInit+0x170>)
 8002940:	2180      	movs	r1, #128	@ 0x80
 8002942:	01c9      	lsls	r1, r1, #7
 8002944:	430a      	orrs	r2, r1
 8002946:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002948:	4b23      	ldr	r3, [pc, #140]	@ (80029d8 <HAL_SPI_MspInit+0x170>)
 800294a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800294c:	2380      	movs	r3, #128	@ 0x80
 800294e:	01db      	lsls	r3, r3, #7
 8002950:	4013      	ands	r3, r2
 8002952:	60fb      	str	r3, [r7, #12]
 8002954:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002956:	4b20      	ldr	r3, [pc, #128]	@ (80029d8 <HAL_SPI_MspInit+0x170>)
 8002958:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800295a:	4b1f      	ldr	r3, [pc, #124]	@ (80029d8 <HAL_SPI_MspInit+0x170>)
 800295c:	2101      	movs	r1, #1
 800295e:	430a      	orrs	r2, r1
 8002960:	635a      	str	r2, [r3, #52]	@ 0x34
 8002962:	4b1d      	ldr	r3, [pc, #116]	@ (80029d8 <HAL_SPI_MspInit+0x170>)
 8002964:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002966:	2201      	movs	r2, #1
 8002968:	4013      	ands	r3, r2
 800296a:	60bb      	str	r3, [r7, #8]
 800296c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800296e:	241c      	movs	r4, #28
 8002970:	193b      	adds	r3, r7, r4
 8002972:	2201      	movs	r2, #1
 8002974:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002976:	193b      	adds	r3, r7, r4
 8002978:	2202      	movs	r2, #2
 800297a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800297c:	193b      	adds	r3, r7, r4
 800297e:	2200      	movs	r2, #0
 8002980:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002982:	193b      	adds	r3, r7, r4
 8002984:	2200      	movs	r2, #0
 8002986:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
 8002988:	193b      	adds	r3, r7, r4
 800298a:	2200      	movs	r2, #0
 800298c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800298e:	193a      	adds	r2, r7, r4
 8002990:	23a0      	movs	r3, #160	@ 0xa0
 8002992:	05db      	lsls	r3, r3, #23
 8002994:	0011      	movs	r1, r2
 8002996:	0018      	movs	r0, r3
 8002998:	f000 fa86 	bl	8002ea8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800299c:	0021      	movs	r1, r4
 800299e:	187b      	adds	r3, r7, r1
 80029a0:	2210      	movs	r2, #16
 80029a2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029a4:	187b      	adds	r3, r7, r1
 80029a6:	2202      	movs	r2, #2
 80029a8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029aa:	187b      	adds	r3, r7, r1
 80029ac:	2200      	movs	r2, #0
 80029ae:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029b0:	187b      	adds	r3, r7, r1
 80029b2:	2200      	movs	r2, #0
 80029b4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_SPI2;
 80029b6:	187b      	adds	r3, r7, r1
 80029b8:	2201      	movs	r2, #1
 80029ba:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029bc:	187a      	adds	r2, r7, r1
 80029be:	23a0      	movs	r3, #160	@ 0xa0
 80029c0:	05db      	lsls	r3, r3, #23
 80029c2:	0011      	movs	r1, r2
 80029c4:	0018      	movs	r0, r3
 80029c6:	f000 fa6f 	bl	8002ea8 <HAL_GPIO_Init>
}
 80029ca:	46c0      	nop			@ (mov r8, r8)
 80029cc:	46bd      	mov	sp, r7
 80029ce:	b00d      	add	sp, #52	@ 0x34
 80029d0:	bd90      	pop	{r4, r7, pc}
 80029d2:	46c0      	nop			@ (mov r8, r8)
 80029d4:	40013000 	.word	0x40013000
 80029d8:	40021000 	.word	0x40021000
 80029dc:	50000400 	.word	0x50000400
 80029e0:	40003800 	.word	0x40003800

080029e4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80029e4:	b580      	push	{r7, lr}
 80029e6:	b084      	sub	sp, #16
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM14)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	4a0e      	ldr	r2, [pc, #56]	@ (8002a2c <HAL_TIM_Base_MspInit+0x48>)
 80029f2:	4293      	cmp	r3, r2
 80029f4:	d115      	bne.n	8002a22 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM14_MspInit 0 */

  /* USER CODE END TIM14_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM14_CLK_ENABLE();
 80029f6:	4b0e      	ldr	r3, [pc, #56]	@ (8002a30 <HAL_TIM_Base_MspInit+0x4c>)
 80029f8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80029fa:	4b0d      	ldr	r3, [pc, #52]	@ (8002a30 <HAL_TIM_Base_MspInit+0x4c>)
 80029fc:	2180      	movs	r1, #128	@ 0x80
 80029fe:	0209      	lsls	r1, r1, #8
 8002a00:	430a      	orrs	r2, r1
 8002a02:	641a      	str	r2, [r3, #64]	@ 0x40
 8002a04:	4b0a      	ldr	r3, [pc, #40]	@ (8002a30 <HAL_TIM_Base_MspInit+0x4c>)
 8002a06:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002a08:	2380      	movs	r3, #128	@ 0x80
 8002a0a:	021b      	lsls	r3, r3, #8
 8002a0c:	4013      	ands	r3, r2
 8002a0e:	60fb      	str	r3, [r7, #12]
 8002a10:	68fb      	ldr	r3, [r7, #12]
    /* TIM14 interrupt Init */
    HAL_NVIC_SetPriority(TIM14_IRQn, 0, 0);
 8002a12:	2200      	movs	r2, #0
 8002a14:	2100      	movs	r1, #0
 8002a16:	2013      	movs	r0, #19
 8002a18:	f000 fa14 	bl	8002e44 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM14_IRQn);
 8002a1c:	2013      	movs	r0, #19
 8002a1e:	f000 fa26 	bl	8002e6e <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM14_MspInit 1 */

  }

}
 8002a22:	46c0      	nop			@ (mov r8, r8)
 8002a24:	46bd      	mov	sp, r7
 8002a26:	b004      	add	sp, #16
 8002a28:	bd80      	pop	{r7, pc}
 8002a2a:	46c0      	nop			@ (mov r8, r8)
 8002a2c:	40002000 	.word	0x40002000
 8002a30:	40021000 	.word	0x40021000

08002a34 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002a34:	b580      	push	{r7, lr}
 8002a36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002a38:	46c0      	nop			@ (mov r8, r8)
 8002a3a:	e7fd      	b.n	8002a38 <NMI_Handler+0x4>

08002a3c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002a40:	46c0      	nop			@ (mov r8, r8)
 8002a42:	e7fd      	b.n	8002a40 <HardFault_Handler+0x4>

08002a44 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002a44:	b580      	push	{r7, lr}
 8002a46:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8002a48:	46c0      	nop			@ (mov r8, r8)
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	bd80      	pop	{r7, pc}

08002a4e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002a4e:	b580      	push	{r7, lr}
 8002a50:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002a52:	46c0      	nop			@ (mov r8, r8)
 8002a54:	46bd      	mov	sp, r7
 8002a56:	bd80      	pop	{r7, pc}

08002a58 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002a5c:	f000 f906 	bl	8002c6c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002a60:	46c0      	nop			@ (mov r8, r8)
 8002a62:	46bd      	mov	sp, r7
 8002a64:	bd80      	pop	{r7, pc}

08002a66 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8002a66:	b580      	push	{r7, lr}
 8002a68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8002a6a:	2040      	movs	r0, #64	@ 0x40
 8002a6c:	f000 fb9e 	bl	80031ac <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8002a70:	2080      	movs	r0, #128	@ 0x80
 8002a72:	f000 fb9b 	bl	80031ac <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8002a76:	2380      	movs	r3, #128	@ 0x80
 8002a78:	015b      	lsls	r3, r3, #5
 8002a7a:	0018      	movs	r0, r3
 8002a7c:	f000 fb96 	bl	80031ac <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8002a80:	46c0      	nop			@ (mov r8, r8)
 8002a82:	46bd      	mov	sp, r7
 8002a84:	bd80      	pop	{r7, pc}
	...

08002a88 <TIM14_IRQHandler>:

/**
  * @brief This function handles TIM14 global interrupt.
  */
void TIM14_IRQHandler(void)
{
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM14_IRQn 0 */
	  __HAL_TIM_CLEAR_IT(&htim14,TIM_IT_UPDATE);
 8002a8c:	4b24      	ldr	r3, [pc, #144]	@ (8002b20 <TIM14_IRQHandler+0x98>)
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	2202      	movs	r2, #2
 8002a92:	4252      	negs	r2, r2
 8002a94:	611a      	str	r2, [r3, #16]

      // Select the current waveform
      switch(current_waveform)
 8002a96:	4b23      	ldr	r3, [pc, #140]	@ (8002b24 <TIM14_IRQHandler+0x9c>)
 8002a98:	781b      	ldrb	r3, [r3, #0]
 8002a9a:	b2db      	uxtb	r3, r3
 8002a9c:	2b02      	cmp	r3, #2
 8002a9e:	d017      	beq.n	8002ad0 <TIM14_IRQHandler+0x48>
 8002aa0:	dc1f      	bgt.n	8002ae2 <TIM14_IRQHandler+0x5a>
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d002      	beq.n	8002aac <TIM14_IRQHandler+0x24>
 8002aa6:	2b01      	cmp	r3, #1
 8002aa8:	d009      	beq.n	8002abe <TIM14_IRQHandler+0x36>
 8002aaa:	e01a      	b.n	8002ae2 <TIM14_IRQHandler+0x5a>
      {
          case WAVEFORM_SINE:
              DAC_SetValue(sine_table[dac_index]);
 8002aac:	4b1e      	ldr	r3, [pc, #120]	@ (8002b28 <TIM14_IRQHandler+0xa0>)
 8002aae:	781b      	ldrb	r3, [r3, #0]
 8002ab0:	001a      	movs	r2, r3
 8002ab2:	4b1e      	ldr	r3, [pc, #120]	@ (8002b2c <TIM14_IRQHandler+0xa4>)
 8002ab4:	5c9b      	ldrb	r3, [r3, r2]
 8002ab6:	0018      	movs	r0, r3
 8002ab8:	f7ff fc3c 	bl	8002334 <DAC_SetValue>
              break;
 8002abc:	e01a      	b.n	8002af4 <TIM14_IRQHandler+0x6c>
          case WAVEFORM_SQUARE:
              DAC_SetValue(square_table[dac_index]);
 8002abe:	4b1a      	ldr	r3, [pc, #104]	@ (8002b28 <TIM14_IRQHandler+0xa0>)
 8002ac0:	781b      	ldrb	r3, [r3, #0]
 8002ac2:	001a      	movs	r2, r3
 8002ac4:	4b1a      	ldr	r3, [pc, #104]	@ (8002b30 <TIM14_IRQHandler+0xa8>)
 8002ac6:	5c9b      	ldrb	r3, [r3, r2]
 8002ac8:	0018      	movs	r0, r3
 8002aca:	f7ff fc33 	bl	8002334 <DAC_SetValue>
              break;
 8002ace:	e011      	b.n	8002af4 <TIM14_IRQHandler+0x6c>
          case WAVEFORM_TRIANGLE:
              DAC_SetValue(triangle_table[dac_index]);
 8002ad0:	4b15      	ldr	r3, [pc, #84]	@ (8002b28 <TIM14_IRQHandler+0xa0>)
 8002ad2:	781b      	ldrb	r3, [r3, #0]
 8002ad4:	001a      	movs	r2, r3
 8002ad6:	4b17      	ldr	r3, [pc, #92]	@ (8002b34 <TIM14_IRQHandler+0xac>)
 8002ad8:	5c9b      	ldrb	r3, [r3, r2]
 8002ada:	0018      	movs	r0, r3
 8002adc:	f7ff fc2a 	bl	8002334 <DAC_SetValue>
              break;
 8002ae0:	e008      	b.n	8002af4 <TIM14_IRQHandler+0x6c>
          default:
        	  // Sine by default
        	  DAC_SetValue(sine_table[dac_index]);
 8002ae2:	4b11      	ldr	r3, [pc, #68]	@ (8002b28 <TIM14_IRQHandler+0xa0>)
 8002ae4:	781b      	ldrb	r3, [r3, #0]
 8002ae6:	001a      	movs	r2, r3
 8002ae8:	4b10      	ldr	r3, [pc, #64]	@ (8002b2c <TIM14_IRQHandler+0xa4>)
 8002aea:	5c9b      	ldrb	r3, [r3, r2]
 8002aec:	0018      	movs	r0, r3
 8002aee:	f7ff fc21 	bl	8002334 <DAC_SetValue>
              break;
 8002af2:	46c0      	nop			@ (mov r8, r8)
      }

	  if(dac_index < TABLE_SIZE - 1)
 8002af4:	4b0c      	ldr	r3, [pc, #48]	@ (8002b28 <TIM14_IRQHandler+0xa0>)
 8002af6:	781b      	ldrb	r3, [r3, #0]
 8002af8:	2b12      	cmp	r3, #18
 8002afa:	d806      	bhi.n	8002b0a <TIM14_IRQHandler+0x82>
	  {
	  	dac_index++;
 8002afc:	4b0a      	ldr	r3, [pc, #40]	@ (8002b28 <TIM14_IRQHandler+0xa0>)
 8002afe:	781b      	ldrb	r3, [r3, #0]
 8002b00:	3301      	adds	r3, #1
 8002b02:	b2da      	uxtb	r2, r3
 8002b04:	4b08      	ldr	r3, [pc, #32]	@ (8002b28 <TIM14_IRQHandler+0xa0>)
 8002b06:	701a      	strb	r2, [r3, #0]
 8002b08:	e002      	b.n	8002b10 <TIM14_IRQHandler+0x88>
	  }

	  else
	  {
	  	dac_index = 0;
 8002b0a:	4b07      	ldr	r3, [pc, #28]	@ (8002b28 <TIM14_IRQHandler+0xa0>)
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	701a      	strb	r2, [r3, #0]
	  }

  /* USER CODE END TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8002b10:	4b03      	ldr	r3, [pc, #12]	@ (8002b20 <TIM14_IRQHandler+0x98>)
 8002b12:	0018      	movs	r0, r3
 8002b14:	f001 fc9c 	bl	8004450 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM14_IRQn 1 */

  /* USER CODE END TIM14_IRQn 1 */
}
 8002b18:	46c0      	nop			@ (mov r8, r8)
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	bd80      	pop	{r7, pc}
 8002b1e:	46c0      	nop			@ (mov r8, r8)
 8002b20:	200000f0 	.word	0x200000f0
 8002b24:	2000017c 	.word	0x2000017c
 8002b28:	2000017d 	.word	0x2000017d
 8002b2c:	20000140 	.word	0x20000140
 8002b30:	20000154 	.word	0x20000154
 8002b34:	20000168 	.word	0x20000168

08002b38 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002b3c:	46c0      	nop			@ (mov r8, r8)
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	bd80      	pop	{r7, pc}
	...

08002b44 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002b44:	480d      	ldr	r0, [pc, #52]	@ (8002b7c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002b46:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002b48:	f7ff fff6 	bl	8002b38 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002b4c:	480c      	ldr	r0, [pc, #48]	@ (8002b80 <LoopForever+0x6>)
  ldr r1, =_edata
 8002b4e:	490d      	ldr	r1, [pc, #52]	@ (8002b84 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002b50:	4a0d      	ldr	r2, [pc, #52]	@ (8002b88 <LoopForever+0xe>)
  movs r3, #0
 8002b52:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002b54:	e002      	b.n	8002b5c <LoopCopyDataInit>

08002b56 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002b56:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002b58:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002b5a:	3304      	adds	r3, #4

08002b5c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002b5c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002b5e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002b60:	d3f9      	bcc.n	8002b56 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002b62:	4a0a      	ldr	r2, [pc, #40]	@ (8002b8c <LoopForever+0x12>)
  ldr r4, =_ebss
 8002b64:	4c0a      	ldr	r4, [pc, #40]	@ (8002b90 <LoopForever+0x16>)
  movs r3, #0
 8002b66:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002b68:	e001      	b.n	8002b6e <LoopFillZerobss>

08002b6a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002b6a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002b6c:	3204      	adds	r2, #4

08002b6e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002b6e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002b70:	d3fb      	bcc.n	8002b6a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8002b72:	f001 fe41 	bl	80047f8 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8002b76:	f7ff fc6b 	bl	8002450 <main>

08002b7a <LoopForever>:

LoopForever:
  b LoopForever
 8002b7a:	e7fe      	b.n	8002b7a <LoopForever>
  ldr   r0, =_estack
 8002b7c:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8002b80:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002b84:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8002b88:	08005a50 	.word	0x08005a50
  ldr r2, =_sbss
 8002b8c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8002b90:	20000184 	.word	0x20000184

08002b94 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002b94:	e7fe      	b.n	8002b94 <ADC1_IRQHandler>
	...

08002b98 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	b082      	sub	sp, #8
 8002b9c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002b9e:	1dfb      	adds	r3, r7, #7
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002ba4:	4b0b      	ldr	r3, [pc, #44]	@ (8002bd4 <HAL_Init+0x3c>)
 8002ba6:	681a      	ldr	r2, [r3, #0]
 8002ba8:	4b0a      	ldr	r3, [pc, #40]	@ (8002bd4 <HAL_Init+0x3c>)
 8002baa:	2180      	movs	r1, #128	@ 0x80
 8002bac:	0049      	lsls	r1, r1, #1
 8002bae:	430a      	orrs	r2, r1
 8002bb0:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002bb2:	2000      	movs	r0, #0
 8002bb4:	f000 f810 	bl	8002bd8 <HAL_InitTick>
 8002bb8:	1e03      	subs	r3, r0, #0
 8002bba:	d003      	beq.n	8002bc4 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8002bbc:	1dfb      	adds	r3, r7, #7
 8002bbe:	2201      	movs	r2, #1
 8002bc0:	701a      	strb	r2, [r3, #0]
 8002bc2:	e001      	b.n	8002bc8 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8002bc4:	f7ff fe2c 	bl	8002820 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002bc8:	1dfb      	adds	r3, r7, #7
 8002bca:	781b      	ldrb	r3, [r3, #0]
}
 8002bcc:	0018      	movs	r0, r3
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	b002      	add	sp, #8
 8002bd2:	bd80      	pop	{r7, pc}
 8002bd4:	40022000 	.word	0x40022000

08002bd8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002bd8:	b590      	push	{r4, r7, lr}
 8002bda:	b085      	sub	sp, #20
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002be0:	230f      	movs	r3, #15
 8002be2:	18fb      	adds	r3, r7, r3
 8002be4:	2200      	movs	r2, #0
 8002be6:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8002be8:	4b1d      	ldr	r3, [pc, #116]	@ (8002c60 <HAL_InitTick+0x88>)
 8002bea:	781b      	ldrb	r3, [r3, #0]
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d02b      	beq.n	8002c48 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8002bf0:	4b1c      	ldr	r3, [pc, #112]	@ (8002c64 <HAL_InitTick+0x8c>)
 8002bf2:	681c      	ldr	r4, [r3, #0]
 8002bf4:	4b1a      	ldr	r3, [pc, #104]	@ (8002c60 <HAL_InitTick+0x88>)
 8002bf6:	781b      	ldrb	r3, [r3, #0]
 8002bf8:	0019      	movs	r1, r3
 8002bfa:	23fa      	movs	r3, #250	@ 0xfa
 8002bfc:	0098      	lsls	r0, r3, #2
 8002bfe:	f7fd fa81 	bl	8000104 <__udivsi3>
 8002c02:	0003      	movs	r3, r0
 8002c04:	0019      	movs	r1, r3
 8002c06:	0020      	movs	r0, r4
 8002c08:	f7fd fa7c 	bl	8000104 <__udivsi3>
 8002c0c:	0003      	movs	r3, r0
 8002c0e:	0018      	movs	r0, r3
 8002c10:	f000 f93d 	bl	8002e8e <HAL_SYSTICK_Config>
 8002c14:	1e03      	subs	r3, r0, #0
 8002c16:	d112      	bne.n	8002c3e <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	2b03      	cmp	r3, #3
 8002c1c:	d80a      	bhi.n	8002c34 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002c1e:	6879      	ldr	r1, [r7, #4]
 8002c20:	2301      	movs	r3, #1
 8002c22:	425b      	negs	r3, r3
 8002c24:	2200      	movs	r2, #0
 8002c26:	0018      	movs	r0, r3
 8002c28:	f000 f90c 	bl	8002e44 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002c2c:	4b0e      	ldr	r3, [pc, #56]	@ (8002c68 <HAL_InitTick+0x90>)
 8002c2e:	687a      	ldr	r2, [r7, #4]
 8002c30:	601a      	str	r2, [r3, #0]
 8002c32:	e00d      	b.n	8002c50 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8002c34:	230f      	movs	r3, #15
 8002c36:	18fb      	adds	r3, r7, r3
 8002c38:	2201      	movs	r2, #1
 8002c3a:	701a      	strb	r2, [r3, #0]
 8002c3c:	e008      	b.n	8002c50 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002c3e:	230f      	movs	r3, #15
 8002c40:	18fb      	adds	r3, r7, r3
 8002c42:	2201      	movs	r2, #1
 8002c44:	701a      	strb	r2, [r3, #0]
 8002c46:	e003      	b.n	8002c50 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002c48:	230f      	movs	r3, #15
 8002c4a:	18fb      	adds	r3, r7, r3
 8002c4c:	2201      	movs	r2, #1
 8002c4e:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8002c50:	230f      	movs	r3, #15
 8002c52:	18fb      	adds	r3, r7, r3
 8002c54:	781b      	ldrb	r3, [r3, #0]
}
 8002c56:	0018      	movs	r0, r3
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	b005      	add	sp, #20
 8002c5c:	bd90      	pop	{r4, r7, pc}
 8002c5e:	46c0      	nop			@ (mov r8, r8)
 8002c60:	20000008 	.word	0x20000008
 8002c64:	20000000 	.word	0x20000000
 8002c68:	20000004 	.word	0x20000004

08002c6c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002c70:	4b05      	ldr	r3, [pc, #20]	@ (8002c88 <HAL_IncTick+0x1c>)
 8002c72:	781b      	ldrb	r3, [r3, #0]
 8002c74:	001a      	movs	r2, r3
 8002c76:	4b05      	ldr	r3, [pc, #20]	@ (8002c8c <HAL_IncTick+0x20>)
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	18d2      	adds	r2, r2, r3
 8002c7c:	4b03      	ldr	r3, [pc, #12]	@ (8002c8c <HAL_IncTick+0x20>)
 8002c7e:	601a      	str	r2, [r3, #0]
}
 8002c80:	46c0      	nop			@ (mov r8, r8)
 8002c82:	46bd      	mov	sp, r7
 8002c84:	bd80      	pop	{r7, pc}
 8002c86:	46c0      	nop			@ (mov r8, r8)
 8002c88:	20000008 	.word	0x20000008
 8002c8c:	20000180 	.word	0x20000180

08002c90 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002c90:	b580      	push	{r7, lr}
 8002c92:	af00      	add	r7, sp, #0
  return uwTick;
 8002c94:	4b02      	ldr	r3, [pc, #8]	@ (8002ca0 <HAL_GetTick+0x10>)
 8002c96:	681b      	ldr	r3, [r3, #0]
}
 8002c98:	0018      	movs	r0, r3
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	bd80      	pop	{r7, pc}
 8002c9e:	46c0      	nop			@ (mov r8, r8)
 8002ca0:	20000180 	.word	0x20000180

08002ca4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	b084      	sub	sp, #16
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002cac:	f7ff fff0 	bl	8002c90 <HAL_GetTick>
 8002cb0:	0003      	movs	r3, r0
 8002cb2:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	3301      	adds	r3, #1
 8002cbc:	d005      	beq.n	8002cca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002cbe:	4b0a      	ldr	r3, [pc, #40]	@ (8002ce8 <HAL_Delay+0x44>)
 8002cc0:	781b      	ldrb	r3, [r3, #0]
 8002cc2:	001a      	movs	r2, r3
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	189b      	adds	r3, r3, r2
 8002cc8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002cca:	46c0      	nop			@ (mov r8, r8)
 8002ccc:	f7ff ffe0 	bl	8002c90 <HAL_GetTick>
 8002cd0:	0002      	movs	r2, r0
 8002cd2:	68bb      	ldr	r3, [r7, #8]
 8002cd4:	1ad3      	subs	r3, r2, r3
 8002cd6:	68fa      	ldr	r2, [r7, #12]
 8002cd8:	429a      	cmp	r2, r3
 8002cda:	d8f7      	bhi.n	8002ccc <HAL_Delay+0x28>
  {
  }
}
 8002cdc:	46c0      	nop			@ (mov r8, r8)
 8002cde:	46c0      	nop			@ (mov r8, r8)
 8002ce0:	46bd      	mov	sp, r7
 8002ce2:	b004      	add	sp, #16
 8002ce4:	bd80      	pop	{r7, pc}
 8002ce6:	46c0      	nop			@ (mov r8, r8)
 8002ce8:	20000008 	.word	0x20000008

08002cec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002cec:	b580      	push	{r7, lr}
 8002cee:	b082      	sub	sp, #8
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	0002      	movs	r2, r0
 8002cf4:	1dfb      	adds	r3, r7, #7
 8002cf6:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002cf8:	1dfb      	adds	r3, r7, #7
 8002cfa:	781b      	ldrb	r3, [r3, #0]
 8002cfc:	2b7f      	cmp	r3, #127	@ 0x7f
 8002cfe:	d809      	bhi.n	8002d14 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002d00:	1dfb      	adds	r3, r7, #7
 8002d02:	781b      	ldrb	r3, [r3, #0]
 8002d04:	001a      	movs	r2, r3
 8002d06:	231f      	movs	r3, #31
 8002d08:	401a      	ands	r2, r3
 8002d0a:	4b04      	ldr	r3, [pc, #16]	@ (8002d1c <__NVIC_EnableIRQ+0x30>)
 8002d0c:	2101      	movs	r1, #1
 8002d0e:	4091      	lsls	r1, r2
 8002d10:	000a      	movs	r2, r1
 8002d12:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8002d14:	46c0      	nop			@ (mov r8, r8)
 8002d16:	46bd      	mov	sp, r7
 8002d18:	b002      	add	sp, #8
 8002d1a:	bd80      	pop	{r7, pc}
 8002d1c:	e000e100 	.word	0xe000e100

08002d20 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002d20:	b590      	push	{r4, r7, lr}
 8002d22:	b083      	sub	sp, #12
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	0002      	movs	r2, r0
 8002d28:	6039      	str	r1, [r7, #0]
 8002d2a:	1dfb      	adds	r3, r7, #7
 8002d2c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002d2e:	1dfb      	adds	r3, r7, #7
 8002d30:	781b      	ldrb	r3, [r3, #0]
 8002d32:	2b7f      	cmp	r3, #127	@ 0x7f
 8002d34:	d828      	bhi.n	8002d88 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002d36:	4a2f      	ldr	r2, [pc, #188]	@ (8002df4 <__NVIC_SetPriority+0xd4>)
 8002d38:	1dfb      	adds	r3, r7, #7
 8002d3a:	781b      	ldrb	r3, [r3, #0]
 8002d3c:	b25b      	sxtb	r3, r3
 8002d3e:	089b      	lsrs	r3, r3, #2
 8002d40:	33c0      	adds	r3, #192	@ 0xc0
 8002d42:	009b      	lsls	r3, r3, #2
 8002d44:	589b      	ldr	r3, [r3, r2]
 8002d46:	1dfa      	adds	r2, r7, #7
 8002d48:	7812      	ldrb	r2, [r2, #0]
 8002d4a:	0011      	movs	r1, r2
 8002d4c:	2203      	movs	r2, #3
 8002d4e:	400a      	ands	r2, r1
 8002d50:	00d2      	lsls	r2, r2, #3
 8002d52:	21ff      	movs	r1, #255	@ 0xff
 8002d54:	4091      	lsls	r1, r2
 8002d56:	000a      	movs	r2, r1
 8002d58:	43d2      	mvns	r2, r2
 8002d5a:	401a      	ands	r2, r3
 8002d5c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002d5e:	683b      	ldr	r3, [r7, #0]
 8002d60:	019b      	lsls	r3, r3, #6
 8002d62:	22ff      	movs	r2, #255	@ 0xff
 8002d64:	401a      	ands	r2, r3
 8002d66:	1dfb      	adds	r3, r7, #7
 8002d68:	781b      	ldrb	r3, [r3, #0]
 8002d6a:	0018      	movs	r0, r3
 8002d6c:	2303      	movs	r3, #3
 8002d6e:	4003      	ands	r3, r0
 8002d70:	00db      	lsls	r3, r3, #3
 8002d72:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002d74:	481f      	ldr	r0, [pc, #124]	@ (8002df4 <__NVIC_SetPriority+0xd4>)
 8002d76:	1dfb      	adds	r3, r7, #7
 8002d78:	781b      	ldrb	r3, [r3, #0]
 8002d7a:	b25b      	sxtb	r3, r3
 8002d7c:	089b      	lsrs	r3, r3, #2
 8002d7e:	430a      	orrs	r2, r1
 8002d80:	33c0      	adds	r3, #192	@ 0xc0
 8002d82:	009b      	lsls	r3, r3, #2
 8002d84:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8002d86:	e031      	b.n	8002dec <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002d88:	4a1b      	ldr	r2, [pc, #108]	@ (8002df8 <__NVIC_SetPriority+0xd8>)
 8002d8a:	1dfb      	adds	r3, r7, #7
 8002d8c:	781b      	ldrb	r3, [r3, #0]
 8002d8e:	0019      	movs	r1, r3
 8002d90:	230f      	movs	r3, #15
 8002d92:	400b      	ands	r3, r1
 8002d94:	3b08      	subs	r3, #8
 8002d96:	089b      	lsrs	r3, r3, #2
 8002d98:	3306      	adds	r3, #6
 8002d9a:	009b      	lsls	r3, r3, #2
 8002d9c:	18d3      	adds	r3, r2, r3
 8002d9e:	3304      	adds	r3, #4
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	1dfa      	adds	r2, r7, #7
 8002da4:	7812      	ldrb	r2, [r2, #0]
 8002da6:	0011      	movs	r1, r2
 8002da8:	2203      	movs	r2, #3
 8002daa:	400a      	ands	r2, r1
 8002dac:	00d2      	lsls	r2, r2, #3
 8002dae:	21ff      	movs	r1, #255	@ 0xff
 8002db0:	4091      	lsls	r1, r2
 8002db2:	000a      	movs	r2, r1
 8002db4:	43d2      	mvns	r2, r2
 8002db6:	401a      	ands	r2, r3
 8002db8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002dba:	683b      	ldr	r3, [r7, #0]
 8002dbc:	019b      	lsls	r3, r3, #6
 8002dbe:	22ff      	movs	r2, #255	@ 0xff
 8002dc0:	401a      	ands	r2, r3
 8002dc2:	1dfb      	adds	r3, r7, #7
 8002dc4:	781b      	ldrb	r3, [r3, #0]
 8002dc6:	0018      	movs	r0, r3
 8002dc8:	2303      	movs	r3, #3
 8002dca:	4003      	ands	r3, r0
 8002dcc:	00db      	lsls	r3, r3, #3
 8002dce:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002dd0:	4809      	ldr	r0, [pc, #36]	@ (8002df8 <__NVIC_SetPriority+0xd8>)
 8002dd2:	1dfb      	adds	r3, r7, #7
 8002dd4:	781b      	ldrb	r3, [r3, #0]
 8002dd6:	001c      	movs	r4, r3
 8002dd8:	230f      	movs	r3, #15
 8002dda:	4023      	ands	r3, r4
 8002ddc:	3b08      	subs	r3, #8
 8002dde:	089b      	lsrs	r3, r3, #2
 8002de0:	430a      	orrs	r2, r1
 8002de2:	3306      	adds	r3, #6
 8002de4:	009b      	lsls	r3, r3, #2
 8002de6:	18c3      	adds	r3, r0, r3
 8002de8:	3304      	adds	r3, #4
 8002dea:	601a      	str	r2, [r3, #0]
}
 8002dec:	46c0      	nop			@ (mov r8, r8)
 8002dee:	46bd      	mov	sp, r7
 8002df0:	b003      	add	sp, #12
 8002df2:	bd90      	pop	{r4, r7, pc}
 8002df4:	e000e100 	.word	0xe000e100
 8002df8:	e000ed00 	.word	0xe000ed00

08002dfc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	b082      	sub	sp, #8
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	1e5a      	subs	r2, r3, #1
 8002e08:	2380      	movs	r3, #128	@ 0x80
 8002e0a:	045b      	lsls	r3, r3, #17
 8002e0c:	429a      	cmp	r2, r3
 8002e0e:	d301      	bcc.n	8002e14 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002e10:	2301      	movs	r3, #1
 8002e12:	e010      	b.n	8002e36 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002e14:	4b0a      	ldr	r3, [pc, #40]	@ (8002e40 <SysTick_Config+0x44>)
 8002e16:	687a      	ldr	r2, [r7, #4]
 8002e18:	3a01      	subs	r2, #1
 8002e1a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002e1c:	2301      	movs	r3, #1
 8002e1e:	425b      	negs	r3, r3
 8002e20:	2103      	movs	r1, #3
 8002e22:	0018      	movs	r0, r3
 8002e24:	f7ff ff7c 	bl	8002d20 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002e28:	4b05      	ldr	r3, [pc, #20]	@ (8002e40 <SysTick_Config+0x44>)
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002e2e:	4b04      	ldr	r3, [pc, #16]	@ (8002e40 <SysTick_Config+0x44>)
 8002e30:	2207      	movs	r2, #7
 8002e32:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002e34:	2300      	movs	r3, #0
}
 8002e36:	0018      	movs	r0, r3
 8002e38:	46bd      	mov	sp, r7
 8002e3a:	b002      	add	sp, #8
 8002e3c:	bd80      	pop	{r7, pc}
 8002e3e:	46c0      	nop			@ (mov r8, r8)
 8002e40:	e000e010 	.word	0xe000e010

08002e44 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e44:	b580      	push	{r7, lr}
 8002e46:	b084      	sub	sp, #16
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	60b9      	str	r1, [r7, #8]
 8002e4c:	607a      	str	r2, [r7, #4]
 8002e4e:	210f      	movs	r1, #15
 8002e50:	187b      	adds	r3, r7, r1
 8002e52:	1c02      	adds	r2, r0, #0
 8002e54:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8002e56:	68ba      	ldr	r2, [r7, #8]
 8002e58:	187b      	adds	r3, r7, r1
 8002e5a:	781b      	ldrb	r3, [r3, #0]
 8002e5c:	b25b      	sxtb	r3, r3
 8002e5e:	0011      	movs	r1, r2
 8002e60:	0018      	movs	r0, r3
 8002e62:	f7ff ff5d 	bl	8002d20 <__NVIC_SetPriority>
}
 8002e66:	46c0      	nop			@ (mov r8, r8)
 8002e68:	46bd      	mov	sp, r7
 8002e6a:	b004      	add	sp, #16
 8002e6c:	bd80      	pop	{r7, pc}

08002e6e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e6e:	b580      	push	{r7, lr}
 8002e70:	b082      	sub	sp, #8
 8002e72:	af00      	add	r7, sp, #0
 8002e74:	0002      	movs	r2, r0
 8002e76:	1dfb      	adds	r3, r7, #7
 8002e78:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002e7a:	1dfb      	adds	r3, r7, #7
 8002e7c:	781b      	ldrb	r3, [r3, #0]
 8002e7e:	b25b      	sxtb	r3, r3
 8002e80:	0018      	movs	r0, r3
 8002e82:	f7ff ff33 	bl	8002cec <__NVIC_EnableIRQ>
}
 8002e86:	46c0      	nop			@ (mov r8, r8)
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	b002      	add	sp, #8
 8002e8c:	bd80      	pop	{r7, pc}

08002e8e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002e8e:	b580      	push	{r7, lr}
 8002e90:	b082      	sub	sp, #8
 8002e92:	af00      	add	r7, sp, #0
 8002e94:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	0018      	movs	r0, r3
 8002e9a:	f7ff ffaf 	bl	8002dfc <SysTick_Config>
 8002e9e:	0003      	movs	r3, r0
}
 8002ea0:	0018      	movs	r0, r3
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	b002      	add	sp, #8
 8002ea6:	bd80      	pop	{r7, pc}

08002ea8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	b086      	sub	sp, #24
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]
 8002eb0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002eb2:	2300      	movs	r3, #0
 8002eb4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002eb6:	e147      	b.n	8003148 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002eb8:	683b      	ldr	r3, [r7, #0]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	2101      	movs	r1, #1
 8002ebe:	697a      	ldr	r2, [r7, #20]
 8002ec0:	4091      	lsls	r1, r2
 8002ec2:	000a      	movs	r2, r1
 8002ec4:	4013      	ands	r3, r2
 8002ec6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d100      	bne.n	8002ed0 <HAL_GPIO_Init+0x28>
 8002ece:	e138      	b.n	8003142 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002ed0:	683b      	ldr	r3, [r7, #0]
 8002ed2:	685b      	ldr	r3, [r3, #4]
 8002ed4:	2203      	movs	r2, #3
 8002ed6:	4013      	ands	r3, r2
 8002ed8:	2b01      	cmp	r3, #1
 8002eda:	d005      	beq.n	8002ee8 <HAL_GPIO_Init+0x40>
 8002edc:	683b      	ldr	r3, [r7, #0]
 8002ede:	685b      	ldr	r3, [r3, #4]
 8002ee0:	2203      	movs	r2, #3
 8002ee2:	4013      	ands	r3, r2
 8002ee4:	2b02      	cmp	r3, #2
 8002ee6:	d130      	bne.n	8002f4a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	689b      	ldr	r3, [r3, #8]
 8002eec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002eee:	697b      	ldr	r3, [r7, #20]
 8002ef0:	005b      	lsls	r3, r3, #1
 8002ef2:	2203      	movs	r2, #3
 8002ef4:	409a      	lsls	r2, r3
 8002ef6:	0013      	movs	r3, r2
 8002ef8:	43da      	mvns	r2, r3
 8002efa:	693b      	ldr	r3, [r7, #16]
 8002efc:	4013      	ands	r3, r2
 8002efe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002f00:	683b      	ldr	r3, [r7, #0]
 8002f02:	68da      	ldr	r2, [r3, #12]
 8002f04:	697b      	ldr	r3, [r7, #20]
 8002f06:	005b      	lsls	r3, r3, #1
 8002f08:	409a      	lsls	r2, r3
 8002f0a:	0013      	movs	r3, r2
 8002f0c:	693a      	ldr	r2, [r7, #16]
 8002f0e:	4313      	orrs	r3, r2
 8002f10:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	693a      	ldr	r2, [r7, #16]
 8002f16:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	685b      	ldr	r3, [r3, #4]
 8002f1c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002f1e:	2201      	movs	r2, #1
 8002f20:	697b      	ldr	r3, [r7, #20]
 8002f22:	409a      	lsls	r2, r3
 8002f24:	0013      	movs	r3, r2
 8002f26:	43da      	mvns	r2, r3
 8002f28:	693b      	ldr	r3, [r7, #16]
 8002f2a:	4013      	ands	r3, r2
 8002f2c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002f2e:	683b      	ldr	r3, [r7, #0]
 8002f30:	685b      	ldr	r3, [r3, #4]
 8002f32:	091b      	lsrs	r3, r3, #4
 8002f34:	2201      	movs	r2, #1
 8002f36:	401a      	ands	r2, r3
 8002f38:	697b      	ldr	r3, [r7, #20]
 8002f3a:	409a      	lsls	r2, r3
 8002f3c:	0013      	movs	r3, r2
 8002f3e:	693a      	ldr	r2, [r7, #16]
 8002f40:	4313      	orrs	r3, r2
 8002f42:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	693a      	ldr	r2, [r7, #16]
 8002f48:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002f4a:	683b      	ldr	r3, [r7, #0]
 8002f4c:	685b      	ldr	r3, [r3, #4]
 8002f4e:	2203      	movs	r2, #3
 8002f50:	4013      	ands	r3, r2
 8002f52:	2b03      	cmp	r3, #3
 8002f54:	d017      	beq.n	8002f86 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	68db      	ldr	r3, [r3, #12]
 8002f5a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002f5c:	697b      	ldr	r3, [r7, #20]
 8002f5e:	005b      	lsls	r3, r3, #1
 8002f60:	2203      	movs	r2, #3
 8002f62:	409a      	lsls	r2, r3
 8002f64:	0013      	movs	r3, r2
 8002f66:	43da      	mvns	r2, r3
 8002f68:	693b      	ldr	r3, [r7, #16]
 8002f6a:	4013      	ands	r3, r2
 8002f6c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002f6e:	683b      	ldr	r3, [r7, #0]
 8002f70:	689a      	ldr	r2, [r3, #8]
 8002f72:	697b      	ldr	r3, [r7, #20]
 8002f74:	005b      	lsls	r3, r3, #1
 8002f76:	409a      	lsls	r2, r3
 8002f78:	0013      	movs	r3, r2
 8002f7a:	693a      	ldr	r2, [r7, #16]
 8002f7c:	4313      	orrs	r3, r2
 8002f7e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	693a      	ldr	r2, [r7, #16]
 8002f84:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002f86:	683b      	ldr	r3, [r7, #0]
 8002f88:	685b      	ldr	r3, [r3, #4]
 8002f8a:	2203      	movs	r2, #3
 8002f8c:	4013      	ands	r3, r2
 8002f8e:	2b02      	cmp	r3, #2
 8002f90:	d123      	bne.n	8002fda <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002f92:	697b      	ldr	r3, [r7, #20]
 8002f94:	08da      	lsrs	r2, r3, #3
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	3208      	adds	r2, #8
 8002f9a:	0092      	lsls	r2, r2, #2
 8002f9c:	58d3      	ldr	r3, [r2, r3]
 8002f9e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002fa0:	697b      	ldr	r3, [r7, #20]
 8002fa2:	2207      	movs	r2, #7
 8002fa4:	4013      	ands	r3, r2
 8002fa6:	009b      	lsls	r3, r3, #2
 8002fa8:	220f      	movs	r2, #15
 8002faa:	409a      	lsls	r2, r3
 8002fac:	0013      	movs	r3, r2
 8002fae:	43da      	mvns	r2, r3
 8002fb0:	693b      	ldr	r3, [r7, #16]
 8002fb2:	4013      	ands	r3, r2
 8002fb4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002fb6:	683b      	ldr	r3, [r7, #0]
 8002fb8:	691a      	ldr	r2, [r3, #16]
 8002fba:	697b      	ldr	r3, [r7, #20]
 8002fbc:	2107      	movs	r1, #7
 8002fbe:	400b      	ands	r3, r1
 8002fc0:	009b      	lsls	r3, r3, #2
 8002fc2:	409a      	lsls	r2, r3
 8002fc4:	0013      	movs	r3, r2
 8002fc6:	693a      	ldr	r2, [r7, #16]
 8002fc8:	4313      	orrs	r3, r2
 8002fca:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002fcc:	697b      	ldr	r3, [r7, #20]
 8002fce:	08da      	lsrs	r2, r3, #3
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	3208      	adds	r2, #8
 8002fd4:	0092      	lsls	r2, r2, #2
 8002fd6:	6939      	ldr	r1, [r7, #16]
 8002fd8:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002fe0:	697b      	ldr	r3, [r7, #20]
 8002fe2:	005b      	lsls	r3, r3, #1
 8002fe4:	2203      	movs	r2, #3
 8002fe6:	409a      	lsls	r2, r3
 8002fe8:	0013      	movs	r3, r2
 8002fea:	43da      	mvns	r2, r3
 8002fec:	693b      	ldr	r3, [r7, #16]
 8002fee:	4013      	ands	r3, r2
 8002ff0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002ff2:	683b      	ldr	r3, [r7, #0]
 8002ff4:	685b      	ldr	r3, [r3, #4]
 8002ff6:	2203      	movs	r2, #3
 8002ff8:	401a      	ands	r2, r3
 8002ffa:	697b      	ldr	r3, [r7, #20]
 8002ffc:	005b      	lsls	r3, r3, #1
 8002ffe:	409a      	lsls	r2, r3
 8003000:	0013      	movs	r3, r2
 8003002:	693a      	ldr	r2, [r7, #16]
 8003004:	4313      	orrs	r3, r2
 8003006:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	693a      	ldr	r2, [r7, #16]
 800300c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800300e:	683b      	ldr	r3, [r7, #0]
 8003010:	685a      	ldr	r2, [r3, #4]
 8003012:	23c0      	movs	r3, #192	@ 0xc0
 8003014:	029b      	lsls	r3, r3, #10
 8003016:	4013      	ands	r3, r2
 8003018:	d100      	bne.n	800301c <HAL_GPIO_Init+0x174>
 800301a:	e092      	b.n	8003142 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 800301c:	4a50      	ldr	r2, [pc, #320]	@ (8003160 <HAL_GPIO_Init+0x2b8>)
 800301e:	697b      	ldr	r3, [r7, #20]
 8003020:	089b      	lsrs	r3, r3, #2
 8003022:	3318      	adds	r3, #24
 8003024:	009b      	lsls	r3, r3, #2
 8003026:	589b      	ldr	r3, [r3, r2]
 8003028:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 800302a:	697b      	ldr	r3, [r7, #20]
 800302c:	2203      	movs	r2, #3
 800302e:	4013      	ands	r3, r2
 8003030:	00db      	lsls	r3, r3, #3
 8003032:	220f      	movs	r2, #15
 8003034:	409a      	lsls	r2, r3
 8003036:	0013      	movs	r3, r2
 8003038:	43da      	mvns	r2, r3
 800303a:	693b      	ldr	r3, [r7, #16]
 800303c:	4013      	ands	r3, r2
 800303e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8003040:	687a      	ldr	r2, [r7, #4]
 8003042:	23a0      	movs	r3, #160	@ 0xa0
 8003044:	05db      	lsls	r3, r3, #23
 8003046:	429a      	cmp	r2, r3
 8003048:	d013      	beq.n	8003072 <HAL_GPIO_Init+0x1ca>
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	4a45      	ldr	r2, [pc, #276]	@ (8003164 <HAL_GPIO_Init+0x2bc>)
 800304e:	4293      	cmp	r3, r2
 8003050:	d00d      	beq.n	800306e <HAL_GPIO_Init+0x1c6>
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	4a44      	ldr	r2, [pc, #272]	@ (8003168 <HAL_GPIO_Init+0x2c0>)
 8003056:	4293      	cmp	r3, r2
 8003058:	d007      	beq.n	800306a <HAL_GPIO_Init+0x1c2>
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	4a43      	ldr	r2, [pc, #268]	@ (800316c <HAL_GPIO_Init+0x2c4>)
 800305e:	4293      	cmp	r3, r2
 8003060:	d101      	bne.n	8003066 <HAL_GPIO_Init+0x1be>
 8003062:	2303      	movs	r3, #3
 8003064:	e006      	b.n	8003074 <HAL_GPIO_Init+0x1cc>
 8003066:	2305      	movs	r3, #5
 8003068:	e004      	b.n	8003074 <HAL_GPIO_Init+0x1cc>
 800306a:	2302      	movs	r3, #2
 800306c:	e002      	b.n	8003074 <HAL_GPIO_Init+0x1cc>
 800306e:	2301      	movs	r3, #1
 8003070:	e000      	b.n	8003074 <HAL_GPIO_Init+0x1cc>
 8003072:	2300      	movs	r3, #0
 8003074:	697a      	ldr	r2, [r7, #20]
 8003076:	2103      	movs	r1, #3
 8003078:	400a      	ands	r2, r1
 800307a:	00d2      	lsls	r2, r2, #3
 800307c:	4093      	lsls	r3, r2
 800307e:	693a      	ldr	r2, [r7, #16]
 8003080:	4313      	orrs	r3, r2
 8003082:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8003084:	4936      	ldr	r1, [pc, #216]	@ (8003160 <HAL_GPIO_Init+0x2b8>)
 8003086:	697b      	ldr	r3, [r7, #20]
 8003088:	089b      	lsrs	r3, r3, #2
 800308a:	3318      	adds	r3, #24
 800308c:	009b      	lsls	r3, r3, #2
 800308e:	693a      	ldr	r2, [r7, #16]
 8003090:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003092:	4b33      	ldr	r3, [pc, #204]	@ (8003160 <HAL_GPIO_Init+0x2b8>)
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	43da      	mvns	r2, r3
 800309c:	693b      	ldr	r3, [r7, #16]
 800309e:	4013      	ands	r3, r2
 80030a0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80030a2:	683b      	ldr	r3, [r7, #0]
 80030a4:	685a      	ldr	r2, [r3, #4]
 80030a6:	2380      	movs	r3, #128	@ 0x80
 80030a8:	035b      	lsls	r3, r3, #13
 80030aa:	4013      	ands	r3, r2
 80030ac:	d003      	beq.n	80030b6 <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 80030ae:	693a      	ldr	r2, [r7, #16]
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	4313      	orrs	r3, r2
 80030b4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80030b6:	4b2a      	ldr	r3, [pc, #168]	@ (8003160 <HAL_GPIO_Init+0x2b8>)
 80030b8:	693a      	ldr	r2, [r7, #16]
 80030ba:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 80030bc:	4b28      	ldr	r3, [pc, #160]	@ (8003160 <HAL_GPIO_Init+0x2b8>)
 80030be:	685b      	ldr	r3, [r3, #4]
 80030c0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	43da      	mvns	r2, r3
 80030c6:	693b      	ldr	r3, [r7, #16]
 80030c8:	4013      	ands	r3, r2
 80030ca:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80030cc:	683b      	ldr	r3, [r7, #0]
 80030ce:	685a      	ldr	r2, [r3, #4]
 80030d0:	2380      	movs	r3, #128	@ 0x80
 80030d2:	039b      	lsls	r3, r3, #14
 80030d4:	4013      	ands	r3, r2
 80030d6:	d003      	beq.n	80030e0 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 80030d8:	693a      	ldr	r2, [r7, #16]
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	4313      	orrs	r3, r2
 80030de:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80030e0:	4b1f      	ldr	r3, [pc, #124]	@ (8003160 <HAL_GPIO_Init+0x2b8>)
 80030e2:	693a      	ldr	r2, [r7, #16]
 80030e4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80030e6:	4a1e      	ldr	r2, [pc, #120]	@ (8003160 <HAL_GPIO_Init+0x2b8>)
 80030e8:	2384      	movs	r3, #132	@ 0x84
 80030ea:	58d3      	ldr	r3, [r2, r3]
 80030ec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	43da      	mvns	r2, r3
 80030f2:	693b      	ldr	r3, [r7, #16]
 80030f4:	4013      	ands	r3, r2
 80030f6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80030f8:	683b      	ldr	r3, [r7, #0]
 80030fa:	685a      	ldr	r2, [r3, #4]
 80030fc:	2380      	movs	r3, #128	@ 0x80
 80030fe:	029b      	lsls	r3, r3, #10
 8003100:	4013      	ands	r3, r2
 8003102:	d003      	beq.n	800310c <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8003104:	693a      	ldr	r2, [r7, #16]
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	4313      	orrs	r3, r2
 800310a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800310c:	4914      	ldr	r1, [pc, #80]	@ (8003160 <HAL_GPIO_Init+0x2b8>)
 800310e:	2284      	movs	r2, #132	@ 0x84
 8003110:	693b      	ldr	r3, [r7, #16]
 8003112:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8003114:	4a12      	ldr	r2, [pc, #72]	@ (8003160 <HAL_GPIO_Init+0x2b8>)
 8003116:	2380      	movs	r3, #128	@ 0x80
 8003118:	58d3      	ldr	r3, [r2, r3]
 800311a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	43da      	mvns	r2, r3
 8003120:	693b      	ldr	r3, [r7, #16]
 8003122:	4013      	ands	r3, r2
 8003124:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003126:	683b      	ldr	r3, [r7, #0]
 8003128:	685a      	ldr	r2, [r3, #4]
 800312a:	2380      	movs	r3, #128	@ 0x80
 800312c:	025b      	lsls	r3, r3, #9
 800312e:	4013      	ands	r3, r2
 8003130:	d003      	beq.n	800313a <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8003132:	693a      	ldr	r2, [r7, #16]
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	4313      	orrs	r3, r2
 8003138:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800313a:	4909      	ldr	r1, [pc, #36]	@ (8003160 <HAL_GPIO_Init+0x2b8>)
 800313c:	2280      	movs	r2, #128	@ 0x80
 800313e:	693b      	ldr	r3, [r7, #16]
 8003140:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8003142:	697b      	ldr	r3, [r7, #20]
 8003144:	3301      	adds	r3, #1
 8003146:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003148:	683b      	ldr	r3, [r7, #0]
 800314a:	681a      	ldr	r2, [r3, #0]
 800314c:	697b      	ldr	r3, [r7, #20]
 800314e:	40da      	lsrs	r2, r3
 8003150:	1e13      	subs	r3, r2, #0
 8003152:	d000      	beq.n	8003156 <HAL_GPIO_Init+0x2ae>
 8003154:	e6b0      	b.n	8002eb8 <HAL_GPIO_Init+0x10>
  }
}
 8003156:	46c0      	nop			@ (mov r8, r8)
 8003158:	46c0      	nop			@ (mov r8, r8)
 800315a:	46bd      	mov	sp, r7
 800315c:	b006      	add	sp, #24
 800315e:	bd80      	pop	{r7, pc}
 8003160:	40021800 	.word	0x40021800
 8003164:	50000400 	.word	0x50000400
 8003168:	50000800 	.word	0x50000800
 800316c:	50000c00 	.word	0x50000c00

08003170 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003170:	b580      	push	{r7, lr}
 8003172:	b082      	sub	sp, #8
 8003174:	af00      	add	r7, sp, #0
 8003176:	6078      	str	r0, [r7, #4]
 8003178:	0008      	movs	r0, r1
 800317a:	0011      	movs	r1, r2
 800317c:	1cbb      	adds	r3, r7, #2
 800317e:	1c02      	adds	r2, r0, #0
 8003180:	801a      	strh	r2, [r3, #0]
 8003182:	1c7b      	adds	r3, r7, #1
 8003184:	1c0a      	adds	r2, r1, #0
 8003186:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003188:	1c7b      	adds	r3, r7, #1
 800318a:	781b      	ldrb	r3, [r3, #0]
 800318c:	2b00      	cmp	r3, #0
 800318e:	d004      	beq.n	800319a <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003190:	1cbb      	adds	r3, r7, #2
 8003192:	881a      	ldrh	r2, [r3, #0]
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003198:	e003      	b.n	80031a2 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800319a:	1cbb      	adds	r3, r7, #2
 800319c:	881a      	ldrh	r2, [r3, #0]
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80031a2:	46c0      	nop			@ (mov r8, r8)
 80031a4:	46bd      	mov	sp, r7
 80031a6:	b002      	add	sp, #8
 80031a8:	bd80      	pop	{r7, pc}
	...

080031ac <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80031ac:	b580      	push	{r7, lr}
 80031ae:	b082      	sub	sp, #8
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	0002      	movs	r2, r0
 80031b4:	1dbb      	adds	r3, r7, #6
 80031b6:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00u)
 80031b8:	4b10      	ldr	r3, [pc, #64]	@ (80031fc <HAL_GPIO_EXTI_IRQHandler+0x50>)
 80031ba:	68db      	ldr	r3, [r3, #12]
 80031bc:	1dba      	adds	r2, r7, #6
 80031be:	8812      	ldrh	r2, [r2, #0]
 80031c0:	4013      	ands	r3, r2
 80031c2:	d008      	beq.n	80031d6 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 80031c4:	4b0d      	ldr	r3, [pc, #52]	@ (80031fc <HAL_GPIO_EXTI_IRQHandler+0x50>)
 80031c6:	1dba      	adds	r2, r7, #6
 80031c8:	8812      	ldrh	r2, [r2, #0]
 80031ca:	60da      	str	r2, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 80031cc:	1dbb      	adds	r3, r7, #6
 80031ce:	881b      	ldrh	r3, [r3, #0]
 80031d0:	0018      	movs	r0, r3
 80031d2:	f000 f815 	bl	8003200 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0x00u)
 80031d6:	4b09      	ldr	r3, [pc, #36]	@ (80031fc <HAL_GPIO_EXTI_IRQHandler+0x50>)
 80031d8:	691b      	ldr	r3, [r3, #16]
 80031da:	1dba      	adds	r2, r7, #6
 80031dc:	8812      	ldrh	r2, [r2, #0]
 80031de:	4013      	ands	r3, r2
 80031e0:	d008      	beq.n	80031f4 <HAL_GPIO_EXTI_IRQHandler+0x48>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 80031e2:	4b06      	ldr	r3, [pc, #24]	@ (80031fc <HAL_GPIO_EXTI_IRQHandler+0x50>)
 80031e4:	1dba      	adds	r2, r7, #6
 80031e6:	8812      	ldrh	r2, [r2, #0]
 80031e8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 80031ea:	1dbb      	adds	r3, r7, #6
 80031ec:	881b      	ldrh	r3, [r3, #0]
 80031ee:	0018      	movs	r0, r3
 80031f0:	f7ff fae0 	bl	80027b4 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 80031f4:	46c0      	nop			@ (mov r8, r8)
 80031f6:	46bd      	mov	sp, r7
 80031f8:	b002      	add	sp, #8
 80031fa:	bd80      	pop	{r7, pc}
 80031fc:	40021800 	.word	0x40021800

08003200 <HAL_GPIO_EXTI_Rising_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 8003200:	b580      	push	{r7, lr}
 8003202:	b082      	sub	sp, #8
 8003204:	af00      	add	r7, sp, #0
 8003206:	0002      	movs	r2, r0
 8003208:	1dbb      	adds	r3, r7, #6
 800320a:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Rising_Callback could be implemented in the user file
   */
}
 800320c:	46c0      	nop			@ (mov r8, r8)
 800320e:	46bd      	mov	sp, r7
 8003210:	b002      	add	sp, #8
 8003212:	bd80      	pop	{r7, pc}

08003214 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003214:	b580      	push	{r7, lr}
 8003216:	b084      	sub	sp, #16
 8003218:	af00      	add	r7, sp, #0
 800321a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 800321c:	4b19      	ldr	r3, [pc, #100]	@ (8003284 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	4a19      	ldr	r2, [pc, #100]	@ (8003288 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8003222:	4013      	ands	r3, r2
 8003224:	0019      	movs	r1, r3
 8003226:	4b17      	ldr	r3, [pc, #92]	@ (8003284 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8003228:	687a      	ldr	r2, [r7, #4]
 800322a:	430a      	orrs	r2, r1
 800322c:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800322e:	687a      	ldr	r2, [r7, #4]
 8003230:	2380      	movs	r3, #128	@ 0x80
 8003232:	009b      	lsls	r3, r3, #2
 8003234:	429a      	cmp	r2, r3
 8003236:	d11f      	bne.n	8003278 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8003238:	4b14      	ldr	r3, [pc, #80]	@ (800328c <HAL_PWREx_ControlVoltageScaling+0x78>)
 800323a:	681a      	ldr	r2, [r3, #0]
 800323c:	0013      	movs	r3, r2
 800323e:	005b      	lsls	r3, r3, #1
 8003240:	189b      	adds	r3, r3, r2
 8003242:	005b      	lsls	r3, r3, #1
 8003244:	4912      	ldr	r1, [pc, #72]	@ (8003290 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8003246:	0018      	movs	r0, r3
 8003248:	f7fc ff5c 	bl	8000104 <__udivsi3>
 800324c:	0003      	movs	r3, r0
 800324e:	3301      	adds	r3, #1
 8003250:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003252:	e008      	b.n	8003266 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	2b00      	cmp	r3, #0
 8003258:	d003      	beq.n	8003262 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	3b01      	subs	r3, #1
 800325e:	60fb      	str	r3, [r7, #12]
 8003260:	e001      	b.n	8003266 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8003262:	2303      	movs	r3, #3
 8003264:	e009      	b.n	800327a <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003266:	4b07      	ldr	r3, [pc, #28]	@ (8003284 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8003268:	695a      	ldr	r2, [r3, #20]
 800326a:	2380      	movs	r3, #128	@ 0x80
 800326c:	00db      	lsls	r3, r3, #3
 800326e:	401a      	ands	r2, r3
 8003270:	2380      	movs	r3, #128	@ 0x80
 8003272:	00db      	lsls	r3, r3, #3
 8003274:	429a      	cmp	r2, r3
 8003276:	d0ed      	beq.n	8003254 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8003278:	2300      	movs	r3, #0
}
 800327a:	0018      	movs	r0, r3
 800327c:	46bd      	mov	sp, r7
 800327e:	b004      	add	sp, #16
 8003280:	bd80      	pop	{r7, pc}
 8003282:	46c0      	nop			@ (mov r8, r8)
 8003284:	40007000 	.word	0x40007000
 8003288:	fffff9ff 	.word	0xfffff9ff
 800328c:	20000000 	.word	0x20000000
 8003290:	000f4240 	.word	0x000f4240

08003294 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003294:	b580      	push	{r7, lr}
 8003296:	b088      	sub	sp, #32
 8003298:	af00      	add	r7, sp, #0
 800329a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d101      	bne.n	80032a6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80032a2:	2301      	movs	r3, #1
 80032a4:	e2fe      	b.n	80038a4 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	2201      	movs	r2, #1
 80032ac:	4013      	ands	r3, r2
 80032ae:	d100      	bne.n	80032b2 <HAL_RCC_OscConfig+0x1e>
 80032b0:	e07c      	b.n	80033ac <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80032b2:	4bc3      	ldr	r3, [pc, #780]	@ (80035c0 <HAL_RCC_OscConfig+0x32c>)
 80032b4:	689b      	ldr	r3, [r3, #8]
 80032b6:	2238      	movs	r2, #56	@ 0x38
 80032b8:	4013      	ands	r3, r2
 80032ba:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80032bc:	4bc0      	ldr	r3, [pc, #768]	@ (80035c0 <HAL_RCC_OscConfig+0x32c>)
 80032be:	68db      	ldr	r3, [r3, #12]
 80032c0:	2203      	movs	r2, #3
 80032c2:	4013      	ands	r3, r2
 80032c4:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 80032c6:	69bb      	ldr	r3, [r7, #24]
 80032c8:	2b10      	cmp	r3, #16
 80032ca:	d102      	bne.n	80032d2 <HAL_RCC_OscConfig+0x3e>
 80032cc:	697b      	ldr	r3, [r7, #20]
 80032ce:	2b03      	cmp	r3, #3
 80032d0:	d002      	beq.n	80032d8 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 80032d2:	69bb      	ldr	r3, [r7, #24]
 80032d4:	2b08      	cmp	r3, #8
 80032d6:	d10b      	bne.n	80032f0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032d8:	4bb9      	ldr	r3, [pc, #740]	@ (80035c0 <HAL_RCC_OscConfig+0x32c>)
 80032da:	681a      	ldr	r2, [r3, #0]
 80032dc:	2380      	movs	r3, #128	@ 0x80
 80032de:	029b      	lsls	r3, r3, #10
 80032e0:	4013      	ands	r3, r2
 80032e2:	d062      	beq.n	80033aa <HAL_RCC_OscConfig+0x116>
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	685b      	ldr	r3, [r3, #4]
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d15e      	bne.n	80033aa <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 80032ec:	2301      	movs	r3, #1
 80032ee:	e2d9      	b.n	80038a4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	685a      	ldr	r2, [r3, #4]
 80032f4:	2380      	movs	r3, #128	@ 0x80
 80032f6:	025b      	lsls	r3, r3, #9
 80032f8:	429a      	cmp	r2, r3
 80032fa:	d107      	bne.n	800330c <HAL_RCC_OscConfig+0x78>
 80032fc:	4bb0      	ldr	r3, [pc, #704]	@ (80035c0 <HAL_RCC_OscConfig+0x32c>)
 80032fe:	681a      	ldr	r2, [r3, #0]
 8003300:	4baf      	ldr	r3, [pc, #700]	@ (80035c0 <HAL_RCC_OscConfig+0x32c>)
 8003302:	2180      	movs	r1, #128	@ 0x80
 8003304:	0249      	lsls	r1, r1, #9
 8003306:	430a      	orrs	r2, r1
 8003308:	601a      	str	r2, [r3, #0]
 800330a:	e020      	b.n	800334e <HAL_RCC_OscConfig+0xba>
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	685a      	ldr	r2, [r3, #4]
 8003310:	23a0      	movs	r3, #160	@ 0xa0
 8003312:	02db      	lsls	r3, r3, #11
 8003314:	429a      	cmp	r2, r3
 8003316:	d10e      	bne.n	8003336 <HAL_RCC_OscConfig+0xa2>
 8003318:	4ba9      	ldr	r3, [pc, #676]	@ (80035c0 <HAL_RCC_OscConfig+0x32c>)
 800331a:	681a      	ldr	r2, [r3, #0]
 800331c:	4ba8      	ldr	r3, [pc, #672]	@ (80035c0 <HAL_RCC_OscConfig+0x32c>)
 800331e:	2180      	movs	r1, #128	@ 0x80
 8003320:	02c9      	lsls	r1, r1, #11
 8003322:	430a      	orrs	r2, r1
 8003324:	601a      	str	r2, [r3, #0]
 8003326:	4ba6      	ldr	r3, [pc, #664]	@ (80035c0 <HAL_RCC_OscConfig+0x32c>)
 8003328:	681a      	ldr	r2, [r3, #0]
 800332a:	4ba5      	ldr	r3, [pc, #660]	@ (80035c0 <HAL_RCC_OscConfig+0x32c>)
 800332c:	2180      	movs	r1, #128	@ 0x80
 800332e:	0249      	lsls	r1, r1, #9
 8003330:	430a      	orrs	r2, r1
 8003332:	601a      	str	r2, [r3, #0]
 8003334:	e00b      	b.n	800334e <HAL_RCC_OscConfig+0xba>
 8003336:	4ba2      	ldr	r3, [pc, #648]	@ (80035c0 <HAL_RCC_OscConfig+0x32c>)
 8003338:	681a      	ldr	r2, [r3, #0]
 800333a:	4ba1      	ldr	r3, [pc, #644]	@ (80035c0 <HAL_RCC_OscConfig+0x32c>)
 800333c:	49a1      	ldr	r1, [pc, #644]	@ (80035c4 <HAL_RCC_OscConfig+0x330>)
 800333e:	400a      	ands	r2, r1
 8003340:	601a      	str	r2, [r3, #0]
 8003342:	4b9f      	ldr	r3, [pc, #636]	@ (80035c0 <HAL_RCC_OscConfig+0x32c>)
 8003344:	681a      	ldr	r2, [r3, #0]
 8003346:	4b9e      	ldr	r3, [pc, #632]	@ (80035c0 <HAL_RCC_OscConfig+0x32c>)
 8003348:	499f      	ldr	r1, [pc, #636]	@ (80035c8 <HAL_RCC_OscConfig+0x334>)
 800334a:	400a      	ands	r2, r1
 800334c:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	685b      	ldr	r3, [r3, #4]
 8003352:	2b00      	cmp	r3, #0
 8003354:	d014      	beq.n	8003380 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003356:	f7ff fc9b 	bl	8002c90 <HAL_GetTick>
 800335a:	0003      	movs	r3, r0
 800335c:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800335e:	e008      	b.n	8003372 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003360:	f7ff fc96 	bl	8002c90 <HAL_GetTick>
 8003364:	0002      	movs	r2, r0
 8003366:	693b      	ldr	r3, [r7, #16]
 8003368:	1ad3      	subs	r3, r2, r3
 800336a:	2b64      	cmp	r3, #100	@ 0x64
 800336c:	d901      	bls.n	8003372 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 800336e:	2303      	movs	r3, #3
 8003370:	e298      	b.n	80038a4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003372:	4b93      	ldr	r3, [pc, #588]	@ (80035c0 <HAL_RCC_OscConfig+0x32c>)
 8003374:	681a      	ldr	r2, [r3, #0]
 8003376:	2380      	movs	r3, #128	@ 0x80
 8003378:	029b      	lsls	r3, r3, #10
 800337a:	4013      	ands	r3, r2
 800337c:	d0f0      	beq.n	8003360 <HAL_RCC_OscConfig+0xcc>
 800337e:	e015      	b.n	80033ac <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003380:	f7ff fc86 	bl	8002c90 <HAL_GetTick>
 8003384:	0003      	movs	r3, r0
 8003386:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003388:	e008      	b.n	800339c <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800338a:	f7ff fc81 	bl	8002c90 <HAL_GetTick>
 800338e:	0002      	movs	r2, r0
 8003390:	693b      	ldr	r3, [r7, #16]
 8003392:	1ad3      	subs	r3, r2, r3
 8003394:	2b64      	cmp	r3, #100	@ 0x64
 8003396:	d901      	bls.n	800339c <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8003398:	2303      	movs	r3, #3
 800339a:	e283      	b.n	80038a4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800339c:	4b88      	ldr	r3, [pc, #544]	@ (80035c0 <HAL_RCC_OscConfig+0x32c>)
 800339e:	681a      	ldr	r2, [r3, #0]
 80033a0:	2380      	movs	r3, #128	@ 0x80
 80033a2:	029b      	lsls	r3, r3, #10
 80033a4:	4013      	ands	r3, r2
 80033a6:	d1f0      	bne.n	800338a <HAL_RCC_OscConfig+0xf6>
 80033a8:	e000      	b.n	80033ac <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033aa:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	2202      	movs	r2, #2
 80033b2:	4013      	ands	r3, r2
 80033b4:	d100      	bne.n	80033b8 <HAL_RCC_OscConfig+0x124>
 80033b6:	e099      	b.n	80034ec <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80033b8:	4b81      	ldr	r3, [pc, #516]	@ (80035c0 <HAL_RCC_OscConfig+0x32c>)
 80033ba:	689b      	ldr	r3, [r3, #8]
 80033bc:	2238      	movs	r2, #56	@ 0x38
 80033be:	4013      	ands	r3, r2
 80033c0:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80033c2:	4b7f      	ldr	r3, [pc, #508]	@ (80035c0 <HAL_RCC_OscConfig+0x32c>)
 80033c4:	68db      	ldr	r3, [r3, #12]
 80033c6:	2203      	movs	r2, #3
 80033c8:	4013      	ands	r3, r2
 80033ca:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 80033cc:	69bb      	ldr	r3, [r7, #24]
 80033ce:	2b10      	cmp	r3, #16
 80033d0:	d102      	bne.n	80033d8 <HAL_RCC_OscConfig+0x144>
 80033d2:	697b      	ldr	r3, [r7, #20]
 80033d4:	2b02      	cmp	r3, #2
 80033d6:	d002      	beq.n	80033de <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 80033d8:	69bb      	ldr	r3, [r7, #24]
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d135      	bne.n	800344a <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80033de:	4b78      	ldr	r3, [pc, #480]	@ (80035c0 <HAL_RCC_OscConfig+0x32c>)
 80033e0:	681a      	ldr	r2, [r3, #0]
 80033e2:	2380      	movs	r3, #128	@ 0x80
 80033e4:	00db      	lsls	r3, r3, #3
 80033e6:	4013      	ands	r3, r2
 80033e8:	d005      	beq.n	80033f6 <HAL_RCC_OscConfig+0x162>
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	68db      	ldr	r3, [r3, #12]
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d101      	bne.n	80033f6 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 80033f2:	2301      	movs	r3, #1
 80033f4:	e256      	b.n	80038a4 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033f6:	4b72      	ldr	r3, [pc, #456]	@ (80035c0 <HAL_RCC_OscConfig+0x32c>)
 80033f8:	685b      	ldr	r3, [r3, #4]
 80033fa:	4a74      	ldr	r2, [pc, #464]	@ (80035cc <HAL_RCC_OscConfig+0x338>)
 80033fc:	4013      	ands	r3, r2
 80033fe:	0019      	movs	r1, r3
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	695b      	ldr	r3, [r3, #20]
 8003404:	021a      	lsls	r2, r3, #8
 8003406:	4b6e      	ldr	r3, [pc, #440]	@ (80035c0 <HAL_RCC_OscConfig+0x32c>)
 8003408:	430a      	orrs	r2, r1
 800340a:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 800340c:	69bb      	ldr	r3, [r7, #24]
 800340e:	2b00      	cmp	r3, #0
 8003410:	d112      	bne.n	8003438 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8003412:	4b6b      	ldr	r3, [pc, #428]	@ (80035c0 <HAL_RCC_OscConfig+0x32c>)
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	4a6e      	ldr	r2, [pc, #440]	@ (80035d0 <HAL_RCC_OscConfig+0x33c>)
 8003418:	4013      	ands	r3, r2
 800341a:	0019      	movs	r1, r3
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	691a      	ldr	r2, [r3, #16]
 8003420:	4b67      	ldr	r3, [pc, #412]	@ (80035c0 <HAL_RCC_OscConfig+0x32c>)
 8003422:	430a      	orrs	r2, r1
 8003424:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8003426:	4b66      	ldr	r3, [pc, #408]	@ (80035c0 <HAL_RCC_OscConfig+0x32c>)
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	0adb      	lsrs	r3, r3, #11
 800342c:	2207      	movs	r2, #7
 800342e:	4013      	ands	r3, r2
 8003430:	4a68      	ldr	r2, [pc, #416]	@ (80035d4 <HAL_RCC_OscConfig+0x340>)
 8003432:	40da      	lsrs	r2, r3
 8003434:	4b68      	ldr	r3, [pc, #416]	@ (80035d8 <HAL_RCC_OscConfig+0x344>)
 8003436:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003438:	4b68      	ldr	r3, [pc, #416]	@ (80035dc <HAL_RCC_OscConfig+0x348>)
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	0018      	movs	r0, r3
 800343e:	f7ff fbcb 	bl	8002bd8 <HAL_InitTick>
 8003442:	1e03      	subs	r3, r0, #0
 8003444:	d051      	beq.n	80034ea <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8003446:	2301      	movs	r3, #1
 8003448:	e22c      	b.n	80038a4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	68db      	ldr	r3, [r3, #12]
 800344e:	2b00      	cmp	r3, #0
 8003450:	d030      	beq.n	80034b4 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8003452:	4b5b      	ldr	r3, [pc, #364]	@ (80035c0 <HAL_RCC_OscConfig+0x32c>)
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	4a5e      	ldr	r2, [pc, #376]	@ (80035d0 <HAL_RCC_OscConfig+0x33c>)
 8003458:	4013      	ands	r3, r2
 800345a:	0019      	movs	r1, r3
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	691a      	ldr	r2, [r3, #16]
 8003460:	4b57      	ldr	r3, [pc, #348]	@ (80035c0 <HAL_RCC_OscConfig+0x32c>)
 8003462:	430a      	orrs	r2, r1
 8003464:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8003466:	4b56      	ldr	r3, [pc, #344]	@ (80035c0 <HAL_RCC_OscConfig+0x32c>)
 8003468:	681a      	ldr	r2, [r3, #0]
 800346a:	4b55      	ldr	r3, [pc, #340]	@ (80035c0 <HAL_RCC_OscConfig+0x32c>)
 800346c:	2180      	movs	r1, #128	@ 0x80
 800346e:	0049      	lsls	r1, r1, #1
 8003470:	430a      	orrs	r2, r1
 8003472:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003474:	f7ff fc0c 	bl	8002c90 <HAL_GetTick>
 8003478:	0003      	movs	r3, r0
 800347a:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800347c:	e008      	b.n	8003490 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800347e:	f7ff fc07 	bl	8002c90 <HAL_GetTick>
 8003482:	0002      	movs	r2, r0
 8003484:	693b      	ldr	r3, [r7, #16]
 8003486:	1ad3      	subs	r3, r2, r3
 8003488:	2b02      	cmp	r3, #2
 800348a:	d901      	bls.n	8003490 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 800348c:	2303      	movs	r3, #3
 800348e:	e209      	b.n	80038a4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003490:	4b4b      	ldr	r3, [pc, #300]	@ (80035c0 <HAL_RCC_OscConfig+0x32c>)
 8003492:	681a      	ldr	r2, [r3, #0]
 8003494:	2380      	movs	r3, #128	@ 0x80
 8003496:	00db      	lsls	r3, r3, #3
 8003498:	4013      	ands	r3, r2
 800349a:	d0f0      	beq.n	800347e <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800349c:	4b48      	ldr	r3, [pc, #288]	@ (80035c0 <HAL_RCC_OscConfig+0x32c>)
 800349e:	685b      	ldr	r3, [r3, #4]
 80034a0:	4a4a      	ldr	r2, [pc, #296]	@ (80035cc <HAL_RCC_OscConfig+0x338>)
 80034a2:	4013      	ands	r3, r2
 80034a4:	0019      	movs	r1, r3
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	695b      	ldr	r3, [r3, #20]
 80034aa:	021a      	lsls	r2, r3, #8
 80034ac:	4b44      	ldr	r3, [pc, #272]	@ (80035c0 <HAL_RCC_OscConfig+0x32c>)
 80034ae:	430a      	orrs	r2, r1
 80034b0:	605a      	str	r2, [r3, #4]
 80034b2:	e01b      	b.n	80034ec <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 80034b4:	4b42      	ldr	r3, [pc, #264]	@ (80035c0 <HAL_RCC_OscConfig+0x32c>)
 80034b6:	681a      	ldr	r2, [r3, #0]
 80034b8:	4b41      	ldr	r3, [pc, #260]	@ (80035c0 <HAL_RCC_OscConfig+0x32c>)
 80034ba:	4949      	ldr	r1, [pc, #292]	@ (80035e0 <HAL_RCC_OscConfig+0x34c>)
 80034bc:	400a      	ands	r2, r1
 80034be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034c0:	f7ff fbe6 	bl	8002c90 <HAL_GetTick>
 80034c4:	0003      	movs	r3, r0
 80034c6:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80034c8:	e008      	b.n	80034dc <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80034ca:	f7ff fbe1 	bl	8002c90 <HAL_GetTick>
 80034ce:	0002      	movs	r2, r0
 80034d0:	693b      	ldr	r3, [r7, #16]
 80034d2:	1ad3      	subs	r3, r2, r3
 80034d4:	2b02      	cmp	r3, #2
 80034d6:	d901      	bls.n	80034dc <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 80034d8:	2303      	movs	r3, #3
 80034da:	e1e3      	b.n	80038a4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80034dc:	4b38      	ldr	r3, [pc, #224]	@ (80035c0 <HAL_RCC_OscConfig+0x32c>)
 80034de:	681a      	ldr	r2, [r3, #0]
 80034e0:	2380      	movs	r3, #128	@ 0x80
 80034e2:	00db      	lsls	r3, r3, #3
 80034e4:	4013      	ands	r3, r2
 80034e6:	d1f0      	bne.n	80034ca <HAL_RCC_OscConfig+0x236>
 80034e8:	e000      	b.n	80034ec <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80034ea:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	2208      	movs	r2, #8
 80034f2:	4013      	ands	r3, r2
 80034f4:	d047      	beq.n	8003586 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80034f6:	4b32      	ldr	r3, [pc, #200]	@ (80035c0 <HAL_RCC_OscConfig+0x32c>)
 80034f8:	689b      	ldr	r3, [r3, #8]
 80034fa:	2238      	movs	r2, #56	@ 0x38
 80034fc:	4013      	ands	r3, r2
 80034fe:	2b18      	cmp	r3, #24
 8003500:	d10a      	bne.n	8003518 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8003502:	4b2f      	ldr	r3, [pc, #188]	@ (80035c0 <HAL_RCC_OscConfig+0x32c>)
 8003504:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003506:	2202      	movs	r2, #2
 8003508:	4013      	ands	r3, r2
 800350a:	d03c      	beq.n	8003586 <HAL_RCC_OscConfig+0x2f2>
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	699b      	ldr	r3, [r3, #24]
 8003510:	2b00      	cmp	r3, #0
 8003512:	d138      	bne.n	8003586 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8003514:	2301      	movs	r3, #1
 8003516:	e1c5      	b.n	80038a4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	699b      	ldr	r3, [r3, #24]
 800351c:	2b00      	cmp	r3, #0
 800351e:	d019      	beq.n	8003554 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8003520:	4b27      	ldr	r3, [pc, #156]	@ (80035c0 <HAL_RCC_OscConfig+0x32c>)
 8003522:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003524:	4b26      	ldr	r3, [pc, #152]	@ (80035c0 <HAL_RCC_OscConfig+0x32c>)
 8003526:	2101      	movs	r1, #1
 8003528:	430a      	orrs	r2, r1
 800352a:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800352c:	f7ff fbb0 	bl	8002c90 <HAL_GetTick>
 8003530:	0003      	movs	r3, r0
 8003532:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003534:	e008      	b.n	8003548 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003536:	f7ff fbab 	bl	8002c90 <HAL_GetTick>
 800353a:	0002      	movs	r2, r0
 800353c:	693b      	ldr	r3, [r7, #16]
 800353e:	1ad3      	subs	r3, r2, r3
 8003540:	2b02      	cmp	r3, #2
 8003542:	d901      	bls.n	8003548 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8003544:	2303      	movs	r3, #3
 8003546:	e1ad      	b.n	80038a4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003548:	4b1d      	ldr	r3, [pc, #116]	@ (80035c0 <HAL_RCC_OscConfig+0x32c>)
 800354a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800354c:	2202      	movs	r2, #2
 800354e:	4013      	ands	r3, r2
 8003550:	d0f1      	beq.n	8003536 <HAL_RCC_OscConfig+0x2a2>
 8003552:	e018      	b.n	8003586 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8003554:	4b1a      	ldr	r3, [pc, #104]	@ (80035c0 <HAL_RCC_OscConfig+0x32c>)
 8003556:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003558:	4b19      	ldr	r3, [pc, #100]	@ (80035c0 <HAL_RCC_OscConfig+0x32c>)
 800355a:	2101      	movs	r1, #1
 800355c:	438a      	bics	r2, r1
 800355e:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003560:	f7ff fb96 	bl	8002c90 <HAL_GetTick>
 8003564:	0003      	movs	r3, r0
 8003566:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003568:	e008      	b.n	800357c <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800356a:	f7ff fb91 	bl	8002c90 <HAL_GetTick>
 800356e:	0002      	movs	r2, r0
 8003570:	693b      	ldr	r3, [r7, #16]
 8003572:	1ad3      	subs	r3, r2, r3
 8003574:	2b02      	cmp	r3, #2
 8003576:	d901      	bls.n	800357c <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8003578:	2303      	movs	r3, #3
 800357a:	e193      	b.n	80038a4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800357c:	4b10      	ldr	r3, [pc, #64]	@ (80035c0 <HAL_RCC_OscConfig+0x32c>)
 800357e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003580:	2202      	movs	r2, #2
 8003582:	4013      	ands	r3, r2
 8003584:	d1f1      	bne.n	800356a <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	2204      	movs	r2, #4
 800358c:	4013      	ands	r3, r2
 800358e:	d100      	bne.n	8003592 <HAL_RCC_OscConfig+0x2fe>
 8003590:	e0c6      	b.n	8003720 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003592:	231f      	movs	r3, #31
 8003594:	18fb      	adds	r3, r7, r3
 8003596:	2200      	movs	r2, #0
 8003598:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800359a:	4b09      	ldr	r3, [pc, #36]	@ (80035c0 <HAL_RCC_OscConfig+0x32c>)
 800359c:	689b      	ldr	r3, [r3, #8]
 800359e:	2238      	movs	r2, #56	@ 0x38
 80035a0:	4013      	ands	r3, r2
 80035a2:	2b20      	cmp	r3, #32
 80035a4:	d11e      	bne.n	80035e4 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 80035a6:	4b06      	ldr	r3, [pc, #24]	@ (80035c0 <HAL_RCC_OscConfig+0x32c>)
 80035a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80035aa:	2202      	movs	r2, #2
 80035ac:	4013      	ands	r3, r2
 80035ae:	d100      	bne.n	80035b2 <HAL_RCC_OscConfig+0x31e>
 80035b0:	e0b6      	b.n	8003720 <HAL_RCC_OscConfig+0x48c>
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	689b      	ldr	r3, [r3, #8]
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d000      	beq.n	80035bc <HAL_RCC_OscConfig+0x328>
 80035ba:	e0b1      	b.n	8003720 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 80035bc:	2301      	movs	r3, #1
 80035be:	e171      	b.n	80038a4 <HAL_RCC_OscConfig+0x610>
 80035c0:	40021000 	.word	0x40021000
 80035c4:	fffeffff 	.word	0xfffeffff
 80035c8:	fffbffff 	.word	0xfffbffff
 80035cc:	ffff80ff 	.word	0xffff80ff
 80035d0:	ffffc7ff 	.word	0xffffc7ff
 80035d4:	00f42400 	.word	0x00f42400
 80035d8:	20000000 	.word	0x20000000
 80035dc:	20000004 	.word	0x20000004
 80035e0:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80035e4:	4bb1      	ldr	r3, [pc, #708]	@ (80038ac <HAL_RCC_OscConfig+0x618>)
 80035e6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80035e8:	2380      	movs	r3, #128	@ 0x80
 80035ea:	055b      	lsls	r3, r3, #21
 80035ec:	4013      	ands	r3, r2
 80035ee:	d101      	bne.n	80035f4 <HAL_RCC_OscConfig+0x360>
 80035f0:	2301      	movs	r3, #1
 80035f2:	e000      	b.n	80035f6 <HAL_RCC_OscConfig+0x362>
 80035f4:	2300      	movs	r3, #0
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d011      	beq.n	800361e <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 80035fa:	4bac      	ldr	r3, [pc, #688]	@ (80038ac <HAL_RCC_OscConfig+0x618>)
 80035fc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80035fe:	4bab      	ldr	r3, [pc, #684]	@ (80038ac <HAL_RCC_OscConfig+0x618>)
 8003600:	2180      	movs	r1, #128	@ 0x80
 8003602:	0549      	lsls	r1, r1, #21
 8003604:	430a      	orrs	r2, r1
 8003606:	63da      	str	r2, [r3, #60]	@ 0x3c
 8003608:	4ba8      	ldr	r3, [pc, #672]	@ (80038ac <HAL_RCC_OscConfig+0x618>)
 800360a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800360c:	2380      	movs	r3, #128	@ 0x80
 800360e:	055b      	lsls	r3, r3, #21
 8003610:	4013      	ands	r3, r2
 8003612:	60fb      	str	r3, [r7, #12]
 8003614:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8003616:	231f      	movs	r3, #31
 8003618:	18fb      	adds	r3, r7, r3
 800361a:	2201      	movs	r2, #1
 800361c:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800361e:	4ba4      	ldr	r3, [pc, #656]	@ (80038b0 <HAL_RCC_OscConfig+0x61c>)
 8003620:	681a      	ldr	r2, [r3, #0]
 8003622:	2380      	movs	r3, #128	@ 0x80
 8003624:	005b      	lsls	r3, r3, #1
 8003626:	4013      	ands	r3, r2
 8003628:	d11a      	bne.n	8003660 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800362a:	4ba1      	ldr	r3, [pc, #644]	@ (80038b0 <HAL_RCC_OscConfig+0x61c>)
 800362c:	681a      	ldr	r2, [r3, #0]
 800362e:	4ba0      	ldr	r3, [pc, #640]	@ (80038b0 <HAL_RCC_OscConfig+0x61c>)
 8003630:	2180      	movs	r1, #128	@ 0x80
 8003632:	0049      	lsls	r1, r1, #1
 8003634:	430a      	orrs	r2, r1
 8003636:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8003638:	f7ff fb2a 	bl	8002c90 <HAL_GetTick>
 800363c:	0003      	movs	r3, r0
 800363e:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003640:	e008      	b.n	8003654 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003642:	f7ff fb25 	bl	8002c90 <HAL_GetTick>
 8003646:	0002      	movs	r2, r0
 8003648:	693b      	ldr	r3, [r7, #16]
 800364a:	1ad3      	subs	r3, r2, r3
 800364c:	2b02      	cmp	r3, #2
 800364e:	d901      	bls.n	8003654 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8003650:	2303      	movs	r3, #3
 8003652:	e127      	b.n	80038a4 <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003654:	4b96      	ldr	r3, [pc, #600]	@ (80038b0 <HAL_RCC_OscConfig+0x61c>)
 8003656:	681a      	ldr	r2, [r3, #0]
 8003658:	2380      	movs	r3, #128	@ 0x80
 800365a:	005b      	lsls	r3, r3, #1
 800365c:	4013      	ands	r3, r2
 800365e:	d0f0      	beq.n	8003642 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	689b      	ldr	r3, [r3, #8]
 8003664:	2b01      	cmp	r3, #1
 8003666:	d106      	bne.n	8003676 <HAL_RCC_OscConfig+0x3e2>
 8003668:	4b90      	ldr	r3, [pc, #576]	@ (80038ac <HAL_RCC_OscConfig+0x618>)
 800366a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800366c:	4b8f      	ldr	r3, [pc, #572]	@ (80038ac <HAL_RCC_OscConfig+0x618>)
 800366e:	2101      	movs	r1, #1
 8003670:	430a      	orrs	r2, r1
 8003672:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003674:	e01c      	b.n	80036b0 <HAL_RCC_OscConfig+0x41c>
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	689b      	ldr	r3, [r3, #8]
 800367a:	2b05      	cmp	r3, #5
 800367c:	d10c      	bne.n	8003698 <HAL_RCC_OscConfig+0x404>
 800367e:	4b8b      	ldr	r3, [pc, #556]	@ (80038ac <HAL_RCC_OscConfig+0x618>)
 8003680:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003682:	4b8a      	ldr	r3, [pc, #552]	@ (80038ac <HAL_RCC_OscConfig+0x618>)
 8003684:	2104      	movs	r1, #4
 8003686:	430a      	orrs	r2, r1
 8003688:	65da      	str	r2, [r3, #92]	@ 0x5c
 800368a:	4b88      	ldr	r3, [pc, #544]	@ (80038ac <HAL_RCC_OscConfig+0x618>)
 800368c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800368e:	4b87      	ldr	r3, [pc, #540]	@ (80038ac <HAL_RCC_OscConfig+0x618>)
 8003690:	2101      	movs	r1, #1
 8003692:	430a      	orrs	r2, r1
 8003694:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003696:	e00b      	b.n	80036b0 <HAL_RCC_OscConfig+0x41c>
 8003698:	4b84      	ldr	r3, [pc, #528]	@ (80038ac <HAL_RCC_OscConfig+0x618>)
 800369a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800369c:	4b83      	ldr	r3, [pc, #524]	@ (80038ac <HAL_RCC_OscConfig+0x618>)
 800369e:	2101      	movs	r1, #1
 80036a0:	438a      	bics	r2, r1
 80036a2:	65da      	str	r2, [r3, #92]	@ 0x5c
 80036a4:	4b81      	ldr	r3, [pc, #516]	@ (80038ac <HAL_RCC_OscConfig+0x618>)
 80036a6:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80036a8:	4b80      	ldr	r3, [pc, #512]	@ (80038ac <HAL_RCC_OscConfig+0x618>)
 80036aa:	2104      	movs	r1, #4
 80036ac:	438a      	bics	r2, r1
 80036ae:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	689b      	ldr	r3, [r3, #8]
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d014      	beq.n	80036e2 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036b8:	f7ff faea 	bl	8002c90 <HAL_GetTick>
 80036bc:	0003      	movs	r3, r0
 80036be:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80036c0:	e009      	b.n	80036d6 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036c2:	f7ff fae5 	bl	8002c90 <HAL_GetTick>
 80036c6:	0002      	movs	r2, r0
 80036c8:	693b      	ldr	r3, [r7, #16]
 80036ca:	1ad3      	subs	r3, r2, r3
 80036cc:	4a79      	ldr	r2, [pc, #484]	@ (80038b4 <HAL_RCC_OscConfig+0x620>)
 80036ce:	4293      	cmp	r3, r2
 80036d0:	d901      	bls.n	80036d6 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 80036d2:	2303      	movs	r3, #3
 80036d4:	e0e6      	b.n	80038a4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80036d6:	4b75      	ldr	r3, [pc, #468]	@ (80038ac <HAL_RCC_OscConfig+0x618>)
 80036d8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036da:	2202      	movs	r2, #2
 80036dc:	4013      	ands	r3, r2
 80036de:	d0f0      	beq.n	80036c2 <HAL_RCC_OscConfig+0x42e>
 80036e0:	e013      	b.n	800370a <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036e2:	f7ff fad5 	bl	8002c90 <HAL_GetTick>
 80036e6:	0003      	movs	r3, r0
 80036e8:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80036ea:	e009      	b.n	8003700 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036ec:	f7ff fad0 	bl	8002c90 <HAL_GetTick>
 80036f0:	0002      	movs	r2, r0
 80036f2:	693b      	ldr	r3, [r7, #16]
 80036f4:	1ad3      	subs	r3, r2, r3
 80036f6:	4a6f      	ldr	r2, [pc, #444]	@ (80038b4 <HAL_RCC_OscConfig+0x620>)
 80036f8:	4293      	cmp	r3, r2
 80036fa:	d901      	bls.n	8003700 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 80036fc:	2303      	movs	r3, #3
 80036fe:	e0d1      	b.n	80038a4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003700:	4b6a      	ldr	r3, [pc, #424]	@ (80038ac <HAL_RCC_OscConfig+0x618>)
 8003702:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003704:	2202      	movs	r2, #2
 8003706:	4013      	ands	r3, r2
 8003708:	d1f0      	bne.n	80036ec <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 800370a:	231f      	movs	r3, #31
 800370c:	18fb      	adds	r3, r7, r3
 800370e:	781b      	ldrb	r3, [r3, #0]
 8003710:	2b01      	cmp	r3, #1
 8003712:	d105      	bne.n	8003720 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8003714:	4b65      	ldr	r3, [pc, #404]	@ (80038ac <HAL_RCC_OscConfig+0x618>)
 8003716:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003718:	4b64      	ldr	r3, [pc, #400]	@ (80038ac <HAL_RCC_OscConfig+0x618>)
 800371a:	4967      	ldr	r1, [pc, #412]	@ (80038b8 <HAL_RCC_OscConfig+0x624>)
 800371c:	400a      	ands	r2, r1
 800371e:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	69db      	ldr	r3, [r3, #28]
 8003724:	2b00      	cmp	r3, #0
 8003726:	d100      	bne.n	800372a <HAL_RCC_OscConfig+0x496>
 8003728:	e0bb      	b.n	80038a2 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800372a:	4b60      	ldr	r3, [pc, #384]	@ (80038ac <HAL_RCC_OscConfig+0x618>)
 800372c:	689b      	ldr	r3, [r3, #8]
 800372e:	2238      	movs	r2, #56	@ 0x38
 8003730:	4013      	ands	r3, r2
 8003732:	2b10      	cmp	r3, #16
 8003734:	d100      	bne.n	8003738 <HAL_RCC_OscConfig+0x4a4>
 8003736:	e07b      	b.n	8003830 <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	69db      	ldr	r3, [r3, #28]
 800373c:	2b02      	cmp	r3, #2
 800373e:	d156      	bne.n	80037ee <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003740:	4b5a      	ldr	r3, [pc, #360]	@ (80038ac <HAL_RCC_OscConfig+0x618>)
 8003742:	681a      	ldr	r2, [r3, #0]
 8003744:	4b59      	ldr	r3, [pc, #356]	@ (80038ac <HAL_RCC_OscConfig+0x618>)
 8003746:	495d      	ldr	r1, [pc, #372]	@ (80038bc <HAL_RCC_OscConfig+0x628>)
 8003748:	400a      	ands	r2, r1
 800374a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800374c:	f7ff faa0 	bl	8002c90 <HAL_GetTick>
 8003750:	0003      	movs	r3, r0
 8003752:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003754:	e008      	b.n	8003768 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003756:	f7ff fa9b 	bl	8002c90 <HAL_GetTick>
 800375a:	0002      	movs	r2, r0
 800375c:	693b      	ldr	r3, [r7, #16]
 800375e:	1ad3      	subs	r3, r2, r3
 8003760:	2b02      	cmp	r3, #2
 8003762:	d901      	bls.n	8003768 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8003764:	2303      	movs	r3, #3
 8003766:	e09d      	b.n	80038a4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003768:	4b50      	ldr	r3, [pc, #320]	@ (80038ac <HAL_RCC_OscConfig+0x618>)
 800376a:	681a      	ldr	r2, [r3, #0]
 800376c:	2380      	movs	r3, #128	@ 0x80
 800376e:	049b      	lsls	r3, r3, #18
 8003770:	4013      	ands	r3, r2
 8003772:	d1f0      	bne.n	8003756 <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003774:	4b4d      	ldr	r3, [pc, #308]	@ (80038ac <HAL_RCC_OscConfig+0x618>)
 8003776:	68db      	ldr	r3, [r3, #12]
 8003778:	4a51      	ldr	r2, [pc, #324]	@ (80038c0 <HAL_RCC_OscConfig+0x62c>)
 800377a:	4013      	ands	r3, r2
 800377c:	0019      	movs	r1, r3
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	6a1a      	ldr	r2, [r3, #32]
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003786:	431a      	orrs	r2, r3
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800378c:	021b      	lsls	r3, r3, #8
 800378e:	431a      	orrs	r2, r3
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003794:	431a      	orrs	r2, r3
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800379a:	431a      	orrs	r2, r3
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80037a0:	431a      	orrs	r2, r3
 80037a2:	4b42      	ldr	r3, [pc, #264]	@ (80038ac <HAL_RCC_OscConfig+0x618>)
 80037a4:	430a      	orrs	r2, r1
 80037a6:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80037a8:	4b40      	ldr	r3, [pc, #256]	@ (80038ac <HAL_RCC_OscConfig+0x618>)
 80037aa:	681a      	ldr	r2, [r3, #0]
 80037ac:	4b3f      	ldr	r3, [pc, #252]	@ (80038ac <HAL_RCC_OscConfig+0x618>)
 80037ae:	2180      	movs	r1, #128	@ 0x80
 80037b0:	0449      	lsls	r1, r1, #17
 80037b2:	430a      	orrs	r2, r1
 80037b4:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 80037b6:	4b3d      	ldr	r3, [pc, #244]	@ (80038ac <HAL_RCC_OscConfig+0x618>)
 80037b8:	68da      	ldr	r2, [r3, #12]
 80037ba:	4b3c      	ldr	r3, [pc, #240]	@ (80038ac <HAL_RCC_OscConfig+0x618>)
 80037bc:	2180      	movs	r1, #128	@ 0x80
 80037be:	0549      	lsls	r1, r1, #21
 80037c0:	430a      	orrs	r2, r1
 80037c2:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037c4:	f7ff fa64 	bl	8002c90 <HAL_GetTick>
 80037c8:	0003      	movs	r3, r0
 80037ca:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80037cc:	e008      	b.n	80037e0 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037ce:	f7ff fa5f 	bl	8002c90 <HAL_GetTick>
 80037d2:	0002      	movs	r2, r0
 80037d4:	693b      	ldr	r3, [r7, #16]
 80037d6:	1ad3      	subs	r3, r2, r3
 80037d8:	2b02      	cmp	r3, #2
 80037da:	d901      	bls.n	80037e0 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 80037dc:	2303      	movs	r3, #3
 80037de:	e061      	b.n	80038a4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80037e0:	4b32      	ldr	r3, [pc, #200]	@ (80038ac <HAL_RCC_OscConfig+0x618>)
 80037e2:	681a      	ldr	r2, [r3, #0]
 80037e4:	2380      	movs	r3, #128	@ 0x80
 80037e6:	049b      	lsls	r3, r3, #18
 80037e8:	4013      	ands	r3, r2
 80037ea:	d0f0      	beq.n	80037ce <HAL_RCC_OscConfig+0x53a>
 80037ec:	e059      	b.n	80038a2 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037ee:	4b2f      	ldr	r3, [pc, #188]	@ (80038ac <HAL_RCC_OscConfig+0x618>)
 80037f0:	681a      	ldr	r2, [r3, #0]
 80037f2:	4b2e      	ldr	r3, [pc, #184]	@ (80038ac <HAL_RCC_OscConfig+0x618>)
 80037f4:	4931      	ldr	r1, [pc, #196]	@ (80038bc <HAL_RCC_OscConfig+0x628>)
 80037f6:	400a      	ands	r2, r1
 80037f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037fa:	f7ff fa49 	bl	8002c90 <HAL_GetTick>
 80037fe:	0003      	movs	r3, r0
 8003800:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003802:	e008      	b.n	8003816 <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003804:	f7ff fa44 	bl	8002c90 <HAL_GetTick>
 8003808:	0002      	movs	r2, r0
 800380a:	693b      	ldr	r3, [r7, #16]
 800380c:	1ad3      	subs	r3, r2, r3
 800380e:	2b02      	cmp	r3, #2
 8003810:	d901      	bls.n	8003816 <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 8003812:	2303      	movs	r3, #3
 8003814:	e046      	b.n	80038a4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003816:	4b25      	ldr	r3, [pc, #148]	@ (80038ac <HAL_RCC_OscConfig+0x618>)
 8003818:	681a      	ldr	r2, [r3, #0]
 800381a:	2380      	movs	r3, #128	@ 0x80
 800381c:	049b      	lsls	r3, r3, #18
 800381e:	4013      	ands	r3, r2
 8003820:	d1f0      	bne.n	8003804 <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8003822:	4b22      	ldr	r3, [pc, #136]	@ (80038ac <HAL_RCC_OscConfig+0x618>)
 8003824:	68da      	ldr	r2, [r3, #12]
 8003826:	4b21      	ldr	r3, [pc, #132]	@ (80038ac <HAL_RCC_OscConfig+0x618>)
 8003828:	4926      	ldr	r1, [pc, #152]	@ (80038c4 <HAL_RCC_OscConfig+0x630>)
 800382a:	400a      	ands	r2, r1
 800382c:	60da      	str	r2, [r3, #12]
 800382e:	e038      	b.n	80038a2 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	69db      	ldr	r3, [r3, #28]
 8003834:	2b01      	cmp	r3, #1
 8003836:	d101      	bne.n	800383c <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8003838:	2301      	movs	r3, #1
 800383a:	e033      	b.n	80038a4 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 800383c:	4b1b      	ldr	r3, [pc, #108]	@ (80038ac <HAL_RCC_OscConfig+0x618>)
 800383e:	68db      	ldr	r3, [r3, #12]
 8003840:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003842:	697b      	ldr	r3, [r7, #20]
 8003844:	2203      	movs	r2, #3
 8003846:	401a      	ands	r2, r3
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	6a1b      	ldr	r3, [r3, #32]
 800384c:	429a      	cmp	r2, r3
 800384e:	d126      	bne.n	800389e <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003850:	697b      	ldr	r3, [r7, #20]
 8003852:	2270      	movs	r2, #112	@ 0x70
 8003854:	401a      	ands	r2, r3
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800385a:	429a      	cmp	r2, r3
 800385c:	d11f      	bne.n	800389e <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800385e:	697a      	ldr	r2, [r7, #20]
 8003860:	23fe      	movs	r3, #254	@ 0xfe
 8003862:	01db      	lsls	r3, r3, #7
 8003864:	401a      	ands	r2, r3
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800386a:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800386c:	429a      	cmp	r2, r3
 800386e:	d116      	bne.n	800389e <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003870:	697a      	ldr	r2, [r7, #20]
 8003872:	23f8      	movs	r3, #248	@ 0xf8
 8003874:	039b      	lsls	r3, r3, #14
 8003876:	401a      	ands	r2, r3
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800387c:	429a      	cmp	r2, r3
 800387e:	d10e      	bne.n	800389e <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8003880:	697a      	ldr	r2, [r7, #20]
 8003882:	23e0      	movs	r3, #224	@ 0xe0
 8003884:	051b      	lsls	r3, r3, #20
 8003886:	401a      	ands	r2, r3
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800388c:	429a      	cmp	r2, r3
 800388e:	d106      	bne.n	800389e <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8003890:	697b      	ldr	r3, [r7, #20]
 8003892:	0f5b      	lsrs	r3, r3, #29
 8003894:	075a      	lsls	r2, r3, #29
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800389a:	429a      	cmp	r2, r3
 800389c:	d001      	beq.n	80038a2 <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 800389e:	2301      	movs	r3, #1
 80038a0:	e000      	b.n	80038a4 <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 80038a2:	2300      	movs	r3, #0
}
 80038a4:	0018      	movs	r0, r3
 80038a6:	46bd      	mov	sp, r7
 80038a8:	b008      	add	sp, #32
 80038aa:	bd80      	pop	{r7, pc}
 80038ac:	40021000 	.word	0x40021000
 80038b0:	40007000 	.word	0x40007000
 80038b4:	00001388 	.word	0x00001388
 80038b8:	efffffff 	.word	0xefffffff
 80038bc:	feffffff 	.word	0xfeffffff
 80038c0:	11c1808c 	.word	0x11c1808c
 80038c4:	eefefffc 	.word	0xeefefffc

080038c8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80038c8:	b580      	push	{r7, lr}
 80038ca:	b084      	sub	sp, #16
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	6078      	str	r0, [r7, #4]
 80038d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d101      	bne.n	80038dc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80038d8:	2301      	movs	r3, #1
 80038da:	e0e9      	b.n	8003ab0 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80038dc:	4b76      	ldr	r3, [pc, #472]	@ (8003ab8 <HAL_RCC_ClockConfig+0x1f0>)
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	2207      	movs	r2, #7
 80038e2:	4013      	ands	r3, r2
 80038e4:	683a      	ldr	r2, [r7, #0]
 80038e6:	429a      	cmp	r2, r3
 80038e8:	d91e      	bls.n	8003928 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038ea:	4b73      	ldr	r3, [pc, #460]	@ (8003ab8 <HAL_RCC_ClockConfig+0x1f0>)
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	2207      	movs	r2, #7
 80038f0:	4393      	bics	r3, r2
 80038f2:	0019      	movs	r1, r3
 80038f4:	4b70      	ldr	r3, [pc, #448]	@ (8003ab8 <HAL_RCC_ClockConfig+0x1f0>)
 80038f6:	683a      	ldr	r2, [r7, #0]
 80038f8:	430a      	orrs	r2, r1
 80038fa:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80038fc:	f7ff f9c8 	bl	8002c90 <HAL_GetTick>
 8003900:	0003      	movs	r3, r0
 8003902:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003904:	e009      	b.n	800391a <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003906:	f7ff f9c3 	bl	8002c90 <HAL_GetTick>
 800390a:	0002      	movs	r2, r0
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	1ad3      	subs	r3, r2, r3
 8003910:	4a6a      	ldr	r2, [pc, #424]	@ (8003abc <HAL_RCC_ClockConfig+0x1f4>)
 8003912:	4293      	cmp	r3, r2
 8003914:	d901      	bls.n	800391a <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8003916:	2303      	movs	r3, #3
 8003918:	e0ca      	b.n	8003ab0 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800391a:	4b67      	ldr	r3, [pc, #412]	@ (8003ab8 <HAL_RCC_ClockConfig+0x1f0>)
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	2207      	movs	r2, #7
 8003920:	4013      	ands	r3, r2
 8003922:	683a      	ldr	r2, [r7, #0]
 8003924:	429a      	cmp	r2, r3
 8003926:	d1ee      	bne.n	8003906 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	2202      	movs	r2, #2
 800392e:	4013      	ands	r3, r2
 8003930:	d015      	beq.n	800395e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	2204      	movs	r2, #4
 8003938:	4013      	ands	r3, r2
 800393a:	d006      	beq.n	800394a <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800393c:	4b60      	ldr	r3, [pc, #384]	@ (8003ac0 <HAL_RCC_ClockConfig+0x1f8>)
 800393e:	689a      	ldr	r2, [r3, #8]
 8003940:	4b5f      	ldr	r3, [pc, #380]	@ (8003ac0 <HAL_RCC_ClockConfig+0x1f8>)
 8003942:	21e0      	movs	r1, #224	@ 0xe0
 8003944:	01c9      	lsls	r1, r1, #7
 8003946:	430a      	orrs	r2, r1
 8003948:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800394a:	4b5d      	ldr	r3, [pc, #372]	@ (8003ac0 <HAL_RCC_ClockConfig+0x1f8>)
 800394c:	689b      	ldr	r3, [r3, #8]
 800394e:	4a5d      	ldr	r2, [pc, #372]	@ (8003ac4 <HAL_RCC_ClockConfig+0x1fc>)
 8003950:	4013      	ands	r3, r2
 8003952:	0019      	movs	r1, r3
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	689a      	ldr	r2, [r3, #8]
 8003958:	4b59      	ldr	r3, [pc, #356]	@ (8003ac0 <HAL_RCC_ClockConfig+0x1f8>)
 800395a:	430a      	orrs	r2, r1
 800395c:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	2201      	movs	r2, #1
 8003964:	4013      	ands	r3, r2
 8003966:	d057      	beq.n	8003a18 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	685b      	ldr	r3, [r3, #4]
 800396c:	2b01      	cmp	r3, #1
 800396e:	d107      	bne.n	8003980 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003970:	4b53      	ldr	r3, [pc, #332]	@ (8003ac0 <HAL_RCC_ClockConfig+0x1f8>)
 8003972:	681a      	ldr	r2, [r3, #0]
 8003974:	2380      	movs	r3, #128	@ 0x80
 8003976:	029b      	lsls	r3, r3, #10
 8003978:	4013      	ands	r3, r2
 800397a:	d12b      	bne.n	80039d4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800397c:	2301      	movs	r3, #1
 800397e:	e097      	b.n	8003ab0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	685b      	ldr	r3, [r3, #4]
 8003984:	2b02      	cmp	r3, #2
 8003986:	d107      	bne.n	8003998 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003988:	4b4d      	ldr	r3, [pc, #308]	@ (8003ac0 <HAL_RCC_ClockConfig+0x1f8>)
 800398a:	681a      	ldr	r2, [r3, #0]
 800398c:	2380      	movs	r3, #128	@ 0x80
 800398e:	049b      	lsls	r3, r3, #18
 8003990:	4013      	ands	r3, r2
 8003992:	d11f      	bne.n	80039d4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003994:	2301      	movs	r3, #1
 8003996:	e08b      	b.n	8003ab0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	685b      	ldr	r3, [r3, #4]
 800399c:	2b00      	cmp	r3, #0
 800399e:	d107      	bne.n	80039b0 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80039a0:	4b47      	ldr	r3, [pc, #284]	@ (8003ac0 <HAL_RCC_ClockConfig+0x1f8>)
 80039a2:	681a      	ldr	r2, [r3, #0]
 80039a4:	2380      	movs	r3, #128	@ 0x80
 80039a6:	00db      	lsls	r3, r3, #3
 80039a8:	4013      	ands	r3, r2
 80039aa:	d113      	bne.n	80039d4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80039ac:	2301      	movs	r3, #1
 80039ae:	e07f      	b.n	8003ab0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	685b      	ldr	r3, [r3, #4]
 80039b4:	2b03      	cmp	r3, #3
 80039b6:	d106      	bne.n	80039c6 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80039b8:	4b41      	ldr	r3, [pc, #260]	@ (8003ac0 <HAL_RCC_ClockConfig+0x1f8>)
 80039ba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80039bc:	2202      	movs	r2, #2
 80039be:	4013      	ands	r3, r2
 80039c0:	d108      	bne.n	80039d4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80039c2:	2301      	movs	r3, #1
 80039c4:	e074      	b.n	8003ab0 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80039c6:	4b3e      	ldr	r3, [pc, #248]	@ (8003ac0 <HAL_RCC_ClockConfig+0x1f8>)
 80039c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80039ca:	2202      	movs	r2, #2
 80039cc:	4013      	ands	r3, r2
 80039ce:	d101      	bne.n	80039d4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80039d0:	2301      	movs	r3, #1
 80039d2:	e06d      	b.n	8003ab0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80039d4:	4b3a      	ldr	r3, [pc, #232]	@ (8003ac0 <HAL_RCC_ClockConfig+0x1f8>)
 80039d6:	689b      	ldr	r3, [r3, #8]
 80039d8:	2207      	movs	r2, #7
 80039da:	4393      	bics	r3, r2
 80039dc:	0019      	movs	r1, r3
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	685a      	ldr	r2, [r3, #4]
 80039e2:	4b37      	ldr	r3, [pc, #220]	@ (8003ac0 <HAL_RCC_ClockConfig+0x1f8>)
 80039e4:	430a      	orrs	r2, r1
 80039e6:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80039e8:	f7ff f952 	bl	8002c90 <HAL_GetTick>
 80039ec:	0003      	movs	r3, r0
 80039ee:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039f0:	e009      	b.n	8003a06 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80039f2:	f7ff f94d 	bl	8002c90 <HAL_GetTick>
 80039f6:	0002      	movs	r2, r0
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	1ad3      	subs	r3, r2, r3
 80039fc:	4a2f      	ldr	r2, [pc, #188]	@ (8003abc <HAL_RCC_ClockConfig+0x1f4>)
 80039fe:	4293      	cmp	r3, r2
 8003a00:	d901      	bls.n	8003a06 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8003a02:	2303      	movs	r3, #3
 8003a04:	e054      	b.n	8003ab0 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a06:	4b2e      	ldr	r3, [pc, #184]	@ (8003ac0 <HAL_RCC_ClockConfig+0x1f8>)
 8003a08:	689b      	ldr	r3, [r3, #8]
 8003a0a:	2238      	movs	r2, #56	@ 0x38
 8003a0c:	401a      	ands	r2, r3
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	685b      	ldr	r3, [r3, #4]
 8003a12:	00db      	lsls	r3, r3, #3
 8003a14:	429a      	cmp	r2, r3
 8003a16:	d1ec      	bne.n	80039f2 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003a18:	4b27      	ldr	r3, [pc, #156]	@ (8003ab8 <HAL_RCC_ClockConfig+0x1f0>)
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	2207      	movs	r2, #7
 8003a1e:	4013      	ands	r3, r2
 8003a20:	683a      	ldr	r2, [r7, #0]
 8003a22:	429a      	cmp	r2, r3
 8003a24:	d21e      	bcs.n	8003a64 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a26:	4b24      	ldr	r3, [pc, #144]	@ (8003ab8 <HAL_RCC_ClockConfig+0x1f0>)
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	2207      	movs	r2, #7
 8003a2c:	4393      	bics	r3, r2
 8003a2e:	0019      	movs	r1, r3
 8003a30:	4b21      	ldr	r3, [pc, #132]	@ (8003ab8 <HAL_RCC_ClockConfig+0x1f0>)
 8003a32:	683a      	ldr	r2, [r7, #0]
 8003a34:	430a      	orrs	r2, r1
 8003a36:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003a38:	f7ff f92a 	bl	8002c90 <HAL_GetTick>
 8003a3c:	0003      	movs	r3, r0
 8003a3e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003a40:	e009      	b.n	8003a56 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a42:	f7ff f925 	bl	8002c90 <HAL_GetTick>
 8003a46:	0002      	movs	r2, r0
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	1ad3      	subs	r3, r2, r3
 8003a4c:	4a1b      	ldr	r2, [pc, #108]	@ (8003abc <HAL_RCC_ClockConfig+0x1f4>)
 8003a4e:	4293      	cmp	r3, r2
 8003a50:	d901      	bls.n	8003a56 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8003a52:	2303      	movs	r3, #3
 8003a54:	e02c      	b.n	8003ab0 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003a56:	4b18      	ldr	r3, [pc, #96]	@ (8003ab8 <HAL_RCC_ClockConfig+0x1f0>)
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	2207      	movs	r2, #7
 8003a5c:	4013      	ands	r3, r2
 8003a5e:	683a      	ldr	r2, [r7, #0]
 8003a60:	429a      	cmp	r2, r3
 8003a62:	d1ee      	bne.n	8003a42 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	2204      	movs	r2, #4
 8003a6a:	4013      	ands	r3, r2
 8003a6c:	d009      	beq.n	8003a82 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8003a6e:	4b14      	ldr	r3, [pc, #80]	@ (8003ac0 <HAL_RCC_ClockConfig+0x1f8>)
 8003a70:	689b      	ldr	r3, [r3, #8]
 8003a72:	4a15      	ldr	r2, [pc, #84]	@ (8003ac8 <HAL_RCC_ClockConfig+0x200>)
 8003a74:	4013      	ands	r3, r2
 8003a76:	0019      	movs	r1, r3
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	68da      	ldr	r2, [r3, #12]
 8003a7c:	4b10      	ldr	r3, [pc, #64]	@ (8003ac0 <HAL_RCC_ClockConfig+0x1f8>)
 8003a7e:	430a      	orrs	r2, r1
 8003a80:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8003a82:	f000 f829 	bl	8003ad8 <HAL_RCC_GetSysClockFreq>
 8003a86:	0001      	movs	r1, r0
 8003a88:	4b0d      	ldr	r3, [pc, #52]	@ (8003ac0 <HAL_RCC_ClockConfig+0x1f8>)
 8003a8a:	689b      	ldr	r3, [r3, #8]
 8003a8c:	0a1b      	lsrs	r3, r3, #8
 8003a8e:	220f      	movs	r2, #15
 8003a90:	401a      	ands	r2, r3
 8003a92:	4b0e      	ldr	r3, [pc, #56]	@ (8003acc <HAL_RCC_ClockConfig+0x204>)
 8003a94:	0092      	lsls	r2, r2, #2
 8003a96:	58d3      	ldr	r3, [r2, r3]
 8003a98:	221f      	movs	r2, #31
 8003a9a:	4013      	ands	r3, r2
 8003a9c:	000a      	movs	r2, r1
 8003a9e:	40da      	lsrs	r2, r3
 8003aa0:	4b0b      	ldr	r3, [pc, #44]	@ (8003ad0 <HAL_RCC_ClockConfig+0x208>)
 8003aa2:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003aa4:	4b0b      	ldr	r3, [pc, #44]	@ (8003ad4 <HAL_RCC_ClockConfig+0x20c>)
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	0018      	movs	r0, r3
 8003aaa:	f7ff f895 	bl	8002bd8 <HAL_InitTick>
 8003aae:	0003      	movs	r3, r0
}
 8003ab0:	0018      	movs	r0, r3
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	b004      	add	sp, #16
 8003ab6:	bd80      	pop	{r7, pc}
 8003ab8:	40022000 	.word	0x40022000
 8003abc:	00001388 	.word	0x00001388
 8003ac0:	40021000 	.word	0x40021000
 8003ac4:	fffff0ff 	.word	0xfffff0ff
 8003ac8:	ffff8fff 	.word	0xffff8fff
 8003acc:	08005830 	.word	0x08005830
 8003ad0:	20000000 	.word	0x20000000
 8003ad4:	20000004 	.word	0x20000004

08003ad8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003ad8:	b580      	push	{r7, lr}
 8003ada:	b086      	sub	sp, #24
 8003adc:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003ade:	4b3c      	ldr	r3, [pc, #240]	@ (8003bd0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003ae0:	689b      	ldr	r3, [r3, #8]
 8003ae2:	2238      	movs	r2, #56	@ 0x38
 8003ae4:	4013      	ands	r3, r2
 8003ae6:	d10f      	bne.n	8003b08 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8003ae8:	4b39      	ldr	r3, [pc, #228]	@ (8003bd0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	0adb      	lsrs	r3, r3, #11
 8003aee:	2207      	movs	r2, #7
 8003af0:	4013      	ands	r3, r2
 8003af2:	2201      	movs	r2, #1
 8003af4:	409a      	lsls	r2, r3
 8003af6:	0013      	movs	r3, r2
 8003af8:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8003afa:	6839      	ldr	r1, [r7, #0]
 8003afc:	4835      	ldr	r0, [pc, #212]	@ (8003bd4 <HAL_RCC_GetSysClockFreq+0xfc>)
 8003afe:	f7fc fb01 	bl	8000104 <__udivsi3>
 8003b02:	0003      	movs	r3, r0
 8003b04:	613b      	str	r3, [r7, #16]
 8003b06:	e05d      	b.n	8003bc4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003b08:	4b31      	ldr	r3, [pc, #196]	@ (8003bd0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003b0a:	689b      	ldr	r3, [r3, #8]
 8003b0c:	2238      	movs	r2, #56	@ 0x38
 8003b0e:	4013      	ands	r3, r2
 8003b10:	2b08      	cmp	r3, #8
 8003b12:	d102      	bne.n	8003b1a <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003b14:	4b30      	ldr	r3, [pc, #192]	@ (8003bd8 <HAL_RCC_GetSysClockFreq+0x100>)
 8003b16:	613b      	str	r3, [r7, #16]
 8003b18:	e054      	b.n	8003bc4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003b1a:	4b2d      	ldr	r3, [pc, #180]	@ (8003bd0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003b1c:	689b      	ldr	r3, [r3, #8]
 8003b1e:	2238      	movs	r2, #56	@ 0x38
 8003b20:	4013      	ands	r3, r2
 8003b22:	2b10      	cmp	r3, #16
 8003b24:	d138      	bne.n	8003b98 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8003b26:	4b2a      	ldr	r3, [pc, #168]	@ (8003bd0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003b28:	68db      	ldr	r3, [r3, #12]
 8003b2a:	2203      	movs	r2, #3
 8003b2c:	4013      	ands	r3, r2
 8003b2e:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003b30:	4b27      	ldr	r3, [pc, #156]	@ (8003bd0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003b32:	68db      	ldr	r3, [r3, #12]
 8003b34:	091b      	lsrs	r3, r3, #4
 8003b36:	2207      	movs	r2, #7
 8003b38:	4013      	ands	r3, r2
 8003b3a:	3301      	adds	r3, #1
 8003b3c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	2b03      	cmp	r3, #3
 8003b42:	d10d      	bne.n	8003b60 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003b44:	68b9      	ldr	r1, [r7, #8]
 8003b46:	4824      	ldr	r0, [pc, #144]	@ (8003bd8 <HAL_RCC_GetSysClockFreq+0x100>)
 8003b48:	f7fc fadc 	bl	8000104 <__udivsi3>
 8003b4c:	0003      	movs	r3, r0
 8003b4e:	0019      	movs	r1, r3
 8003b50:	4b1f      	ldr	r3, [pc, #124]	@ (8003bd0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003b52:	68db      	ldr	r3, [r3, #12]
 8003b54:	0a1b      	lsrs	r3, r3, #8
 8003b56:	227f      	movs	r2, #127	@ 0x7f
 8003b58:	4013      	ands	r3, r2
 8003b5a:	434b      	muls	r3, r1
 8003b5c:	617b      	str	r3, [r7, #20]
        break;
 8003b5e:	e00d      	b.n	8003b7c <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8003b60:	68b9      	ldr	r1, [r7, #8]
 8003b62:	481c      	ldr	r0, [pc, #112]	@ (8003bd4 <HAL_RCC_GetSysClockFreq+0xfc>)
 8003b64:	f7fc face 	bl	8000104 <__udivsi3>
 8003b68:	0003      	movs	r3, r0
 8003b6a:	0019      	movs	r1, r3
 8003b6c:	4b18      	ldr	r3, [pc, #96]	@ (8003bd0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003b6e:	68db      	ldr	r3, [r3, #12]
 8003b70:	0a1b      	lsrs	r3, r3, #8
 8003b72:	227f      	movs	r2, #127	@ 0x7f
 8003b74:	4013      	ands	r3, r2
 8003b76:	434b      	muls	r3, r1
 8003b78:	617b      	str	r3, [r7, #20]
        break;
 8003b7a:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8003b7c:	4b14      	ldr	r3, [pc, #80]	@ (8003bd0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003b7e:	68db      	ldr	r3, [r3, #12]
 8003b80:	0f5b      	lsrs	r3, r3, #29
 8003b82:	2207      	movs	r2, #7
 8003b84:	4013      	ands	r3, r2
 8003b86:	3301      	adds	r3, #1
 8003b88:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8003b8a:	6879      	ldr	r1, [r7, #4]
 8003b8c:	6978      	ldr	r0, [r7, #20]
 8003b8e:	f7fc fab9 	bl	8000104 <__udivsi3>
 8003b92:	0003      	movs	r3, r0
 8003b94:	613b      	str	r3, [r7, #16]
 8003b96:	e015      	b.n	8003bc4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8003b98:	4b0d      	ldr	r3, [pc, #52]	@ (8003bd0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003b9a:	689b      	ldr	r3, [r3, #8]
 8003b9c:	2238      	movs	r2, #56	@ 0x38
 8003b9e:	4013      	ands	r3, r2
 8003ba0:	2b20      	cmp	r3, #32
 8003ba2:	d103      	bne.n	8003bac <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8003ba4:	2380      	movs	r3, #128	@ 0x80
 8003ba6:	021b      	lsls	r3, r3, #8
 8003ba8:	613b      	str	r3, [r7, #16]
 8003baa:	e00b      	b.n	8003bc4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8003bac:	4b08      	ldr	r3, [pc, #32]	@ (8003bd0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003bae:	689b      	ldr	r3, [r3, #8]
 8003bb0:	2238      	movs	r2, #56	@ 0x38
 8003bb2:	4013      	ands	r3, r2
 8003bb4:	2b18      	cmp	r3, #24
 8003bb6:	d103      	bne.n	8003bc0 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8003bb8:	23fa      	movs	r3, #250	@ 0xfa
 8003bba:	01db      	lsls	r3, r3, #7
 8003bbc:	613b      	str	r3, [r7, #16]
 8003bbe:	e001      	b.n	8003bc4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8003bc0:	2300      	movs	r3, #0
 8003bc2:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003bc4:	693b      	ldr	r3, [r7, #16]
}
 8003bc6:	0018      	movs	r0, r3
 8003bc8:	46bd      	mov	sp, r7
 8003bca:	b006      	add	sp, #24
 8003bcc:	bd80      	pop	{r7, pc}
 8003bce:	46c0      	nop			@ (mov r8, r8)
 8003bd0:	40021000 	.word	0x40021000
 8003bd4:	00f42400 	.word	0x00f42400
 8003bd8:	007a1200 	.word	0x007a1200

08003bdc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003bdc:	b580      	push	{r7, lr}
 8003bde:	b084      	sub	sp, #16
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d101      	bne.n	8003bee <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003bea:	2301      	movs	r3, #1
 8003bec:	e0a8      	b.n	8003d40 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d109      	bne.n	8003c0a <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	685a      	ldr	r2, [r3, #4]
 8003bfa:	2382      	movs	r3, #130	@ 0x82
 8003bfc:	005b      	lsls	r3, r3, #1
 8003bfe:	429a      	cmp	r2, r3
 8003c00:	d009      	beq.n	8003c16 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	2200      	movs	r2, #0
 8003c06:	61da      	str	r2, [r3, #28]
 8003c08:	e005      	b.n	8003c16 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	2200      	movs	r2, #0
 8003c0e:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	2200      	movs	r2, #0
 8003c14:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	2200      	movs	r2, #0
 8003c1a:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	225d      	movs	r2, #93	@ 0x5d
 8003c20:	5c9b      	ldrb	r3, [r3, r2]
 8003c22:	b2db      	uxtb	r3, r3
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d107      	bne.n	8003c38 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	225c      	movs	r2, #92	@ 0x5c
 8003c2c:	2100      	movs	r1, #0
 8003c2e:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	0018      	movs	r0, r3
 8003c34:	f7fe fe18 	bl	8002868 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	225d      	movs	r2, #93	@ 0x5d
 8003c3c:	2102      	movs	r1, #2
 8003c3e:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	681a      	ldr	r2, [r3, #0]
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	2140      	movs	r1, #64	@ 0x40
 8003c4c:	438a      	bics	r2, r1
 8003c4e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	68da      	ldr	r2, [r3, #12]
 8003c54:	23e0      	movs	r3, #224	@ 0xe0
 8003c56:	00db      	lsls	r3, r3, #3
 8003c58:	429a      	cmp	r2, r3
 8003c5a:	d902      	bls.n	8003c62 <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003c5c:	2300      	movs	r3, #0
 8003c5e:	60fb      	str	r3, [r7, #12]
 8003c60:	e002      	b.n	8003c68 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003c62:	2380      	movs	r3, #128	@ 0x80
 8003c64:	015b      	lsls	r3, r3, #5
 8003c66:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	68da      	ldr	r2, [r3, #12]
 8003c6c:	23f0      	movs	r3, #240	@ 0xf0
 8003c6e:	011b      	lsls	r3, r3, #4
 8003c70:	429a      	cmp	r2, r3
 8003c72:	d008      	beq.n	8003c86 <HAL_SPI_Init+0xaa>
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	68da      	ldr	r2, [r3, #12]
 8003c78:	23e0      	movs	r3, #224	@ 0xe0
 8003c7a:	00db      	lsls	r3, r3, #3
 8003c7c:	429a      	cmp	r2, r3
 8003c7e:	d002      	beq.n	8003c86 <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	2200      	movs	r2, #0
 8003c84:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	685a      	ldr	r2, [r3, #4]
 8003c8a:	2382      	movs	r3, #130	@ 0x82
 8003c8c:	005b      	lsls	r3, r3, #1
 8003c8e:	401a      	ands	r2, r3
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	6899      	ldr	r1, [r3, #8]
 8003c94:	2384      	movs	r3, #132	@ 0x84
 8003c96:	021b      	lsls	r3, r3, #8
 8003c98:	400b      	ands	r3, r1
 8003c9a:	431a      	orrs	r2, r3
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	691b      	ldr	r3, [r3, #16]
 8003ca0:	2102      	movs	r1, #2
 8003ca2:	400b      	ands	r3, r1
 8003ca4:	431a      	orrs	r2, r3
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	695b      	ldr	r3, [r3, #20]
 8003caa:	2101      	movs	r1, #1
 8003cac:	400b      	ands	r3, r1
 8003cae:	431a      	orrs	r2, r3
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	6999      	ldr	r1, [r3, #24]
 8003cb4:	2380      	movs	r3, #128	@ 0x80
 8003cb6:	009b      	lsls	r3, r3, #2
 8003cb8:	400b      	ands	r3, r1
 8003cba:	431a      	orrs	r2, r3
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	69db      	ldr	r3, [r3, #28]
 8003cc0:	2138      	movs	r1, #56	@ 0x38
 8003cc2:	400b      	ands	r3, r1
 8003cc4:	431a      	orrs	r2, r3
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	6a1b      	ldr	r3, [r3, #32]
 8003cca:	2180      	movs	r1, #128	@ 0x80
 8003ccc:	400b      	ands	r3, r1
 8003cce:	431a      	orrs	r2, r3
 8003cd0:	0011      	movs	r1, r2
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003cd6:	2380      	movs	r3, #128	@ 0x80
 8003cd8:	019b      	lsls	r3, r3, #6
 8003cda:	401a      	ands	r2, r3
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	430a      	orrs	r2, r1
 8003ce2:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	699b      	ldr	r3, [r3, #24]
 8003ce8:	0c1b      	lsrs	r3, r3, #16
 8003cea:	2204      	movs	r2, #4
 8003cec:	401a      	ands	r2, r3
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cf2:	2110      	movs	r1, #16
 8003cf4:	400b      	ands	r3, r1
 8003cf6:	431a      	orrs	r2, r3
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003cfc:	2108      	movs	r1, #8
 8003cfe:	400b      	ands	r3, r1
 8003d00:	431a      	orrs	r2, r3
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	68d9      	ldr	r1, [r3, #12]
 8003d06:	23f0      	movs	r3, #240	@ 0xf0
 8003d08:	011b      	lsls	r3, r3, #4
 8003d0a:	400b      	ands	r3, r1
 8003d0c:	431a      	orrs	r2, r3
 8003d0e:	0011      	movs	r1, r2
 8003d10:	68fa      	ldr	r2, [r7, #12]
 8003d12:	2380      	movs	r3, #128	@ 0x80
 8003d14:	015b      	lsls	r3, r3, #5
 8003d16:	401a      	ands	r2, r3
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	430a      	orrs	r2, r1
 8003d1e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	69da      	ldr	r2, [r3, #28]
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	4907      	ldr	r1, [pc, #28]	@ (8003d48 <HAL_SPI_Init+0x16c>)
 8003d2c:	400a      	ands	r2, r1
 8003d2e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	2200      	movs	r2, #0
 8003d34:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	225d      	movs	r2, #93	@ 0x5d
 8003d3a:	2101      	movs	r1, #1
 8003d3c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003d3e:	2300      	movs	r3, #0
}
 8003d40:	0018      	movs	r0, r3
 8003d42:	46bd      	mov	sp, r7
 8003d44:	b004      	add	sp, #16
 8003d46:	bd80      	pop	{r7, pc}
 8003d48:	fffff7ff 	.word	0xfffff7ff

08003d4c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003d4c:	b580      	push	{r7, lr}
 8003d4e:	b088      	sub	sp, #32
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	60f8      	str	r0, [r7, #12]
 8003d54:	60b9      	str	r1, [r7, #8]
 8003d56:	603b      	str	r3, [r7, #0]
 8003d58:	1dbb      	adds	r3, r7, #6
 8003d5a:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003d5c:	231f      	movs	r3, #31
 8003d5e:	18fb      	adds	r3, r7, r3
 8003d60:	2200      	movs	r2, #0
 8003d62:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	225c      	movs	r2, #92	@ 0x5c
 8003d68:	5c9b      	ldrb	r3, [r3, r2]
 8003d6a:	2b01      	cmp	r3, #1
 8003d6c:	d101      	bne.n	8003d72 <HAL_SPI_Transmit+0x26>
 8003d6e:	2302      	movs	r3, #2
 8003d70:	e147      	b.n	8004002 <HAL_SPI_Transmit+0x2b6>
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	225c      	movs	r2, #92	@ 0x5c
 8003d76:	2101      	movs	r1, #1
 8003d78:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003d7a:	f7fe ff89 	bl	8002c90 <HAL_GetTick>
 8003d7e:	0003      	movs	r3, r0
 8003d80:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8003d82:	2316      	movs	r3, #22
 8003d84:	18fb      	adds	r3, r7, r3
 8003d86:	1dba      	adds	r2, r7, #6
 8003d88:	8812      	ldrh	r2, [r2, #0]
 8003d8a:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	225d      	movs	r2, #93	@ 0x5d
 8003d90:	5c9b      	ldrb	r3, [r3, r2]
 8003d92:	b2db      	uxtb	r3, r3
 8003d94:	2b01      	cmp	r3, #1
 8003d96:	d004      	beq.n	8003da2 <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 8003d98:	231f      	movs	r3, #31
 8003d9a:	18fb      	adds	r3, r7, r3
 8003d9c:	2202      	movs	r2, #2
 8003d9e:	701a      	strb	r2, [r3, #0]
    goto error;
 8003da0:	e128      	b.n	8003ff4 <HAL_SPI_Transmit+0x2a8>
  }

  if ((pData == NULL) || (Size == 0U))
 8003da2:	68bb      	ldr	r3, [r7, #8]
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d003      	beq.n	8003db0 <HAL_SPI_Transmit+0x64>
 8003da8:	1dbb      	adds	r3, r7, #6
 8003daa:	881b      	ldrh	r3, [r3, #0]
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d104      	bne.n	8003dba <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 8003db0:	231f      	movs	r3, #31
 8003db2:	18fb      	adds	r3, r7, r3
 8003db4:	2201      	movs	r2, #1
 8003db6:	701a      	strb	r2, [r3, #0]
    goto error;
 8003db8:	e11c      	b.n	8003ff4 <HAL_SPI_Transmit+0x2a8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	225d      	movs	r2, #93	@ 0x5d
 8003dbe:	2103      	movs	r1, #3
 8003dc0:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	2200      	movs	r2, #0
 8003dc6:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	68ba      	ldr	r2, [r7, #8]
 8003dcc:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	1dba      	adds	r2, r7, #6
 8003dd2:	8812      	ldrh	r2, [r2, #0]
 8003dd4:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	1dba      	adds	r2, r7, #6
 8003dda:	8812      	ldrh	r2, [r2, #0]
 8003ddc:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	2200      	movs	r2, #0
 8003de2:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	2244      	movs	r2, #68	@ 0x44
 8003de8:	2100      	movs	r1, #0
 8003dea:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	2246      	movs	r2, #70	@ 0x46
 8003df0:	2100      	movs	r1, #0
 8003df2:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	2200      	movs	r2, #0
 8003df8:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	2200      	movs	r2, #0
 8003dfe:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	689a      	ldr	r2, [r3, #8]
 8003e04:	2380      	movs	r3, #128	@ 0x80
 8003e06:	021b      	lsls	r3, r3, #8
 8003e08:	429a      	cmp	r2, r3
 8003e0a:	d110      	bne.n	8003e2e <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	681a      	ldr	r2, [r3, #0]
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	2140      	movs	r1, #64	@ 0x40
 8003e18:	438a      	bics	r2, r1
 8003e1a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	681a      	ldr	r2, [r3, #0]
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	2180      	movs	r1, #128	@ 0x80
 8003e28:	01c9      	lsls	r1, r1, #7
 8003e2a:	430a      	orrs	r2, r1
 8003e2c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	2240      	movs	r2, #64	@ 0x40
 8003e36:	4013      	ands	r3, r2
 8003e38:	2b40      	cmp	r3, #64	@ 0x40
 8003e3a:	d007      	beq.n	8003e4c <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	681a      	ldr	r2, [r3, #0]
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	2140      	movs	r1, #64	@ 0x40
 8003e48:	430a      	orrs	r2, r1
 8003e4a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	68da      	ldr	r2, [r3, #12]
 8003e50:	23e0      	movs	r3, #224	@ 0xe0
 8003e52:	00db      	lsls	r3, r3, #3
 8003e54:	429a      	cmp	r2, r3
 8003e56:	d952      	bls.n	8003efe <HAL_SPI_Transmit+0x1b2>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	685b      	ldr	r3, [r3, #4]
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d004      	beq.n	8003e6a <HAL_SPI_Transmit+0x11e>
 8003e60:	2316      	movs	r3, #22
 8003e62:	18fb      	adds	r3, r7, r3
 8003e64:	881b      	ldrh	r3, [r3, #0]
 8003e66:	2b01      	cmp	r3, #1
 8003e68:	d143      	bne.n	8003ef2 <HAL_SPI_Transmit+0x1a6>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e6e:	881a      	ldrh	r2, [r3, #0]
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e7a:	1c9a      	adds	r2, r3, #2
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003e84:	b29b      	uxth	r3, r3
 8003e86:	3b01      	subs	r3, #1
 8003e88:	b29a      	uxth	r2, r3
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003e8e:	e030      	b.n	8003ef2 <HAL_SPI_Transmit+0x1a6>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	689b      	ldr	r3, [r3, #8]
 8003e96:	2202      	movs	r2, #2
 8003e98:	4013      	ands	r3, r2
 8003e9a:	2b02      	cmp	r3, #2
 8003e9c:	d112      	bne.n	8003ec4 <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ea2:	881a      	ldrh	r2, [r3, #0]
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003eae:	1c9a      	adds	r2, r3, #2
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003eb8:	b29b      	uxth	r3, r3
 8003eba:	3b01      	subs	r3, #1
 8003ebc:	b29a      	uxth	r2, r3
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003ec2:	e016      	b.n	8003ef2 <HAL_SPI_Transmit+0x1a6>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003ec4:	f7fe fee4 	bl	8002c90 <HAL_GetTick>
 8003ec8:	0002      	movs	r2, r0
 8003eca:	69bb      	ldr	r3, [r7, #24]
 8003ecc:	1ad3      	subs	r3, r2, r3
 8003ece:	683a      	ldr	r2, [r7, #0]
 8003ed0:	429a      	cmp	r2, r3
 8003ed2:	d802      	bhi.n	8003eda <HAL_SPI_Transmit+0x18e>
 8003ed4:	683b      	ldr	r3, [r7, #0]
 8003ed6:	3301      	adds	r3, #1
 8003ed8:	d102      	bne.n	8003ee0 <HAL_SPI_Transmit+0x194>
 8003eda:	683b      	ldr	r3, [r7, #0]
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d108      	bne.n	8003ef2 <HAL_SPI_Transmit+0x1a6>
        {
          errorcode = HAL_TIMEOUT;
 8003ee0:	231f      	movs	r3, #31
 8003ee2:	18fb      	adds	r3, r7, r3
 8003ee4:	2203      	movs	r2, #3
 8003ee6:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	225d      	movs	r2, #93	@ 0x5d
 8003eec:	2101      	movs	r1, #1
 8003eee:	5499      	strb	r1, [r3, r2]
          goto error;
 8003ef0:	e080      	b.n	8003ff4 <HAL_SPI_Transmit+0x2a8>
    while (hspi->TxXferCount > 0U)
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003ef6:	b29b      	uxth	r3, r3
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d1c9      	bne.n	8003e90 <HAL_SPI_Transmit+0x144>
 8003efc:	e053      	b.n	8003fa6 <HAL_SPI_Transmit+0x25a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	685b      	ldr	r3, [r3, #4]
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d004      	beq.n	8003f10 <HAL_SPI_Transmit+0x1c4>
 8003f06:	2316      	movs	r3, #22
 8003f08:	18fb      	adds	r3, r7, r3
 8003f0a:	881b      	ldrh	r3, [r3, #0]
 8003f0c:	2b01      	cmp	r3, #1
 8003f0e:	d145      	bne.n	8003f9c <HAL_SPI_Transmit+0x250>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	330c      	adds	r3, #12
 8003f1a:	7812      	ldrb	r2, [r2, #0]
 8003f1c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f22:	1c5a      	adds	r2, r3, #1
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003f2c:	b29b      	uxth	r3, r3
 8003f2e:	3b01      	subs	r3, #1
 8003f30:	b29a      	uxth	r2, r3
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    while (hspi->TxXferCount > 0U)
 8003f36:	e031      	b.n	8003f9c <HAL_SPI_Transmit+0x250>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	689b      	ldr	r3, [r3, #8]
 8003f3e:	2202      	movs	r2, #2
 8003f40:	4013      	ands	r3, r2
 8003f42:	2b02      	cmp	r3, #2
 8003f44:	d113      	bne.n	8003f6e <HAL_SPI_Transmit+0x222>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	330c      	adds	r3, #12
 8003f50:	7812      	ldrb	r2, [r2, #0]
 8003f52:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f58:	1c5a      	adds	r2, r3, #1
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003f62:	b29b      	uxth	r3, r3
 8003f64:	3b01      	subs	r3, #1
 8003f66:	b29a      	uxth	r2, r3
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003f6c:	e016      	b.n	8003f9c <HAL_SPI_Transmit+0x250>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003f6e:	f7fe fe8f 	bl	8002c90 <HAL_GetTick>
 8003f72:	0002      	movs	r2, r0
 8003f74:	69bb      	ldr	r3, [r7, #24]
 8003f76:	1ad3      	subs	r3, r2, r3
 8003f78:	683a      	ldr	r2, [r7, #0]
 8003f7a:	429a      	cmp	r2, r3
 8003f7c:	d802      	bhi.n	8003f84 <HAL_SPI_Transmit+0x238>
 8003f7e:	683b      	ldr	r3, [r7, #0]
 8003f80:	3301      	adds	r3, #1
 8003f82:	d102      	bne.n	8003f8a <HAL_SPI_Transmit+0x23e>
 8003f84:	683b      	ldr	r3, [r7, #0]
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d108      	bne.n	8003f9c <HAL_SPI_Transmit+0x250>
        {
          errorcode = HAL_TIMEOUT;
 8003f8a:	231f      	movs	r3, #31
 8003f8c:	18fb      	adds	r3, r7, r3
 8003f8e:	2203      	movs	r2, #3
 8003f90:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	225d      	movs	r2, #93	@ 0x5d
 8003f96:	2101      	movs	r1, #1
 8003f98:	5499      	strb	r1, [r3, r2]
          goto error;
 8003f9a:	e02b      	b.n	8003ff4 <HAL_SPI_Transmit+0x2a8>
    while (hspi->TxXferCount > 0U)
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003fa0:	b29b      	uxth	r3, r3
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d1c8      	bne.n	8003f38 <HAL_SPI_Transmit+0x1ec>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003fa6:	69ba      	ldr	r2, [r7, #24]
 8003fa8:	6839      	ldr	r1, [r7, #0]
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	0018      	movs	r0, r3
 8003fae:	f000 f95d 	bl	800426c <SPI_EndRxTxTransaction>
 8003fb2:	1e03      	subs	r3, r0, #0
 8003fb4:	d002      	beq.n	8003fbc <HAL_SPI_Transmit+0x270>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	2220      	movs	r2, #32
 8003fba:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	689b      	ldr	r3, [r3, #8]
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d10a      	bne.n	8003fda <HAL_SPI_Transmit+0x28e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003fc4:	2300      	movs	r3, #0
 8003fc6:	613b      	str	r3, [r7, #16]
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	68db      	ldr	r3, [r3, #12]
 8003fce:	613b      	str	r3, [r7, #16]
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	689b      	ldr	r3, [r3, #8]
 8003fd6:	613b      	str	r3, [r7, #16]
 8003fd8:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d004      	beq.n	8003fec <HAL_SPI_Transmit+0x2a0>
  {
    errorcode = HAL_ERROR;
 8003fe2:	231f      	movs	r3, #31
 8003fe4:	18fb      	adds	r3, r7, r3
 8003fe6:	2201      	movs	r2, #1
 8003fe8:	701a      	strb	r2, [r3, #0]
 8003fea:	e003      	b.n	8003ff4 <HAL_SPI_Transmit+0x2a8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	225d      	movs	r2, #93	@ 0x5d
 8003ff0:	2101      	movs	r1, #1
 8003ff2:	5499      	strb	r1, [r3, r2]
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	225c      	movs	r2, #92	@ 0x5c
 8003ff8:	2100      	movs	r1, #0
 8003ffa:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8003ffc:	231f      	movs	r3, #31
 8003ffe:	18fb      	adds	r3, r7, r3
 8004000:	781b      	ldrb	r3, [r3, #0]
}
 8004002:	0018      	movs	r0, r3
 8004004:	46bd      	mov	sp, r7
 8004006:	b008      	add	sp, #32
 8004008:	bd80      	pop	{r7, pc}
	...

0800400c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800400c:	b580      	push	{r7, lr}
 800400e:	b088      	sub	sp, #32
 8004010:	af00      	add	r7, sp, #0
 8004012:	60f8      	str	r0, [r7, #12]
 8004014:	60b9      	str	r1, [r7, #8]
 8004016:	603b      	str	r3, [r7, #0]
 8004018:	1dfb      	adds	r3, r7, #7
 800401a:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800401c:	f7fe fe38 	bl	8002c90 <HAL_GetTick>
 8004020:	0002      	movs	r2, r0
 8004022:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004024:	1a9b      	subs	r3, r3, r2
 8004026:	683a      	ldr	r2, [r7, #0]
 8004028:	18d3      	adds	r3, r2, r3
 800402a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800402c:	f7fe fe30 	bl	8002c90 <HAL_GetTick>
 8004030:	0003      	movs	r3, r0
 8004032:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004034:	4b3a      	ldr	r3, [pc, #232]	@ (8004120 <SPI_WaitFlagStateUntilTimeout+0x114>)
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	015b      	lsls	r3, r3, #5
 800403a:	0d1b      	lsrs	r3, r3, #20
 800403c:	69fa      	ldr	r2, [r7, #28]
 800403e:	4353      	muls	r3, r2
 8004040:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004042:	e058      	b.n	80040f6 <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004044:	683b      	ldr	r3, [r7, #0]
 8004046:	3301      	adds	r3, #1
 8004048:	d055      	beq.n	80040f6 <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800404a:	f7fe fe21 	bl	8002c90 <HAL_GetTick>
 800404e:	0002      	movs	r2, r0
 8004050:	69bb      	ldr	r3, [r7, #24]
 8004052:	1ad3      	subs	r3, r2, r3
 8004054:	69fa      	ldr	r2, [r7, #28]
 8004056:	429a      	cmp	r2, r3
 8004058:	d902      	bls.n	8004060 <SPI_WaitFlagStateUntilTimeout+0x54>
 800405a:	69fb      	ldr	r3, [r7, #28]
 800405c:	2b00      	cmp	r3, #0
 800405e:	d142      	bne.n	80040e6 <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	685a      	ldr	r2, [r3, #4]
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	21e0      	movs	r1, #224	@ 0xe0
 800406c:	438a      	bics	r2, r1
 800406e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	685a      	ldr	r2, [r3, #4]
 8004074:	2382      	movs	r3, #130	@ 0x82
 8004076:	005b      	lsls	r3, r3, #1
 8004078:	429a      	cmp	r2, r3
 800407a:	d113      	bne.n	80040a4 <SPI_WaitFlagStateUntilTimeout+0x98>
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	689a      	ldr	r2, [r3, #8]
 8004080:	2380      	movs	r3, #128	@ 0x80
 8004082:	021b      	lsls	r3, r3, #8
 8004084:	429a      	cmp	r2, r3
 8004086:	d005      	beq.n	8004094 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	689a      	ldr	r2, [r3, #8]
 800408c:	2380      	movs	r3, #128	@ 0x80
 800408e:	00db      	lsls	r3, r3, #3
 8004090:	429a      	cmp	r2, r3
 8004092:	d107      	bne.n	80040a4 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	681a      	ldr	r2, [r3, #0]
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	2140      	movs	r1, #64	@ 0x40
 80040a0:	438a      	bics	r2, r1
 80040a2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80040a8:	2380      	movs	r3, #128	@ 0x80
 80040aa:	019b      	lsls	r3, r3, #6
 80040ac:	429a      	cmp	r2, r3
 80040ae:	d110      	bne.n	80040d2 <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	681a      	ldr	r2, [r3, #0]
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	491a      	ldr	r1, [pc, #104]	@ (8004124 <SPI_WaitFlagStateUntilTimeout+0x118>)
 80040bc:	400a      	ands	r2, r1
 80040be:	601a      	str	r2, [r3, #0]
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	681a      	ldr	r2, [r3, #0]
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	2180      	movs	r1, #128	@ 0x80
 80040cc:	0189      	lsls	r1, r1, #6
 80040ce:	430a      	orrs	r2, r1
 80040d0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	225d      	movs	r2, #93	@ 0x5d
 80040d6:	2101      	movs	r1, #1
 80040d8:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	225c      	movs	r2, #92	@ 0x5c
 80040de:	2100      	movs	r1, #0
 80040e0:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80040e2:	2303      	movs	r3, #3
 80040e4:	e017      	b.n	8004116 <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80040e6:	697b      	ldr	r3, [r7, #20]
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d101      	bne.n	80040f0 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 80040ec:	2300      	movs	r3, #0
 80040ee:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80040f0:	697b      	ldr	r3, [r7, #20]
 80040f2:	3b01      	subs	r3, #1
 80040f4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	689b      	ldr	r3, [r3, #8]
 80040fc:	68ba      	ldr	r2, [r7, #8]
 80040fe:	4013      	ands	r3, r2
 8004100:	68ba      	ldr	r2, [r7, #8]
 8004102:	1ad3      	subs	r3, r2, r3
 8004104:	425a      	negs	r2, r3
 8004106:	4153      	adcs	r3, r2
 8004108:	b2db      	uxtb	r3, r3
 800410a:	001a      	movs	r2, r3
 800410c:	1dfb      	adds	r3, r7, #7
 800410e:	781b      	ldrb	r3, [r3, #0]
 8004110:	429a      	cmp	r2, r3
 8004112:	d197      	bne.n	8004044 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004114:	2300      	movs	r3, #0
}
 8004116:	0018      	movs	r0, r3
 8004118:	46bd      	mov	sp, r7
 800411a:	b008      	add	sp, #32
 800411c:	bd80      	pop	{r7, pc}
 800411e:	46c0      	nop			@ (mov r8, r8)
 8004120:	20000000 	.word	0x20000000
 8004124:	ffffdfff 	.word	0xffffdfff

08004128 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004128:	b580      	push	{r7, lr}
 800412a:	b08a      	sub	sp, #40	@ 0x28
 800412c:	af00      	add	r7, sp, #0
 800412e:	60f8      	str	r0, [r7, #12]
 8004130:	60b9      	str	r1, [r7, #8]
 8004132:	607a      	str	r2, [r7, #4]
 8004134:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8004136:	2317      	movs	r3, #23
 8004138:	18fb      	adds	r3, r7, r3
 800413a:	2200      	movs	r2, #0
 800413c:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800413e:	f7fe fda7 	bl	8002c90 <HAL_GetTick>
 8004142:	0002      	movs	r2, r0
 8004144:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004146:	1a9b      	subs	r3, r3, r2
 8004148:	683a      	ldr	r2, [r7, #0]
 800414a:	18d3      	adds	r3, r2, r3
 800414c:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 800414e:	f7fe fd9f 	bl	8002c90 <HAL_GetTick>
 8004152:	0003      	movs	r3, r0
 8004154:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	330c      	adds	r3, #12
 800415c:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800415e:	4b41      	ldr	r3, [pc, #260]	@ (8004264 <SPI_WaitFifoStateUntilTimeout+0x13c>)
 8004160:	681a      	ldr	r2, [r3, #0]
 8004162:	0013      	movs	r3, r2
 8004164:	009b      	lsls	r3, r3, #2
 8004166:	189b      	adds	r3, r3, r2
 8004168:	00da      	lsls	r2, r3, #3
 800416a:	1ad3      	subs	r3, r2, r3
 800416c:	0d1b      	lsrs	r3, r3, #20
 800416e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004170:	4353      	muls	r3, r2
 8004172:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8004174:	e068      	b.n	8004248 <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8004176:	68ba      	ldr	r2, [r7, #8]
 8004178:	23c0      	movs	r3, #192	@ 0xc0
 800417a:	00db      	lsls	r3, r3, #3
 800417c:	429a      	cmp	r2, r3
 800417e:	d10a      	bne.n	8004196 <SPI_WaitFifoStateUntilTimeout+0x6e>
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	2b00      	cmp	r3, #0
 8004184:	d107      	bne.n	8004196 <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8004186:	69fb      	ldr	r3, [r7, #28]
 8004188:	781b      	ldrb	r3, [r3, #0]
 800418a:	b2da      	uxtb	r2, r3
 800418c:	2117      	movs	r1, #23
 800418e:	187b      	adds	r3, r7, r1
 8004190:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8004192:	187b      	adds	r3, r7, r1
 8004194:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8004196:	683b      	ldr	r3, [r7, #0]
 8004198:	3301      	adds	r3, #1
 800419a:	d055      	beq.n	8004248 <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800419c:	f7fe fd78 	bl	8002c90 <HAL_GetTick>
 80041a0:	0002      	movs	r2, r0
 80041a2:	6a3b      	ldr	r3, [r7, #32]
 80041a4:	1ad3      	subs	r3, r2, r3
 80041a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80041a8:	429a      	cmp	r2, r3
 80041aa:	d902      	bls.n	80041b2 <SPI_WaitFifoStateUntilTimeout+0x8a>
 80041ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d142      	bne.n	8004238 <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	685a      	ldr	r2, [r3, #4]
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	21e0      	movs	r1, #224	@ 0xe0
 80041be:	438a      	bics	r2, r1
 80041c0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	685a      	ldr	r2, [r3, #4]
 80041c6:	2382      	movs	r3, #130	@ 0x82
 80041c8:	005b      	lsls	r3, r3, #1
 80041ca:	429a      	cmp	r2, r3
 80041cc:	d113      	bne.n	80041f6 <SPI_WaitFifoStateUntilTimeout+0xce>
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	689a      	ldr	r2, [r3, #8]
 80041d2:	2380      	movs	r3, #128	@ 0x80
 80041d4:	021b      	lsls	r3, r3, #8
 80041d6:	429a      	cmp	r2, r3
 80041d8:	d005      	beq.n	80041e6 <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	689a      	ldr	r2, [r3, #8]
 80041de:	2380      	movs	r3, #128	@ 0x80
 80041e0:	00db      	lsls	r3, r3, #3
 80041e2:	429a      	cmp	r2, r3
 80041e4:	d107      	bne.n	80041f6 <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	681a      	ldr	r2, [r3, #0]
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	2140      	movs	r1, #64	@ 0x40
 80041f2:	438a      	bics	r2, r1
 80041f4:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80041fa:	2380      	movs	r3, #128	@ 0x80
 80041fc:	019b      	lsls	r3, r3, #6
 80041fe:	429a      	cmp	r2, r3
 8004200:	d110      	bne.n	8004224 <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	681a      	ldr	r2, [r3, #0]
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	4916      	ldr	r1, [pc, #88]	@ (8004268 <SPI_WaitFifoStateUntilTimeout+0x140>)
 800420e:	400a      	ands	r2, r1
 8004210:	601a      	str	r2, [r3, #0]
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	681a      	ldr	r2, [r3, #0]
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	2180      	movs	r1, #128	@ 0x80
 800421e:	0189      	lsls	r1, r1, #6
 8004220:	430a      	orrs	r2, r1
 8004222:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	225d      	movs	r2, #93	@ 0x5d
 8004228:	2101      	movs	r1, #1
 800422a:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	225c      	movs	r2, #92	@ 0x5c
 8004230:	2100      	movs	r1, #0
 8004232:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8004234:	2303      	movs	r3, #3
 8004236:	e010      	b.n	800425a <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004238:	69bb      	ldr	r3, [r7, #24]
 800423a:	2b00      	cmp	r3, #0
 800423c:	d101      	bne.n	8004242 <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 800423e:	2300      	movs	r3, #0
 8004240:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8004242:	69bb      	ldr	r3, [r7, #24]
 8004244:	3b01      	subs	r3, #1
 8004246:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	689b      	ldr	r3, [r3, #8]
 800424e:	68ba      	ldr	r2, [r7, #8]
 8004250:	4013      	ands	r3, r2
 8004252:	687a      	ldr	r2, [r7, #4]
 8004254:	429a      	cmp	r2, r3
 8004256:	d18e      	bne.n	8004176 <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 8004258:	2300      	movs	r3, #0
}
 800425a:	0018      	movs	r0, r3
 800425c:	46bd      	mov	sp, r7
 800425e:	b00a      	add	sp, #40	@ 0x28
 8004260:	bd80      	pop	{r7, pc}
 8004262:	46c0      	nop			@ (mov r8, r8)
 8004264:	20000000 	.word	0x20000000
 8004268:	ffffdfff 	.word	0xffffdfff

0800426c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800426c:	b580      	push	{r7, lr}
 800426e:	b086      	sub	sp, #24
 8004270:	af02      	add	r7, sp, #8
 8004272:	60f8      	str	r0, [r7, #12]
 8004274:	60b9      	str	r1, [r7, #8]
 8004276:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004278:	68ba      	ldr	r2, [r7, #8]
 800427a:	23c0      	movs	r3, #192	@ 0xc0
 800427c:	0159      	lsls	r1, r3, #5
 800427e:	68f8      	ldr	r0, [r7, #12]
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	9300      	str	r3, [sp, #0]
 8004284:	0013      	movs	r3, r2
 8004286:	2200      	movs	r2, #0
 8004288:	f7ff ff4e 	bl	8004128 <SPI_WaitFifoStateUntilTimeout>
 800428c:	1e03      	subs	r3, r0, #0
 800428e:	d007      	beq.n	80042a0 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004294:	2220      	movs	r2, #32
 8004296:	431a      	orrs	r2, r3
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800429c:	2303      	movs	r3, #3
 800429e:	e027      	b.n	80042f0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80042a0:	68ba      	ldr	r2, [r7, #8]
 80042a2:	68f8      	ldr	r0, [r7, #12]
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	9300      	str	r3, [sp, #0]
 80042a8:	0013      	movs	r3, r2
 80042aa:	2200      	movs	r2, #0
 80042ac:	2180      	movs	r1, #128	@ 0x80
 80042ae:	f7ff fead 	bl	800400c <SPI_WaitFlagStateUntilTimeout>
 80042b2:	1e03      	subs	r3, r0, #0
 80042b4:	d007      	beq.n	80042c6 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80042ba:	2220      	movs	r2, #32
 80042bc:	431a      	orrs	r2, r3
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80042c2:	2303      	movs	r3, #3
 80042c4:	e014      	b.n	80042f0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80042c6:	68ba      	ldr	r2, [r7, #8]
 80042c8:	23c0      	movs	r3, #192	@ 0xc0
 80042ca:	00d9      	lsls	r1, r3, #3
 80042cc:	68f8      	ldr	r0, [r7, #12]
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	9300      	str	r3, [sp, #0]
 80042d2:	0013      	movs	r3, r2
 80042d4:	2200      	movs	r2, #0
 80042d6:	f7ff ff27 	bl	8004128 <SPI_WaitFifoStateUntilTimeout>
 80042da:	1e03      	subs	r3, r0, #0
 80042dc:	d007      	beq.n	80042ee <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80042e2:	2220      	movs	r2, #32
 80042e4:	431a      	orrs	r2, r3
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80042ea:	2303      	movs	r3, #3
 80042ec:	e000      	b.n	80042f0 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80042ee:	2300      	movs	r3, #0
}
 80042f0:	0018      	movs	r0, r3
 80042f2:	46bd      	mov	sp, r7
 80042f4:	b004      	add	sp, #16
 80042f6:	bd80      	pop	{r7, pc}

080042f8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80042f8:	b580      	push	{r7, lr}
 80042fa:	b082      	sub	sp, #8
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	2b00      	cmp	r3, #0
 8004304:	d101      	bne.n	800430a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004306:	2301      	movs	r3, #1
 8004308:	e04a      	b.n	80043a0 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	223d      	movs	r2, #61	@ 0x3d
 800430e:	5c9b      	ldrb	r3, [r3, r2]
 8004310:	b2db      	uxtb	r3, r3
 8004312:	2b00      	cmp	r3, #0
 8004314:	d107      	bne.n	8004326 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	223c      	movs	r2, #60	@ 0x3c
 800431a:	2100      	movs	r1, #0
 800431c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	0018      	movs	r0, r3
 8004322:	f7fe fb5f 	bl	80029e4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	223d      	movs	r2, #61	@ 0x3d
 800432a:	2102      	movs	r1, #2
 800432c:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681a      	ldr	r2, [r3, #0]
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	3304      	adds	r3, #4
 8004336:	0019      	movs	r1, r3
 8004338:	0010      	movs	r0, r2
 800433a:	f000 f9b9 	bl	80046b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	2248      	movs	r2, #72	@ 0x48
 8004342:	2101      	movs	r1, #1
 8004344:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	223e      	movs	r2, #62	@ 0x3e
 800434a:	2101      	movs	r1, #1
 800434c:	5499      	strb	r1, [r3, r2]
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	223f      	movs	r2, #63	@ 0x3f
 8004352:	2101      	movs	r1, #1
 8004354:	5499      	strb	r1, [r3, r2]
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	2240      	movs	r2, #64	@ 0x40
 800435a:	2101      	movs	r1, #1
 800435c:	5499      	strb	r1, [r3, r2]
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	2241      	movs	r2, #65	@ 0x41
 8004362:	2101      	movs	r1, #1
 8004364:	5499      	strb	r1, [r3, r2]
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	2242      	movs	r2, #66	@ 0x42
 800436a:	2101      	movs	r1, #1
 800436c:	5499      	strb	r1, [r3, r2]
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	2243      	movs	r2, #67	@ 0x43
 8004372:	2101      	movs	r1, #1
 8004374:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	2244      	movs	r2, #68	@ 0x44
 800437a:	2101      	movs	r1, #1
 800437c:	5499      	strb	r1, [r3, r2]
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	2245      	movs	r2, #69	@ 0x45
 8004382:	2101      	movs	r1, #1
 8004384:	5499      	strb	r1, [r3, r2]
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	2246      	movs	r2, #70	@ 0x46
 800438a:	2101      	movs	r1, #1
 800438c:	5499      	strb	r1, [r3, r2]
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	2247      	movs	r2, #71	@ 0x47
 8004392:	2101      	movs	r1, #1
 8004394:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	223d      	movs	r2, #61	@ 0x3d
 800439a:	2101      	movs	r1, #1
 800439c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800439e:	2300      	movs	r3, #0
}
 80043a0:	0018      	movs	r0, r3
 80043a2:	46bd      	mov	sp, r7
 80043a4:	b002      	add	sp, #8
 80043a6:	bd80      	pop	{r7, pc}

080043a8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80043a8:	b580      	push	{r7, lr}
 80043aa:	b084      	sub	sp, #16
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	223d      	movs	r2, #61	@ 0x3d
 80043b4:	5c9b      	ldrb	r3, [r3, r2]
 80043b6:	b2db      	uxtb	r3, r3
 80043b8:	2b01      	cmp	r3, #1
 80043ba:	d001      	beq.n	80043c0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80043bc:	2301      	movs	r3, #1
 80043be:	e03d      	b.n	800443c <HAL_TIM_Base_Start_IT+0x94>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	223d      	movs	r2, #61	@ 0x3d
 80043c4:	2102      	movs	r1, #2
 80043c6:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	68da      	ldr	r2, [r3, #12]
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	2101      	movs	r1, #1
 80043d4:	430a      	orrs	r2, r1
 80043d6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	4a19      	ldr	r2, [pc, #100]	@ (8004444 <HAL_TIM_Base_Start_IT+0x9c>)
 80043de:	4293      	cmp	r3, r2
 80043e0:	d00a      	beq.n	80043f8 <HAL_TIM_Base_Start_IT+0x50>
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681a      	ldr	r2, [r3, #0]
 80043e6:	2380      	movs	r3, #128	@ 0x80
 80043e8:	05db      	lsls	r3, r3, #23
 80043ea:	429a      	cmp	r2, r3
 80043ec:	d004      	beq.n	80043f8 <HAL_TIM_Base_Start_IT+0x50>
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	4a15      	ldr	r2, [pc, #84]	@ (8004448 <HAL_TIM_Base_Start_IT+0xa0>)
 80043f4:	4293      	cmp	r3, r2
 80043f6:	d116      	bne.n	8004426 <HAL_TIM_Base_Start_IT+0x7e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	689b      	ldr	r3, [r3, #8]
 80043fe:	4a13      	ldr	r2, [pc, #76]	@ (800444c <HAL_TIM_Base_Start_IT+0xa4>)
 8004400:	4013      	ands	r3, r2
 8004402:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	2b06      	cmp	r3, #6
 8004408:	d016      	beq.n	8004438 <HAL_TIM_Base_Start_IT+0x90>
 800440a:	68fa      	ldr	r2, [r7, #12]
 800440c:	2380      	movs	r3, #128	@ 0x80
 800440e:	025b      	lsls	r3, r3, #9
 8004410:	429a      	cmp	r2, r3
 8004412:	d011      	beq.n	8004438 <HAL_TIM_Base_Start_IT+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	681a      	ldr	r2, [r3, #0]
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	2101      	movs	r1, #1
 8004420:	430a      	orrs	r2, r1
 8004422:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004424:	e008      	b.n	8004438 <HAL_TIM_Base_Start_IT+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	681a      	ldr	r2, [r3, #0]
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	2101      	movs	r1, #1
 8004432:	430a      	orrs	r2, r1
 8004434:	601a      	str	r2, [r3, #0]
 8004436:	e000      	b.n	800443a <HAL_TIM_Base_Start_IT+0x92>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004438:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 800443a:	2300      	movs	r3, #0
}
 800443c:	0018      	movs	r0, r3
 800443e:	46bd      	mov	sp, r7
 8004440:	b004      	add	sp, #16
 8004442:	bd80      	pop	{r7, pc}
 8004444:	40012c00 	.word	0x40012c00
 8004448:	40000400 	.word	0x40000400
 800444c:	00010007 	.word	0x00010007

08004450 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004450:	b580      	push	{r7, lr}
 8004452:	b084      	sub	sp, #16
 8004454:	af00      	add	r7, sp, #0
 8004456:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	68db      	ldr	r3, [r3, #12]
 800445e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	691b      	ldr	r3, [r3, #16]
 8004466:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004468:	68bb      	ldr	r3, [r7, #8]
 800446a:	2202      	movs	r2, #2
 800446c:	4013      	ands	r3, r2
 800446e:	d021      	beq.n	80044b4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	2202      	movs	r2, #2
 8004474:	4013      	ands	r3, r2
 8004476:	d01d      	beq.n	80044b4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	2203      	movs	r2, #3
 800447e:	4252      	negs	r2, r2
 8004480:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	2201      	movs	r2, #1
 8004486:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	699b      	ldr	r3, [r3, #24]
 800448e:	2203      	movs	r2, #3
 8004490:	4013      	ands	r3, r2
 8004492:	d004      	beq.n	800449e <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	0018      	movs	r0, r3
 8004498:	f000 f8f2 	bl	8004680 <HAL_TIM_IC_CaptureCallback>
 800449c:	e007      	b.n	80044ae <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	0018      	movs	r0, r3
 80044a2:	f000 f8e5 	bl	8004670 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	0018      	movs	r0, r3
 80044aa:	f000 f8f1 	bl	8004690 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	2200      	movs	r2, #0
 80044b2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80044b4:	68bb      	ldr	r3, [r7, #8]
 80044b6:	2204      	movs	r2, #4
 80044b8:	4013      	ands	r3, r2
 80044ba:	d022      	beq.n	8004502 <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	2204      	movs	r2, #4
 80044c0:	4013      	ands	r3, r2
 80044c2:	d01e      	beq.n	8004502 <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	2205      	movs	r2, #5
 80044ca:	4252      	negs	r2, r2
 80044cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	2202      	movs	r2, #2
 80044d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	699a      	ldr	r2, [r3, #24]
 80044da:	23c0      	movs	r3, #192	@ 0xc0
 80044dc:	009b      	lsls	r3, r3, #2
 80044de:	4013      	ands	r3, r2
 80044e0:	d004      	beq.n	80044ec <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	0018      	movs	r0, r3
 80044e6:	f000 f8cb 	bl	8004680 <HAL_TIM_IC_CaptureCallback>
 80044ea:	e007      	b.n	80044fc <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	0018      	movs	r0, r3
 80044f0:	f000 f8be 	bl	8004670 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	0018      	movs	r0, r3
 80044f8:	f000 f8ca 	bl	8004690 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	2200      	movs	r2, #0
 8004500:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004502:	68bb      	ldr	r3, [r7, #8]
 8004504:	2208      	movs	r2, #8
 8004506:	4013      	ands	r3, r2
 8004508:	d021      	beq.n	800454e <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	2208      	movs	r2, #8
 800450e:	4013      	ands	r3, r2
 8004510:	d01d      	beq.n	800454e <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	2209      	movs	r2, #9
 8004518:	4252      	negs	r2, r2
 800451a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	2204      	movs	r2, #4
 8004520:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	69db      	ldr	r3, [r3, #28]
 8004528:	2203      	movs	r2, #3
 800452a:	4013      	ands	r3, r2
 800452c:	d004      	beq.n	8004538 <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	0018      	movs	r0, r3
 8004532:	f000 f8a5 	bl	8004680 <HAL_TIM_IC_CaptureCallback>
 8004536:	e007      	b.n	8004548 <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	0018      	movs	r0, r3
 800453c:	f000 f898 	bl	8004670 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	0018      	movs	r0, r3
 8004544:	f000 f8a4 	bl	8004690 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	2200      	movs	r2, #0
 800454c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800454e:	68bb      	ldr	r3, [r7, #8]
 8004550:	2210      	movs	r2, #16
 8004552:	4013      	ands	r3, r2
 8004554:	d022      	beq.n	800459c <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	2210      	movs	r2, #16
 800455a:	4013      	ands	r3, r2
 800455c:	d01e      	beq.n	800459c <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	2211      	movs	r2, #17
 8004564:	4252      	negs	r2, r2
 8004566:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	2208      	movs	r2, #8
 800456c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	69da      	ldr	r2, [r3, #28]
 8004574:	23c0      	movs	r3, #192	@ 0xc0
 8004576:	009b      	lsls	r3, r3, #2
 8004578:	4013      	ands	r3, r2
 800457a:	d004      	beq.n	8004586 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	0018      	movs	r0, r3
 8004580:	f000 f87e 	bl	8004680 <HAL_TIM_IC_CaptureCallback>
 8004584:	e007      	b.n	8004596 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	0018      	movs	r0, r3
 800458a:	f000 f871 	bl	8004670 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	0018      	movs	r0, r3
 8004592:	f000 f87d 	bl	8004690 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	2200      	movs	r2, #0
 800459a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800459c:	68bb      	ldr	r3, [r7, #8]
 800459e:	2201      	movs	r2, #1
 80045a0:	4013      	ands	r3, r2
 80045a2:	d00c      	beq.n	80045be <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	2201      	movs	r2, #1
 80045a8:	4013      	ands	r3, r2
 80045aa:	d008      	beq.n	80045be <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	2202      	movs	r2, #2
 80045b2:	4252      	negs	r2, r2
 80045b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	0018      	movs	r0, r3
 80045ba:	f000 f851 	bl	8004660 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80045be:	68bb      	ldr	r3, [r7, #8]
 80045c0:	2280      	movs	r2, #128	@ 0x80
 80045c2:	4013      	ands	r3, r2
 80045c4:	d104      	bne.n	80045d0 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80045c6:	68ba      	ldr	r2, [r7, #8]
 80045c8:	2380      	movs	r3, #128	@ 0x80
 80045ca:	019b      	lsls	r3, r3, #6
 80045cc:	4013      	ands	r3, r2
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80045ce:	d00b      	beq.n	80045e8 <HAL_TIM_IRQHandler+0x198>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	2280      	movs	r2, #128	@ 0x80
 80045d4:	4013      	ands	r3, r2
 80045d6:	d007      	beq.n	80045e8 <HAL_TIM_IRQHandler+0x198>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	4a1e      	ldr	r2, [pc, #120]	@ (8004658 <HAL_TIM_IRQHandler+0x208>)
 80045de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	0018      	movs	r0, r3
 80045e4:	f000 f8f0 	bl	80047c8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80045e8:	68ba      	ldr	r2, [r7, #8]
 80045ea:	2380      	movs	r3, #128	@ 0x80
 80045ec:	005b      	lsls	r3, r3, #1
 80045ee:	4013      	ands	r3, r2
 80045f0:	d00b      	beq.n	800460a <HAL_TIM_IRQHandler+0x1ba>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	2280      	movs	r2, #128	@ 0x80
 80045f6:	4013      	ands	r3, r2
 80045f8:	d007      	beq.n	800460a <HAL_TIM_IRQHandler+0x1ba>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	4a17      	ldr	r2, [pc, #92]	@ (800465c <HAL_TIM_IRQHandler+0x20c>)
 8004600:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	0018      	movs	r0, r3
 8004606:	f000 f8e7 	bl	80047d8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800460a:	68bb      	ldr	r3, [r7, #8]
 800460c:	2240      	movs	r2, #64	@ 0x40
 800460e:	4013      	ands	r3, r2
 8004610:	d00c      	beq.n	800462c <HAL_TIM_IRQHandler+0x1dc>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	2240      	movs	r2, #64	@ 0x40
 8004616:	4013      	ands	r3, r2
 8004618:	d008      	beq.n	800462c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	2241      	movs	r2, #65	@ 0x41
 8004620:	4252      	negs	r2, r2
 8004622:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	0018      	movs	r0, r3
 8004628:	f000 f83a 	bl	80046a0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800462c:	68bb      	ldr	r3, [r7, #8]
 800462e:	2220      	movs	r2, #32
 8004630:	4013      	ands	r3, r2
 8004632:	d00c      	beq.n	800464e <HAL_TIM_IRQHandler+0x1fe>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	2220      	movs	r2, #32
 8004638:	4013      	ands	r3, r2
 800463a:	d008      	beq.n	800464e <HAL_TIM_IRQHandler+0x1fe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	2221      	movs	r2, #33	@ 0x21
 8004642:	4252      	negs	r2, r2
 8004644:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	0018      	movs	r0, r3
 800464a:	f000 f8b5 	bl	80047b8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800464e:	46c0      	nop			@ (mov r8, r8)
 8004650:	46bd      	mov	sp, r7
 8004652:	b004      	add	sp, #16
 8004654:	bd80      	pop	{r7, pc}
 8004656:	46c0      	nop			@ (mov r8, r8)
 8004658:	ffffdf7f 	.word	0xffffdf7f
 800465c:	fffffeff 	.word	0xfffffeff

08004660 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004660:	b580      	push	{r7, lr}
 8004662:	b082      	sub	sp, #8
 8004664:	af00      	add	r7, sp, #0
 8004666:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004668:	46c0      	nop			@ (mov r8, r8)
 800466a:	46bd      	mov	sp, r7
 800466c:	b002      	add	sp, #8
 800466e:	bd80      	pop	{r7, pc}

08004670 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004670:	b580      	push	{r7, lr}
 8004672:	b082      	sub	sp, #8
 8004674:	af00      	add	r7, sp, #0
 8004676:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004678:	46c0      	nop			@ (mov r8, r8)
 800467a:	46bd      	mov	sp, r7
 800467c:	b002      	add	sp, #8
 800467e:	bd80      	pop	{r7, pc}

08004680 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004680:	b580      	push	{r7, lr}
 8004682:	b082      	sub	sp, #8
 8004684:	af00      	add	r7, sp, #0
 8004686:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004688:	46c0      	nop			@ (mov r8, r8)
 800468a:	46bd      	mov	sp, r7
 800468c:	b002      	add	sp, #8
 800468e:	bd80      	pop	{r7, pc}

08004690 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004690:	b580      	push	{r7, lr}
 8004692:	b082      	sub	sp, #8
 8004694:	af00      	add	r7, sp, #0
 8004696:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004698:	46c0      	nop			@ (mov r8, r8)
 800469a:	46bd      	mov	sp, r7
 800469c:	b002      	add	sp, #8
 800469e:	bd80      	pop	{r7, pc}

080046a0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80046a0:	b580      	push	{r7, lr}
 80046a2:	b082      	sub	sp, #8
 80046a4:	af00      	add	r7, sp, #0
 80046a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80046a8:	46c0      	nop			@ (mov r8, r8)
 80046aa:	46bd      	mov	sp, r7
 80046ac:	b002      	add	sp, #8
 80046ae:	bd80      	pop	{r7, pc}

080046b0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80046b0:	b580      	push	{r7, lr}
 80046b2:	b084      	sub	sp, #16
 80046b4:	af00      	add	r7, sp, #0
 80046b6:	6078      	str	r0, [r7, #4]
 80046b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	4a37      	ldr	r2, [pc, #220]	@ (80047a0 <TIM_Base_SetConfig+0xf0>)
 80046c4:	4293      	cmp	r3, r2
 80046c6:	d008      	beq.n	80046da <TIM_Base_SetConfig+0x2a>
 80046c8:	687a      	ldr	r2, [r7, #4]
 80046ca:	2380      	movs	r3, #128	@ 0x80
 80046cc:	05db      	lsls	r3, r3, #23
 80046ce:	429a      	cmp	r2, r3
 80046d0:	d003      	beq.n	80046da <TIM_Base_SetConfig+0x2a>
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	4a33      	ldr	r2, [pc, #204]	@ (80047a4 <TIM_Base_SetConfig+0xf4>)
 80046d6:	4293      	cmp	r3, r2
 80046d8:	d108      	bne.n	80046ec <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	2270      	movs	r2, #112	@ 0x70
 80046de:	4393      	bics	r3, r2
 80046e0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80046e2:	683b      	ldr	r3, [r7, #0]
 80046e4:	685b      	ldr	r3, [r3, #4]
 80046e6:	68fa      	ldr	r2, [r7, #12]
 80046e8:	4313      	orrs	r3, r2
 80046ea:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	4a2c      	ldr	r2, [pc, #176]	@ (80047a0 <TIM_Base_SetConfig+0xf0>)
 80046f0:	4293      	cmp	r3, r2
 80046f2:	d014      	beq.n	800471e <TIM_Base_SetConfig+0x6e>
 80046f4:	687a      	ldr	r2, [r7, #4]
 80046f6:	2380      	movs	r3, #128	@ 0x80
 80046f8:	05db      	lsls	r3, r3, #23
 80046fa:	429a      	cmp	r2, r3
 80046fc:	d00f      	beq.n	800471e <TIM_Base_SetConfig+0x6e>
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	4a28      	ldr	r2, [pc, #160]	@ (80047a4 <TIM_Base_SetConfig+0xf4>)
 8004702:	4293      	cmp	r3, r2
 8004704:	d00b      	beq.n	800471e <TIM_Base_SetConfig+0x6e>
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	4a27      	ldr	r2, [pc, #156]	@ (80047a8 <TIM_Base_SetConfig+0xf8>)
 800470a:	4293      	cmp	r3, r2
 800470c:	d007      	beq.n	800471e <TIM_Base_SetConfig+0x6e>
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	4a26      	ldr	r2, [pc, #152]	@ (80047ac <TIM_Base_SetConfig+0xfc>)
 8004712:	4293      	cmp	r3, r2
 8004714:	d003      	beq.n	800471e <TIM_Base_SetConfig+0x6e>
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	4a25      	ldr	r2, [pc, #148]	@ (80047b0 <TIM_Base_SetConfig+0x100>)
 800471a:	4293      	cmp	r3, r2
 800471c:	d108      	bne.n	8004730 <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	4a24      	ldr	r2, [pc, #144]	@ (80047b4 <TIM_Base_SetConfig+0x104>)
 8004722:	4013      	ands	r3, r2
 8004724:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004726:	683b      	ldr	r3, [r7, #0]
 8004728:	68db      	ldr	r3, [r3, #12]
 800472a:	68fa      	ldr	r2, [r7, #12]
 800472c:	4313      	orrs	r3, r2
 800472e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	2280      	movs	r2, #128	@ 0x80
 8004734:	4393      	bics	r3, r2
 8004736:	001a      	movs	r2, r3
 8004738:	683b      	ldr	r3, [r7, #0]
 800473a:	695b      	ldr	r3, [r3, #20]
 800473c:	4313      	orrs	r3, r2
 800473e:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	68fa      	ldr	r2, [r7, #12]
 8004744:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004746:	683b      	ldr	r3, [r7, #0]
 8004748:	689a      	ldr	r2, [r3, #8]
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800474e:	683b      	ldr	r3, [r7, #0]
 8004750:	681a      	ldr	r2, [r3, #0]
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	4a11      	ldr	r2, [pc, #68]	@ (80047a0 <TIM_Base_SetConfig+0xf0>)
 800475a:	4293      	cmp	r3, r2
 800475c:	d007      	beq.n	800476e <TIM_Base_SetConfig+0xbe>
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	4a12      	ldr	r2, [pc, #72]	@ (80047ac <TIM_Base_SetConfig+0xfc>)
 8004762:	4293      	cmp	r3, r2
 8004764:	d003      	beq.n	800476e <TIM_Base_SetConfig+0xbe>
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	4a11      	ldr	r2, [pc, #68]	@ (80047b0 <TIM_Base_SetConfig+0x100>)
 800476a:	4293      	cmp	r3, r2
 800476c:	d103      	bne.n	8004776 <TIM_Base_SetConfig+0xc6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800476e:	683b      	ldr	r3, [r7, #0]
 8004770:	691a      	ldr	r2, [r3, #16]
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	2201      	movs	r2, #1
 800477a:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	691b      	ldr	r3, [r3, #16]
 8004780:	2201      	movs	r2, #1
 8004782:	4013      	ands	r3, r2
 8004784:	2b01      	cmp	r3, #1
 8004786:	d106      	bne.n	8004796 <TIM_Base_SetConfig+0xe6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	691b      	ldr	r3, [r3, #16]
 800478c:	2201      	movs	r2, #1
 800478e:	4393      	bics	r3, r2
 8004790:	001a      	movs	r2, r3
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	611a      	str	r2, [r3, #16]
  }
}
 8004796:	46c0      	nop			@ (mov r8, r8)
 8004798:	46bd      	mov	sp, r7
 800479a:	b004      	add	sp, #16
 800479c:	bd80      	pop	{r7, pc}
 800479e:	46c0      	nop			@ (mov r8, r8)
 80047a0:	40012c00 	.word	0x40012c00
 80047a4:	40000400 	.word	0x40000400
 80047a8:	40002000 	.word	0x40002000
 80047ac:	40014400 	.word	0x40014400
 80047b0:	40014800 	.word	0x40014800
 80047b4:	fffffcff 	.word	0xfffffcff

080047b8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80047b8:	b580      	push	{r7, lr}
 80047ba:	b082      	sub	sp, #8
 80047bc:	af00      	add	r7, sp, #0
 80047be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80047c0:	46c0      	nop			@ (mov r8, r8)
 80047c2:	46bd      	mov	sp, r7
 80047c4:	b002      	add	sp, #8
 80047c6:	bd80      	pop	{r7, pc}

080047c8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80047c8:	b580      	push	{r7, lr}
 80047ca:	b082      	sub	sp, #8
 80047cc:	af00      	add	r7, sp, #0
 80047ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80047d0:	46c0      	nop			@ (mov r8, r8)
 80047d2:	46bd      	mov	sp, r7
 80047d4:	b002      	add	sp, #8
 80047d6:	bd80      	pop	{r7, pc}

080047d8 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80047d8:	b580      	push	{r7, lr}
 80047da:	b082      	sub	sp, #8
 80047dc:	af00      	add	r7, sp, #0
 80047de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80047e0:	46c0      	nop			@ (mov r8, r8)
 80047e2:	46bd      	mov	sp, r7
 80047e4:	b002      	add	sp, #8
 80047e6:	bd80      	pop	{r7, pc}

080047e8 <memset>:
 80047e8:	0003      	movs	r3, r0
 80047ea:	1882      	adds	r2, r0, r2
 80047ec:	4293      	cmp	r3, r2
 80047ee:	d100      	bne.n	80047f2 <memset+0xa>
 80047f0:	4770      	bx	lr
 80047f2:	7019      	strb	r1, [r3, #0]
 80047f4:	3301      	adds	r3, #1
 80047f6:	e7f9      	b.n	80047ec <memset+0x4>

080047f8 <__libc_init_array>:
 80047f8:	b570      	push	{r4, r5, r6, lr}
 80047fa:	2600      	movs	r6, #0
 80047fc:	4c0c      	ldr	r4, [pc, #48]	@ (8004830 <__libc_init_array+0x38>)
 80047fe:	4d0d      	ldr	r5, [pc, #52]	@ (8004834 <__libc_init_array+0x3c>)
 8004800:	1b64      	subs	r4, r4, r5
 8004802:	10a4      	asrs	r4, r4, #2
 8004804:	42a6      	cmp	r6, r4
 8004806:	d109      	bne.n	800481c <__libc_init_array+0x24>
 8004808:	2600      	movs	r6, #0
 800480a:	f000 ffe3 	bl	80057d4 <_init>
 800480e:	4c0a      	ldr	r4, [pc, #40]	@ (8004838 <__libc_init_array+0x40>)
 8004810:	4d0a      	ldr	r5, [pc, #40]	@ (800483c <__libc_init_array+0x44>)
 8004812:	1b64      	subs	r4, r4, r5
 8004814:	10a4      	asrs	r4, r4, #2
 8004816:	42a6      	cmp	r6, r4
 8004818:	d105      	bne.n	8004826 <__libc_init_array+0x2e>
 800481a:	bd70      	pop	{r4, r5, r6, pc}
 800481c:	00b3      	lsls	r3, r6, #2
 800481e:	58eb      	ldr	r3, [r5, r3]
 8004820:	4798      	blx	r3
 8004822:	3601      	adds	r6, #1
 8004824:	e7ee      	b.n	8004804 <__libc_init_array+0xc>
 8004826:	00b3      	lsls	r3, r6, #2
 8004828:	58eb      	ldr	r3, [r5, r3]
 800482a:	4798      	blx	r3
 800482c:	3601      	adds	r6, #1
 800482e:	e7f2      	b.n	8004816 <__libc_init_array+0x1e>
 8004830:	08005a48 	.word	0x08005a48
 8004834:	08005a48 	.word	0x08005a48
 8004838:	08005a4c 	.word	0x08005a4c
 800483c:	08005a48 	.word	0x08005a48

08004840 <sin>:
 8004840:	b530      	push	{r4, r5, lr}
 8004842:	4a1f      	ldr	r2, [pc, #124]	@ (80048c0 <sin+0x80>)
 8004844:	004b      	lsls	r3, r1, #1
 8004846:	b087      	sub	sp, #28
 8004848:	085b      	lsrs	r3, r3, #1
 800484a:	4293      	cmp	r3, r2
 800484c:	d806      	bhi.n	800485c <sin+0x1c>
 800484e:	2300      	movs	r3, #0
 8004850:	2200      	movs	r2, #0
 8004852:	9300      	str	r3, [sp, #0]
 8004854:	2300      	movs	r3, #0
 8004856:	f000 f8f7 	bl	8004a48 <__kernel_sin>
 800485a:	e006      	b.n	800486a <sin+0x2a>
 800485c:	4a19      	ldr	r2, [pc, #100]	@ (80048c4 <sin+0x84>)
 800485e:	4293      	cmp	r3, r2
 8004860:	d905      	bls.n	800486e <sin+0x2e>
 8004862:	0002      	movs	r2, r0
 8004864:	000b      	movs	r3, r1
 8004866:	f7fd f88f 	bl	8001988 <__aeabi_dsub>
 800486a:	b007      	add	sp, #28
 800486c:	bd30      	pop	{r4, r5, pc}
 800486e:	aa02      	add	r2, sp, #8
 8004870:	f000 f996 	bl	8004ba0 <__ieee754_rem_pio2>
 8004874:	9c04      	ldr	r4, [sp, #16]
 8004876:	9d05      	ldr	r5, [sp, #20]
 8004878:	2303      	movs	r3, #3
 800487a:	4003      	ands	r3, r0
 800487c:	9802      	ldr	r0, [sp, #8]
 800487e:	9903      	ldr	r1, [sp, #12]
 8004880:	2b01      	cmp	r3, #1
 8004882:	d008      	beq.n	8004896 <sin+0x56>
 8004884:	2b02      	cmp	r3, #2
 8004886:	d00b      	beq.n	80048a0 <sin+0x60>
 8004888:	2b00      	cmp	r3, #0
 800488a:	d113      	bne.n	80048b4 <sin+0x74>
 800488c:	3301      	adds	r3, #1
 800488e:	9300      	str	r3, [sp, #0]
 8004890:	0022      	movs	r2, r4
 8004892:	002b      	movs	r3, r5
 8004894:	e7df      	b.n	8004856 <sin+0x16>
 8004896:	0022      	movs	r2, r4
 8004898:	002b      	movs	r3, r5
 800489a:	f000 f815 	bl	80048c8 <__kernel_cos>
 800489e:	e7e4      	b.n	800486a <sin+0x2a>
 80048a0:	2301      	movs	r3, #1
 80048a2:	0022      	movs	r2, r4
 80048a4:	9300      	str	r3, [sp, #0]
 80048a6:	002b      	movs	r3, r5
 80048a8:	f000 f8ce 	bl	8004a48 <__kernel_sin>
 80048ac:	2380      	movs	r3, #128	@ 0x80
 80048ae:	061b      	lsls	r3, r3, #24
 80048b0:	18c9      	adds	r1, r1, r3
 80048b2:	e7da      	b.n	800486a <sin+0x2a>
 80048b4:	0022      	movs	r2, r4
 80048b6:	002b      	movs	r3, r5
 80048b8:	f000 f806 	bl	80048c8 <__kernel_cos>
 80048bc:	e7f6      	b.n	80048ac <sin+0x6c>
 80048be:	46c0      	nop			@ (mov r8, r8)
 80048c0:	3fe921fb 	.word	0x3fe921fb
 80048c4:	7fefffff 	.word	0x7fefffff

080048c8 <__kernel_cos>:
 80048c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80048ca:	b087      	sub	sp, #28
 80048cc:	9204      	str	r2, [sp, #16]
 80048ce:	9305      	str	r3, [sp, #20]
 80048d0:	004b      	lsls	r3, r1, #1
 80048d2:	085b      	lsrs	r3, r3, #1
 80048d4:	9301      	str	r3, [sp, #4]
 80048d6:	23f9      	movs	r3, #249	@ 0xf9
 80048d8:	9a01      	ldr	r2, [sp, #4]
 80048da:	0004      	movs	r4, r0
 80048dc:	000d      	movs	r5, r1
 80048de:	059b      	lsls	r3, r3, #22
 80048e0:	429a      	cmp	r2, r3
 80048e2:	d204      	bcs.n	80048ee <__kernel_cos+0x26>
 80048e4:	f7fd fbec 	bl	80020c0 <__aeabi_d2iz>
 80048e8:	2800      	cmp	r0, #0
 80048ea:	d100      	bne.n	80048ee <__kernel_cos+0x26>
 80048ec:	e084      	b.n	80049f8 <__kernel_cos+0x130>
 80048ee:	0022      	movs	r2, r4
 80048f0:	002b      	movs	r3, r5
 80048f2:	0020      	movs	r0, r4
 80048f4:	0029      	movs	r1, r5
 80048f6:	f7fc fd7f 	bl	80013f8 <__aeabi_dmul>
 80048fa:	2200      	movs	r2, #0
 80048fc:	4b40      	ldr	r3, [pc, #256]	@ (8004a00 <__kernel_cos+0x138>)
 80048fe:	0006      	movs	r6, r0
 8004900:	000f      	movs	r7, r1
 8004902:	f7fc fd79 	bl	80013f8 <__aeabi_dmul>
 8004906:	4a3f      	ldr	r2, [pc, #252]	@ (8004a04 <__kernel_cos+0x13c>)
 8004908:	9002      	str	r0, [sp, #8]
 800490a:	9103      	str	r1, [sp, #12]
 800490c:	4b3e      	ldr	r3, [pc, #248]	@ (8004a08 <__kernel_cos+0x140>)
 800490e:	0030      	movs	r0, r6
 8004910:	0039      	movs	r1, r7
 8004912:	f7fc fd71 	bl	80013f8 <__aeabi_dmul>
 8004916:	4a3d      	ldr	r2, [pc, #244]	@ (8004a0c <__kernel_cos+0x144>)
 8004918:	4b3d      	ldr	r3, [pc, #244]	@ (8004a10 <__kernel_cos+0x148>)
 800491a:	f7fb fdc5 	bl	80004a8 <__aeabi_dadd>
 800491e:	0032      	movs	r2, r6
 8004920:	003b      	movs	r3, r7
 8004922:	f7fc fd69 	bl	80013f8 <__aeabi_dmul>
 8004926:	4a3b      	ldr	r2, [pc, #236]	@ (8004a14 <__kernel_cos+0x14c>)
 8004928:	4b3b      	ldr	r3, [pc, #236]	@ (8004a18 <__kernel_cos+0x150>)
 800492a:	f7fd f82d 	bl	8001988 <__aeabi_dsub>
 800492e:	0032      	movs	r2, r6
 8004930:	003b      	movs	r3, r7
 8004932:	f7fc fd61 	bl	80013f8 <__aeabi_dmul>
 8004936:	4a39      	ldr	r2, [pc, #228]	@ (8004a1c <__kernel_cos+0x154>)
 8004938:	4b39      	ldr	r3, [pc, #228]	@ (8004a20 <__kernel_cos+0x158>)
 800493a:	f7fb fdb5 	bl	80004a8 <__aeabi_dadd>
 800493e:	0032      	movs	r2, r6
 8004940:	003b      	movs	r3, r7
 8004942:	f7fc fd59 	bl	80013f8 <__aeabi_dmul>
 8004946:	4a37      	ldr	r2, [pc, #220]	@ (8004a24 <__kernel_cos+0x15c>)
 8004948:	4b37      	ldr	r3, [pc, #220]	@ (8004a28 <__kernel_cos+0x160>)
 800494a:	f7fd f81d 	bl	8001988 <__aeabi_dsub>
 800494e:	0032      	movs	r2, r6
 8004950:	003b      	movs	r3, r7
 8004952:	f7fc fd51 	bl	80013f8 <__aeabi_dmul>
 8004956:	4a35      	ldr	r2, [pc, #212]	@ (8004a2c <__kernel_cos+0x164>)
 8004958:	4b35      	ldr	r3, [pc, #212]	@ (8004a30 <__kernel_cos+0x168>)
 800495a:	f7fb fda5 	bl	80004a8 <__aeabi_dadd>
 800495e:	0032      	movs	r2, r6
 8004960:	003b      	movs	r3, r7
 8004962:	f7fc fd49 	bl	80013f8 <__aeabi_dmul>
 8004966:	0032      	movs	r2, r6
 8004968:	003b      	movs	r3, r7
 800496a:	f7fc fd45 	bl	80013f8 <__aeabi_dmul>
 800496e:	9a04      	ldr	r2, [sp, #16]
 8004970:	9b05      	ldr	r3, [sp, #20]
 8004972:	0006      	movs	r6, r0
 8004974:	000f      	movs	r7, r1
 8004976:	0020      	movs	r0, r4
 8004978:	0029      	movs	r1, r5
 800497a:	f7fc fd3d 	bl	80013f8 <__aeabi_dmul>
 800497e:	0002      	movs	r2, r0
 8004980:	000b      	movs	r3, r1
 8004982:	0030      	movs	r0, r6
 8004984:	0039      	movs	r1, r7
 8004986:	f7fc ffff 	bl	8001988 <__aeabi_dsub>
 800498a:	4b2a      	ldr	r3, [pc, #168]	@ (8004a34 <__kernel_cos+0x16c>)
 800498c:	9a01      	ldr	r2, [sp, #4]
 800498e:	9004      	str	r0, [sp, #16]
 8004990:	9105      	str	r1, [sp, #20]
 8004992:	429a      	cmp	r2, r3
 8004994:	d80d      	bhi.n	80049b2 <__kernel_cos+0xea>
 8004996:	0002      	movs	r2, r0
 8004998:	000b      	movs	r3, r1
 800499a:	9802      	ldr	r0, [sp, #8]
 800499c:	9903      	ldr	r1, [sp, #12]
 800499e:	f7fc fff3 	bl	8001988 <__aeabi_dsub>
 80049a2:	0002      	movs	r2, r0
 80049a4:	2000      	movs	r0, #0
 80049a6:	000b      	movs	r3, r1
 80049a8:	4923      	ldr	r1, [pc, #140]	@ (8004a38 <__kernel_cos+0x170>)
 80049aa:	f7fc ffed 	bl	8001988 <__aeabi_dsub>
 80049ae:	b007      	add	sp, #28
 80049b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80049b2:	4b22      	ldr	r3, [pc, #136]	@ (8004a3c <__kernel_cos+0x174>)
 80049b4:	9a01      	ldr	r2, [sp, #4]
 80049b6:	2600      	movs	r6, #0
 80049b8:	429a      	cmp	r2, r3
 80049ba:	d81b      	bhi.n	80049f4 <__kernel_cos+0x12c>
 80049bc:	0013      	movs	r3, r2
 80049be:	4a20      	ldr	r2, [pc, #128]	@ (8004a40 <__kernel_cos+0x178>)
 80049c0:	4694      	mov	ip, r2
 80049c2:	4463      	add	r3, ip
 80049c4:	001f      	movs	r7, r3
 80049c6:	0032      	movs	r2, r6
 80049c8:	003b      	movs	r3, r7
 80049ca:	2000      	movs	r0, #0
 80049cc:	491a      	ldr	r1, [pc, #104]	@ (8004a38 <__kernel_cos+0x170>)
 80049ce:	f7fc ffdb 	bl	8001988 <__aeabi_dsub>
 80049d2:	0032      	movs	r2, r6
 80049d4:	0004      	movs	r4, r0
 80049d6:	000d      	movs	r5, r1
 80049d8:	9802      	ldr	r0, [sp, #8]
 80049da:	9903      	ldr	r1, [sp, #12]
 80049dc:	003b      	movs	r3, r7
 80049de:	f7fc ffd3 	bl	8001988 <__aeabi_dsub>
 80049e2:	9a04      	ldr	r2, [sp, #16]
 80049e4:	9b05      	ldr	r3, [sp, #20]
 80049e6:	f7fc ffcf 	bl	8001988 <__aeabi_dsub>
 80049ea:	0002      	movs	r2, r0
 80049ec:	000b      	movs	r3, r1
 80049ee:	0020      	movs	r0, r4
 80049f0:	0029      	movs	r1, r5
 80049f2:	e7da      	b.n	80049aa <__kernel_cos+0xe2>
 80049f4:	4f13      	ldr	r7, [pc, #76]	@ (8004a44 <__kernel_cos+0x17c>)
 80049f6:	e7e6      	b.n	80049c6 <__kernel_cos+0xfe>
 80049f8:	2000      	movs	r0, #0
 80049fa:	490f      	ldr	r1, [pc, #60]	@ (8004a38 <__kernel_cos+0x170>)
 80049fc:	e7d7      	b.n	80049ae <__kernel_cos+0xe6>
 80049fe:	46c0      	nop			@ (mov r8, r8)
 8004a00:	3fe00000 	.word	0x3fe00000
 8004a04:	be8838d4 	.word	0xbe8838d4
 8004a08:	bda8fae9 	.word	0xbda8fae9
 8004a0c:	bdb4b1c4 	.word	0xbdb4b1c4
 8004a10:	3e21ee9e 	.word	0x3e21ee9e
 8004a14:	809c52ad 	.word	0x809c52ad
 8004a18:	3e927e4f 	.word	0x3e927e4f
 8004a1c:	19cb1590 	.word	0x19cb1590
 8004a20:	3efa01a0 	.word	0x3efa01a0
 8004a24:	16c15177 	.word	0x16c15177
 8004a28:	3f56c16c 	.word	0x3f56c16c
 8004a2c:	5555554c 	.word	0x5555554c
 8004a30:	3fa55555 	.word	0x3fa55555
 8004a34:	3fd33332 	.word	0x3fd33332
 8004a38:	3ff00000 	.word	0x3ff00000
 8004a3c:	3fe90000 	.word	0x3fe90000
 8004a40:	ffe00000 	.word	0xffe00000
 8004a44:	3fd20000 	.word	0x3fd20000

08004a48 <__kernel_sin>:
 8004a48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004a4a:	b089      	sub	sp, #36	@ 0x24
 8004a4c:	9202      	str	r2, [sp, #8]
 8004a4e:	9303      	str	r3, [sp, #12]
 8004a50:	22f9      	movs	r2, #249	@ 0xf9
 8004a52:	004b      	lsls	r3, r1, #1
 8004a54:	0006      	movs	r6, r0
 8004a56:	000f      	movs	r7, r1
 8004a58:	085b      	lsrs	r3, r3, #1
 8004a5a:	0592      	lsls	r2, r2, #22
 8004a5c:	4293      	cmp	r3, r2
 8004a5e:	d203      	bcs.n	8004a68 <__kernel_sin+0x20>
 8004a60:	f7fd fb2e 	bl	80020c0 <__aeabi_d2iz>
 8004a64:	2800      	cmp	r0, #0
 8004a66:	d04c      	beq.n	8004b02 <__kernel_sin+0xba>
 8004a68:	0032      	movs	r2, r6
 8004a6a:	003b      	movs	r3, r7
 8004a6c:	0030      	movs	r0, r6
 8004a6e:	0039      	movs	r1, r7
 8004a70:	f7fc fcc2 	bl	80013f8 <__aeabi_dmul>
 8004a74:	0004      	movs	r4, r0
 8004a76:	000d      	movs	r5, r1
 8004a78:	0002      	movs	r2, r0
 8004a7a:	000b      	movs	r3, r1
 8004a7c:	0030      	movs	r0, r6
 8004a7e:	0039      	movs	r1, r7
 8004a80:	f7fc fcba 	bl	80013f8 <__aeabi_dmul>
 8004a84:	4a39      	ldr	r2, [pc, #228]	@ (8004b6c <__kernel_sin+0x124>)
 8004a86:	9000      	str	r0, [sp, #0]
 8004a88:	9101      	str	r1, [sp, #4]
 8004a8a:	4b39      	ldr	r3, [pc, #228]	@ (8004b70 <__kernel_sin+0x128>)
 8004a8c:	0020      	movs	r0, r4
 8004a8e:	0029      	movs	r1, r5
 8004a90:	f7fc fcb2 	bl	80013f8 <__aeabi_dmul>
 8004a94:	4a37      	ldr	r2, [pc, #220]	@ (8004b74 <__kernel_sin+0x12c>)
 8004a96:	4b38      	ldr	r3, [pc, #224]	@ (8004b78 <__kernel_sin+0x130>)
 8004a98:	f7fc ff76 	bl	8001988 <__aeabi_dsub>
 8004a9c:	0022      	movs	r2, r4
 8004a9e:	002b      	movs	r3, r5
 8004aa0:	f7fc fcaa 	bl	80013f8 <__aeabi_dmul>
 8004aa4:	4a35      	ldr	r2, [pc, #212]	@ (8004b7c <__kernel_sin+0x134>)
 8004aa6:	4b36      	ldr	r3, [pc, #216]	@ (8004b80 <__kernel_sin+0x138>)
 8004aa8:	f7fb fcfe 	bl	80004a8 <__aeabi_dadd>
 8004aac:	0022      	movs	r2, r4
 8004aae:	002b      	movs	r3, r5
 8004ab0:	f7fc fca2 	bl	80013f8 <__aeabi_dmul>
 8004ab4:	4a33      	ldr	r2, [pc, #204]	@ (8004b84 <__kernel_sin+0x13c>)
 8004ab6:	4b34      	ldr	r3, [pc, #208]	@ (8004b88 <__kernel_sin+0x140>)
 8004ab8:	f7fc ff66 	bl	8001988 <__aeabi_dsub>
 8004abc:	0022      	movs	r2, r4
 8004abe:	002b      	movs	r3, r5
 8004ac0:	f7fc fc9a 	bl	80013f8 <__aeabi_dmul>
 8004ac4:	4b31      	ldr	r3, [pc, #196]	@ (8004b8c <__kernel_sin+0x144>)
 8004ac6:	4a32      	ldr	r2, [pc, #200]	@ (8004b90 <__kernel_sin+0x148>)
 8004ac8:	f7fb fcee 	bl	80004a8 <__aeabi_dadd>
 8004acc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004ace:	9004      	str	r0, [sp, #16]
 8004ad0:	9105      	str	r1, [sp, #20]
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d119      	bne.n	8004b0a <__kernel_sin+0xc2>
 8004ad6:	0002      	movs	r2, r0
 8004ad8:	000b      	movs	r3, r1
 8004ada:	0020      	movs	r0, r4
 8004adc:	0029      	movs	r1, r5
 8004ade:	f7fc fc8b 	bl	80013f8 <__aeabi_dmul>
 8004ae2:	4a2c      	ldr	r2, [pc, #176]	@ (8004b94 <__kernel_sin+0x14c>)
 8004ae4:	4b2c      	ldr	r3, [pc, #176]	@ (8004b98 <__kernel_sin+0x150>)
 8004ae6:	f7fc ff4f 	bl	8001988 <__aeabi_dsub>
 8004aea:	9a00      	ldr	r2, [sp, #0]
 8004aec:	9b01      	ldr	r3, [sp, #4]
 8004aee:	f7fc fc83 	bl	80013f8 <__aeabi_dmul>
 8004af2:	0002      	movs	r2, r0
 8004af4:	000b      	movs	r3, r1
 8004af6:	0030      	movs	r0, r6
 8004af8:	0039      	movs	r1, r7
 8004afa:	f7fb fcd5 	bl	80004a8 <__aeabi_dadd>
 8004afe:	0006      	movs	r6, r0
 8004b00:	000f      	movs	r7, r1
 8004b02:	0030      	movs	r0, r6
 8004b04:	0039      	movs	r1, r7
 8004b06:	b009      	add	sp, #36	@ 0x24
 8004b08:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004b0a:	2200      	movs	r2, #0
 8004b0c:	9802      	ldr	r0, [sp, #8]
 8004b0e:	9903      	ldr	r1, [sp, #12]
 8004b10:	4b22      	ldr	r3, [pc, #136]	@ (8004b9c <__kernel_sin+0x154>)
 8004b12:	f7fc fc71 	bl	80013f8 <__aeabi_dmul>
 8004b16:	9a04      	ldr	r2, [sp, #16]
 8004b18:	9b05      	ldr	r3, [sp, #20]
 8004b1a:	9006      	str	r0, [sp, #24]
 8004b1c:	9107      	str	r1, [sp, #28]
 8004b1e:	9800      	ldr	r0, [sp, #0]
 8004b20:	9901      	ldr	r1, [sp, #4]
 8004b22:	f7fc fc69 	bl	80013f8 <__aeabi_dmul>
 8004b26:	0002      	movs	r2, r0
 8004b28:	000b      	movs	r3, r1
 8004b2a:	9806      	ldr	r0, [sp, #24]
 8004b2c:	9907      	ldr	r1, [sp, #28]
 8004b2e:	f7fc ff2b 	bl	8001988 <__aeabi_dsub>
 8004b32:	0022      	movs	r2, r4
 8004b34:	002b      	movs	r3, r5
 8004b36:	f7fc fc5f 	bl	80013f8 <__aeabi_dmul>
 8004b3a:	9a02      	ldr	r2, [sp, #8]
 8004b3c:	9b03      	ldr	r3, [sp, #12]
 8004b3e:	f7fc ff23 	bl	8001988 <__aeabi_dsub>
 8004b42:	4a14      	ldr	r2, [pc, #80]	@ (8004b94 <__kernel_sin+0x14c>)
 8004b44:	0004      	movs	r4, r0
 8004b46:	000d      	movs	r5, r1
 8004b48:	9800      	ldr	r0, [sp, #0]
 8004b4a:	9901      	ldr	r1, [sp, #4]
 8004b4c:	4b12      	ldr	r3, [pc, #72]	@ (8004b98 <__kernel_sin+0x150>)
 8004b4e:	f7fc fc53 	bl	80013f8 <__aeabi_dmul>
 8004b52:	0002      	movs	r2, r0
 8004b54:	000b      	movs	r3, r1
 8004b56:	0020      	movs	r0, r4
 8004b58:	0029      	movs	r1, r5
 8004b5a:	f7fb fca5 	bl	80004a8 <__aeabi_dadd>
 8004b5e:	0002      	movs	r2, r0
 8004b60:	000b      	movs	r3, r1
 8004b62:	0030      	movs	r0, r6
 8004b64:	0039      	movs	r1, r7
 8004b66:	f7fc ff0f 	bl	8001988 <__aeabi_dsub>
 8004b6a:	e7c8      	b.n	8004afe <__kernel_sin+0xb6>
 8004b6c:	5acfd57c 	.word	0x5acfd57c
 8004b70:	3de5d93a 	.word	0x3de5d93a
 8004b74:	8a2b9ceb 	.word	0x8a2b9ceb
 8004b78:	3e5ae5e6 	.word	0x3e5ae5e6
 8004b7c:	57b1fe7d 	.word	0x57b1fe7d
 8004b80:	3ec71de3 	.word	0x3ec71de3
 8004b84:	19c161d5 	.word	0x19c161d5
 8004b88:	3f2a01a0 	.word	0x3f2a01a0
 8004b8c:	3f811111 	.word	0x3f811111
 8004b90:	1110f8a6 	.word	0x1110f8a6
 8004b94:	55555549 	.word	0x55555549
 8004b98:	3fc55555 	.word	0x3fc55555
 8004b9c:	3fe00000 	.word	0x3fe00000

08004ba0 <__ieee754_rem_pio2>:
 8004ba0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004ba2:	4baf      	ldr	r3, [pc, #700]	@ (8004e60 <__ieee754_rem_pio2+0x2c0>)
 8004ba4:	b095      	sub	sp, #84	@ 0x54
 8004ba6:	004d      	lsls	r5, r1, #1
 8004ba8:	0017      	movs	r7, r2
 8004baa:	910d      	str	r1, [sp, #52]	@ 0x34
 8004bac:	086d      	lsrs	r5, r5, #1
 8004bae:	429d      	cmp	r5, r3
 8004bb0:	d807      	bhi.n	8004bc2 <__ieee754_rem_pio2+0x22>
 8004bb2:	6010      	str	r0, [r2, #0]
 8004bb4:	6051      	str	r1, [r2, #4]
 8004bb6:	2300      	movs	r3, #0
 8004bb8:	2200      	movs	r2, #0
 8004bba:	60ba      	str	r2, [r7, #8]
 8004bbc:	60fb      	str	r3, [r7, #12]
 8004bbe:	2300      	movs	r3, #0
 8004bc0:	e024      	b.n	8004c0c <__ieee754_rem_pio2+0x6c>
 8004bc2:	4ba8      	ldr	r3, [pc, #672]	@ (8004e64 <__ieee754_rem_pio2+0x2c4>)
 8004bc4:	429d      	cmp	r5, r3
 8004bc6:	d900      	bls.n	8004bca <__ieee754_rem_pio2+0x2a>
 8004bc8:	e072      	b.n	8004cb0 <__ieee754_rem_pio2+0x110>
 8004bca:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004bcc:	4ca6      	ldr	r4, [pc, #664]	@ (8004e68 <__ieee754_rem_pio2+0x2c8>)
 8004bce:	4aa7      	ldr	r2, [pc, #668]	@ (8004e6c <__ieee754_rem_pio2+0x2cc>)
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	dd37      	ble.n	8004c44 <__ieee754_rem_pio2+0xa4>
 8004bd4:	4ba4      	ldr	r3, [pc, #656]	@ (8004e68 <__ieee754_rem_pio2+0x2c8>)
 8004bd6:	f7fc fed7 	bl	8001988 <__aeabi_dsub>
 8004bda:	9002      	str	r0, [sp, #8]
 8004bdc:	9103      	str	r1, [sp, #12]
 8004bde:	42a5      	cmp	r5, r4
 8004be0:	d018      	beq.n	8004c14 <__ieee754_rem_pio2+0x74>
 8004be2:	4aa3      	ldr	r2, [pc, #652]	@ (8004e70 <__ieee754_rem_pio2+0x2d0>)
 8004be4:	4ba3      	ldr	r3, [pc, #652]	@ (8004e74 <__ieee754_rem_pio2+0x2d4>)
 8004be6:	f7fc fecf 	bl	8001988 <__aeabi_dsub>
 8004bea:	0002      	movs	r2, r0
 8004bec:	000b      	movs	r3, r1
 8004bee:	0004      	movs	r4, r0
 8004bf0:	000d      	movs	r5, r1
 8004bf2:	9802      	ldr	r0, [sp, #8]
 8004bf4:	9903      	ldr	r1, [sp, #12]
 8004bf6:	f7fc fec7 	bl	8001988 <__aeabi_dsub>
 8004bfa:	4a9d      	ldr	r2, [pc, #628]	@ (8004e70 <__ieee754_rem_pio2+0x2d0>)
 8004bfc:	4b9d      	ldr	r3, [pc, #628]	@ (8004e74 <__ieee754_rem_pio2+0x2d4>)
 8004bfe:	f7fc fec3 	bl	8001988 <__aeabi_dsub>
 8004c02:	2301      	movs	r3, #1
 8004c04:	603c      	str	r4, [r7, #0]
 8004c06:	607d      	str	r5, [r7, #4]
 8004c08:	60b8      	str	r0, [r7, #8]
 8004c0a:	60f9      	str	r1, [r7, #12]
 8004c0c:	9302      	str	r3, [sp, #8]
 8004c0e:	9802      	ldr	r0, [sp, #8]
 8004c10:	b015      	add	sp, #84	@ 0x54
 8004c12:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004c14:	22d3      	movs	r2, #211	@ 0xd3
 8004c16:	9802      	ldr	r0, [sp, #8]
 8004c18:	9903      	ldr	r1, [sp, #12]
 8004c1a:	4b96      	ldr	r3, [pc, #600]	@ (8004e74 <__ieee754_rem_pio2+0x2d4>)
 8004c1c:	0552      	lsls	r2, r2, #21
 8004c1e:	f7fc feb3 	bl	8001988 <__aeabi_dsub>
 8004c22:	4a95      	ldr	r2, [pc, #596]	@ (8004e78 <__ieee754_rem_pio2+0x2d8>)
 8004c24:	4b95      	ldr	r3, [pc, #596]	@ (8004e7c <__ieee754_rem_pio2+0x2dc>)
 8004c26:	9002      	str	r0, [sp, #8]
 8004c28:	9103      	str	r1, [sp, #12]
 8004c2a:	f7fc fead 	bl	8001988 <__aeabi_dsub>
 8004c2e:	0002      	movs	r2, r0
 8004c30:	000b      	movs	r3, r1
 8004c32:	0004      	movs	r4, r0
 8004c34:	000d      	movs	r5, r1
 8004c36:	9802      	ldr	r0, [sp, #8]
 8004c38:	9903      	ldr	r1, [sp, #12]
 8004c3a:	f7fc fea5 	bl	8001988 <__aeabi_dsub>
 8004c3e:	4a8e      	ldr	r2, [pc, #568]	@ (8004e78 <__ieee754_rem_pio2+0x2d8>)
 8004c40:	4b8e      	ldr	r3, [pc, #568]	@ (8004e7c <__ieee754_rem_pio2+0x2dc>)
 8004c42:	e7dc      	b.n	8004bfe <__ieee754_rem_pio2+0x5e>
 8004c44:	4b88      	ldr	r3, [pc, #544]	@ (8004e68 <__ieee754_rem_pio2+0x2c8>)
 8004c46:	f7fb fc2f 	bl	80004a8 <__aeabi_dadd>
 8004c4a:	9002      	str	r0, [sp, #8]
 8004c4c:	9103      	str	r1, [sp, #12]
 8004c4e:	42a5      	cmp	r5, r4
 8004c50:	d016      	beq.n	8004c80 <__ieee754_rem_pio2+0xe0>
 8004c52:	4a87      	ldr	r2, [pc, #540]	@ (8004e70 <__ieee754_rem_pio2+0x2d0>)
 8004c54:	4b87      	ldr	r3, [pc, #540]	@ (8004e74 <__ieee754_rem_pio2+0x2d4>)
 8004c56:	f7fb fc27 	bl	80004a8 <__aeabi_dadd>
 8004c5a:	0002      	movs	r2, r0
 8004c5c:	000b      	movs	r3, r1
 8004c5e:	0004      	movs	r4, r0
 8004c60:	000d      	movs	r5, r1
 8004c62:	9802      	ldr	r0, [sp, #8]
 8004c64:	9903      	ldr	r1, [sp, #12]
 8004c66:	f7fc fe8f 	bl	8001988 <__aeabi_dsub>
 8004c6a:	4a81      	ldr	r2, [pc, #516]	@ (8004e70 <__ieee754_rem_pio2+0x2d0>)
 8004c6c:	4b81      	ldr	r3, [pc, #516]	@ (8004e74 <__ieee754_rem_pio2+0x2d4>)
 8004c6e:	f7fb fc1b 	bl	80004a8 <__aeabi_dadd>
 8004c72:	2301      	movs	r3, #1
 8004c74:	603c      	str	r4, [r7, #0]
 8004c76:	607d      	str	r5, [r7, #4]
 8004c78:	60b8      	str	r0, [r7, #8]
 8004c7a:	60f9      	str	r1, [r7, #12]
 8004c7c:	425b      	negs	r3, r3
 8004c7e:	e7c5      	b.n	8004c0c <__ieee754_rem_pio2+0x6c>
 8004c80:	22d3      	movs	r2, #211	@ 0xd3
 8004c82:	9802      	ldr	r0, [sp, #8]
 8004c84:	9903      	ldr	r1, [sp, #12]
 8004c86:	4b7b      	ldr	r3, [pc, #492]	@ (8004e74 <__ieee754_rem_pio2+0x2d4>)
 8004c88:	0552      	lsls	r2, r2, #21
 8004c8a:	f7fb fc0d 	bl	80004a8 <__aeabi_dadd>
 8004c8e:	4a7a      	ldr	r2, [pc, #488]	@ (8004e78 <__ieee754_rem_pio2+0x2d8>)
 8004c90:	4b7a      	ldr	r3, [pc, #488]	@ (8004e7c <__ieee754_rem_pio2+0x2dc>)
 8004c92:	9002      	str	r0, [sp, #8]
 8004c94:	9103      	str	r1, [sp, #12]
 8004c96:	f7fb fc07 	bl	80004a8 <__aeabi_dadd>
 8004c9a:	0002      	movs	r2, r0
 8004c9c:	000b      	movs	r3, r1
 8004c9e:	0004      	movs	r4, r0
 8004ca0:	000d      	movs	r5, r1
 8004ca2:	9802      	ldr	r0, [sp, #8]
 8004ca4:	9903      	ldr	r1, [sp, #12]
 8004ca6:	f7fc fe6f 	bl	8001988 <__aeabi_dsub>
 8004caa:	4a73      	ldr	r2, [pc, #460]	@ (8004e78 <__ieee754_rem_pio2+0x2d8>)
 8004cac:	4b73      	ldr	r3, [pc, #460]	@ (8004e7c <__ieee754_rem_pio2+0x2dc>)
 8004cae:	e7de      	b.n	8004c6e <__ieee754_rem_pio2+0xce>
 8004cb0:	4b73      	ldr	r3, [pc, #460]	@ (8004e80 <__ieee754_rem_pio2+0x2e0>)
 8004cb2:	429d      	cmp	r5, r3
 8004cb4:	d900      	bls.n	8004cb8 <__ieee754_rem_pio2+0x118>
 8004cb6:	e0c6      	b.n	8004e46 <__ieee754_rem_pio2+0x2a6>
 8004cb8:	f000 f94e 	bl	8004f58 <fabs>
 8004cbc:	4a71      	ldr	r2, [pc, #452]	@ (8004e84 <__ieee754_rem_pio2+0x2e4>)
 8004cbe:	4b72      	ldr	r3, [pc, #456]	@ (8004e88 <__ieee754_rem_pio2+0x2e8>)
 8004cc0:	9004      	str	r0, [sp, #16]
 8004cc2:	9105      	str	r1, [sp, #20]
 8004cc4:	f7fc fb98 	bl	80013f8 <__aeabi_dmul>
 8004cc8:	2200      	movs	r2, #0
 8004cca:	4b70      	ldr	r3, [pc, #448]	@ (8004e8c <__ieee754_rem_pio2+0x2ec>)
 8004ccc:	f7fb fbec 	bl	80004a8 <__aeabi_dadd>
 8004cd0:	f7fd f9f6 	bl	80020c0 <__aeabi_d2iz>
 8004cd4:	9002      	str	r0, [sp, #8]
 8004cd6:	f7fd fa2f 	bl	8002138 <__aeabi_i2d>
 8004cda:	4a64      	ldr	r2, [pc, #400]	@ (8004e6c <__ieee754_rem_pio2+0x2cc>)
 8004cdc:	4b62      	ldr	r3, [pc, #392]	@ (8004e68 <__ieee754_rem_pio2+0x2c8>)
 8004cde:	9008      	str	r0, [sp, #32]
 8004ce0:	9109      	str	r1, [sp, #36]	@ 0x24
 8004ce2:	f7fc fb89 	bl	80013f8 <__aeabi_dmul>
 8004ce6:	0002      	movs	r2, r0
 8004ce8:	000b      	movs	r3, r1
 8004cea:	9804      	ldr	r0, [sp, #16]
 8004cec:	9905      	ldr	r1, [sp, #20]
 8004cee:	f7fc fe4b 	bl	8001988 <__aeabi_dsub>
 8004cf2:	4b60      	ldr	r3, [pc, #384]	@ (8004e74 <__ieee754_rem_pio2+0x2d4>)
 8004cf4:	9004      	str	r0, [sp, #16]
 8004cf6:	9105      	str	r1, [sp, #20]
 8004cf8:	9808      	ldr	r0, [sp, #32]
 8004cfa:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8004cfc:	4a5c      	ldr	r2, [pc, #368]	@ (8004e70 <__ieee754_rem_pio2+0x2d0>)
 8004cfe:	f7fc fb7b 	bl	80013f8 <__aeabi_dmul>
 8004d02:	9b02      	ldr	r3, [sp, #8]
 8004d04:	9006      	str	r0, [sp, #24]
 8004d06:	9107      	str	r1, [sp, #28]
 8004d08:	2b1f      	cmp	r3, #31
 8004d0a:	dc0d      	bgt.n	8004d28 <__ieee754_rem_pio2+0x188>
 8004d0c:	9a02      	ldr	r2, [sp, #8]
 8004d0e:	4b60      	ldr	r3, [pc, #384]	@ (8004e90 <__ieee754_rem_pio2+0x2f0>)
 8004d10:	3a01      	subs	r2, #1
 8004d12:	0092      	lsls	r2, r2, #2
 8004d14:	58d3      	ldr	r3, [r2, r3]
 8004d16:	42ab      	cmp	r3, r5
 8004d18:	d006      	beq.n	8004d28 <__ieee754_rem_pio2+0x188>
 8004d1a:	0002      	movs	r2, r0
 8004d1c:	000b      	movs	r3, r1
 8004d1e:	9804      	ldr	r0, [sp, #16]
 8004d20:	9905      	ldr	r1, [sp, #20]
 8004d22:	f7fc fe31 	bl	8001988 <__aeabi_dsub>
 8004d26:	e00b      	b.n	8004d40 <__ieee754_rem_pio2+0x1a0>
 8004d28:	9a06      	ldr	r2, [sp, #24]
 8004d2a:	9b07      	ldr	r3, [sp, #28]
 8004d2c:	9804      	ldr	r0, [sp, #16]
 8004d2e:	9905      	ldr	r1, [sp, #20]
 8004d30:	f7fc fe2a 	bl	8001988 <__aeabi_dsub>
 8004d34:	004b      	lsls	r3, r1, #1
 8004d36:	152e      	asrs	r6, r5, #20
 8004d38:	0d5b      	lsrs	r3, r3, #21
 8004d3a:	1af3      	subs	r3, r6, r3
 8004d3c:	2b10      	cmp	r3, #16
 8004d3e:	dc02      	bgt.n	8004d46 <__ieee754_rem_pio2+0x1a6>
 8004d40:	6038      	str	r0, [r7, #0]
 8004d42:	6079      	str	r1, [r7, #4]
 8004d44:	e039      	b.n	8004dba <__ieee754_rem_pio2+0x21a>
 8004d46:	22d3      	movs	r2, #211	@ 0xd3
 8004d48:	9808      	ldr	r0, [sp, #32]
 8004d4a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8004d4c:	4b49      	ldr	r3, [pc, #292]	@ (8004e74 <__ieee754_rem_pio2+0x2d4>)
 8004d4e:	0552      	lsls	r2, r2, #21
 8004d50:	f7fc fb52 	bl	80013f8 <__aeabi_dmul>
 8004d54:	0004      	movs	r4, r0
 8004d56:	000d      	movs	r5, r1
 8004d58:	0002      	movs	r2, r0
 8004d5a:	000b      	movs	r3, r1
 8004d5c:	9804      	ldr	r0, [sp, #16]
 8004d5e:	9905      	ldr	r1, [sp, #20]
 8004d60:	f7fc fe12 	bl	8001988 <__aeabi_dsub>
 8004d64:	0002      	movs	r2, r0
 8004d66:	000b      	movs	r3, r1
 8004d68:	900a      	str	r0, [sp, #40]	@ 0x28
 8004d6a:	910b      	str	r1, [sp, #44]	@ 0x2c
 8004d6c:	9804      	ldr	r0, [sp, #16]
 8004d6e:	9905      	ldr	r1, [sp, #20]
 8004d70:	f7fc fe0a 	bl	8001988 <__aeabi_dsub>
 8004d74:	0022      	movs	r2, r4
 8004d76:	002b      	movs	r3, r5
 8004d78:	f7fc fe06 	bl	8001988 <__aeabi_dsub>
 8004d7c:	0004      	movs	r4, r0
 8004d7e:	000d      	movs	r5, r1
 8004d80:	9808      	ldr	r0, [sp, #32]
 8004d82:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8004d84:	4a3c      	ldr	r2, [pc, #240]	@ (8004e78 <__ieee754_rem_pio2+0x2d8>)
 8004d86:	4b3d      	ldr	r3, [pc, #244]	@ (8004e7c <__ieee754_rem_pio2+0x2dc>)
 8004d88:	f7fc fb36 	bl	80013f8 <__aeabi_dmul>
 8004d8c:	0022      	movs	r2, r4
 8004d8e:	002b      	movs	r3, r5
 8004d90:	f7fc fdfa 	bl	8001988 <__aeabi_dsub>
 8004d94:	000b      	movs	r3, r1
 8004d96:	0002      	movs	r2, r0
 8004d98:	9006      	str	r0, [sp, #24]
 8004d9a:	9107      	str	r1, [sp, #28]
 8004d9c:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8004d9e:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8004da0:	f7fc fdf2 	bl	8001988 <__aeabi_dsub>
 8004da4:	004b      	lsls	r3, r1, #1
 8004da6:	0d5b      	lsrs	r3, r3, #21
 8004da8:	1af3      	subs	r3, r6, r3
 8004daa:	2b31      	cmp	r3, #49	@ 0x31
 8004dac:	dc21      	bgt.n	8004df2 <__ieee754_rem_pio2+0x252>
 8004dae:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004db0:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8004db2:	6038      	str	r0, [r7, #0]
 8004db4:	6079      	str	r1, [r7, #4]
 8004db6:	9304      	str	r3, [sp, #16]
 8004db8:	9405      	str	r4, [sp, #20]
 8004dba:	683c      	ldr	r4, [r7, #0]
 8004dbc:	687d      	ldr	r5, [r7, #4]
 8004dbe:	9804      	ldr	r0, [sp, #16]
 8004dc0:	9905      	ldr	r1, [sp, #20]
 8004dc2:	0022      	movs	r2, r4
 8004dc4:	002b      	movs	r3, r5
 8004dc6:	f7fc fddf 	bl	8001988 <__aeabi_dsub>
 8004dca:	9a06      	ldr	r2, [sp, #24]
 8004dcc:	9b07      	ldr	r3, [sp, #28]
 8004dce:	f7fc fddb 	bl	8001988 <__aeabi_dsub>
 8004dd2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004dd4:	60b8      	str	r0, [r7, #8]
 8004dd6:	60f9      	str	r1, [r7, #12]
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	db00      	blt.n	8004dde <__ieee754_rem_pio2+0x23e>
 8004ddc:	e717      	b.n	8004c0e <__ieee754_rem_pio2+0x6e>
 8004dde:	2280      	movs	r2, #128	@ 0x80
 8004de0:	0612      	lsls	r2, r2, #24
 8004de2:	18ab      	adds	r3, r5, r2
 8004de4:	607b      	str	r3, [r7, #4]
 8004de6:	188b      	adds	r3, r1, r2
 8004de8:	603c      	str	r4, [r7, #0]
 8004dea:	60b8      	str	r0, [r7, #8]
 8004dec:	60fb      	str	r3, [r7, #12]
 8004dee:	9b02      	ldr	r3, [sp, #8]
 8004df0:	e744      	b.n	8004c7c <__ieee754_rem_pio2+0xdc>
 8004df2:	22b8      	movs	r2, #184	@ 0xb8
 8004df4:	9808      	ldr	r0, [sp, #32]
 8004df6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8004df8:	4b20      	ldr	r3, [pc, #128]	@ (8004e7c <__ieee754_rem_pio2+0x2dc>)
 8004dfa:	0592      	lsls	r2, r2, #22
 8004dfc:	f7fc fafc 	bl	80013f8 <__aeabi_dmul>
 8004e00:	0004      	movs	r4, r0
 8004e02:	000d      	movs	r5, r1
 8004e04:	0002      	movs	r2, r0
 8004e06:	000b      	movs	r3, r1
 8004e08:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8004e0a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8004e0c:	f7fc fdbc 	bl	8001988 <__aeabi_dsub>
 8004e10:	0002      	movs	r2, r0
 8004e12:	000b      	movs	r3, r1
 8004e14:	9004      	str	r0, [sp, #16]
 8004e16:	9105      	str	r1, [sp, #20]
 8004e18:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8004e1a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8004e1c:	f7fc fdb4 	bl	8001988 <__aeabi_dsub>
 8004e20:	0022      	movs	r2, r4
 8004e22:	002b      	movs	r3, r5
 8004e24:	f7fc fdb0 	bl	8001988 <__aeabi_dsub>
 8004e28:	0004      	movs	r4, r0
 8004e2a:	000d      	movs	r5, r1
 8004e2c:	9808      	ldr	r0, [sp, #32]
 8004e2e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8004e30:	4a18      	ldr	r2, [pc, #96]	@ (8004e94 <__ieee754_rem_pio2+0x2f4>)
 8004e32:	4b19      	ldr	r3, [pc, #100]	@ (8004e98 <__ieee754_rem_pio2+0x2f8>)
 8004e34:	f7fc fae0 	bl	80013f8 <__aeabi_dmul>
 8004e38:	0022      	movs	r2, r4
 8004e3a:	002b      	movs	r3, r5
 8004e3c:	f7fc fda4 	bl	8001988 <__aeabi_dsub>
 8004e40:	9006      	str	r0, [sp, #24]
 8004e42:	9107      	str	r1, [sp, #28]
 8004e44:	e769      	b.n	8004d1a <__ieee754_rem_pio2+0x17a>
 8004e46:	4b15      	ldr	r3, [pc, #84]	@ (8004e9c <__ieee754_rem_pio2+0x2fc>)
 8004e48:	429d      	cmp	r5, r3
 8004e4a:	d929      	bls.n	8004ea0 <__ieee754_rem_pio2+0x300>
 8004e4c:	0002      	movs	r2, r0
 8004e4e:	000b      	movs	r3, r1
 8004e50:	f7fc fd9a 	bl	8001988 <__aeabi_dsub>
 8004e54:	60b8      	str	r0, [r7, #8]
 8004e56:	60f9      	str	r1, [r7, #12]
 8004e58:	6038      	str	r0, [r7, #0]
 8004e5a:	6079      	str	r1, [r7, #4]
 8004e5c:	e6af      	b.n	8004bbe <__ieee754_rem_pio2+0x1e>
 8004e5e:	46c0      	nop			@ (mov r8, r8)
 8004e60:	3fe921fb 	.word	0x3fe921fb
 8004e64:	4002d97b 	.word	0x4002d97b
 8004e68:	3ff921fb 	.word	0x3ff921fb
 8004e6c:	54400000 	.word	0x54400000
 8004e70:	1a626331 	.word	0x1a626331
 8004e74:	3dd0b461 	.word	0x3dd0b461
 8004e78:	2e037073 	.word	0x2e037073
 8004e7c:	3ba3198a 	.word	0x3ba3198a
 8004e80:	413921fb 	.word	0x413921fb
 8004e84:	6dc9c883 	.word	0x6dc9c883
 8004e88:	3fe45f30 	.word	0x3fe45f30
 8004e8c:	3fe00000 	.word	0x3fe00000
 8004e90:	08005870 	.word	0x08005870
 8004e94:	252049c1 	.word	0x252049c1
 8004e98:	397b839a 	.word	0x397b839a
 8004e9c:	7fefffff 	.word	0x7fefffff
 8004ea0:	4b2a      	ldr	r3, [pc, #168]	@ (8004f4c <__ieee754_rem_pio2+0x3ac>)
 8004ea2:	152e      	asrs	r6, r5, #20
 8004ea4:	18f6      	adds	r6, r6, r3
 8004ea6:	0531      	lsls	r1, r6, #20
 8004ea8:	1a6b      	subs	r3, r5, r1
 8004eaa:	0019      	movs	r1, r3
 8004eac:	001d      	movs	r5, r3
 8004eae:	0004      	movs	r4, r0
 8004eb0:	f7fd f906 	bl	80020c0 <__aeabi_d2iz>
 8004eb4:	f7fd f940 	bl	8002138 <__aeabi_i2d>
 8004eb8:	0002      	movs	r2, r0
 8004eba:	000b      	movs	r3, r1
 8004ebc:	0020      	movs	r0, r4
 8004ebe:	0029      	movs	r1, r5
 8004ec0:	920e      	str	r2, [sp, #56]	@ 0x38
 8004ec2:	930f      	str	r3, [sp, #60]	@ 0x3c
 8004ec4:	f7fc fd60 	bl	8001988 <__aeabi_dsub>
 8004ec8:	2200      	movs	r2, #0
 8004eca:	4b21      	ldr	r3, [pc, #132]	@ (8004f50 <__ieee754_rem_pio2+0x3b0>)
 8004ecc:	f7fc fa94 	bl	80013f8 <__aeabi_dmul>
 8004ed0:	000d      	movs	r5, r1
 8004ed2:	0004      	movs	r4, r0
 8004ed4:	f7fd f8f4 	bl	80020c0 <__aeabi_d2iz>
 8004ed8:	f7fd f92e 	bl	8002138 <__aeabi_i2d>
 8004edc:	0002      	movs	r2, r0
 8004ede:	000b      	movs	r3, r1
 8004ee0:	0020      	movs	r0, r4
 8004ee2:	0029      	movs	r1, r5
 8004ee4:	9210      	str	r2, [sp, #64]	@ 0x40
 8004ee6:	9311      	str	r3, [sp, #68]	@ 0x44
 8004ee8:	f7fc fd4e 	bl	8001988 <__aeabi_dsub>
 8004eec:	2200      	movs	r2, #0
 8004eee:	4b18      	ldr	r3, [pc, #96]	@ (8004f50 <__ieee754_rem_pio2+0x3b0>)
 8004ef0:	f7fc fa82 	bl	80013f8 <__aeabi_dmul>
 8004ef4:	2503      	movs	r5, #3
 8004ef6:	9012      	str	r0, [sp, #72]	@ 0x48
 8004ef8:	9113      	str	r1, [sp, #76]	@ 0x4c
 8004efa:	ac0e      	add	r4, sp, #56	@ 0x38
 8004efc:	2200      	movs	r2, #0
 8004efe:	6920      	ldr	r0, [r4, #16]
 8004f00:	6961      	ldr	r1, [r4, #20]
 8004f02:	2300      	movs	r3, #0
 8004f04:	9502      	str	r5, [sp, #8]
 8004f06:	3c08      	subs	r4, #8
 8004f08:	3d01      	subs	r5, #1
 8004f0a:	f7fb fa81 	bl	8000410 <__aeabi_dcmpeq>
 8004f0e:	2800      	cmp	r0, #0
 8004f10:	d1f4      	bne.n	8004efc <__ieee754_rem_pio2+0x35c>
 8004f12:	4b10      	ldr	r3, [pc, #64]	@ (8004f54 <__ieee754_rem_pio2+0x3b4>)
 8004f14:	0032      	movs	r2, r6
 8004f16:	9301      	str	r3, [sp, #4]
 8004f18:	2302      	movs	r3, #2
 8004f1a:	0039      	movs	r1, r7
 8004f1c:	9300      	str	r3, [sp, #0]
 8004f1e:	a80e      	add	r0, sp, #56	@ 0x38
 8004f20:	9b02      	ldr	r3, [sp, #8]
 8004f22:	f000 f81d 	bl	8004f60 <__kernel_rem_pio2>
 8004f26:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004f28:	9002      	str	r0, [sp, #8]
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	db00      	blt.n	8004f30 <__ieee754_rem_pio2+0x390>
 8004f2e:	e66e      	b.n	8004c0e <__ieee754_rem_pio2+0x6e>
 8004f30:	2080      	movs	r0, #128	@ 0x80
 8004f32:	6879      	ldr	r1, [r7, #4]
 8004f34:	683a      	ldr	r2, [r7, #0]
 8004f36:	0600      	lsls	r0, r0, #24
 8004f38:	180b      	adds	r3, r1, r0
 8004f3a:	68f9      	ldr	r1, [r7, #12]
 8004f3c:	603a      	str	r2, [r7, #0]
 8004f3e:	607b      	str	r3, [r7, #4]
 8004f40:	68ba      	ldr	r2, [r7, #8]
 8004f42:	180b      	adds	r3, r1, r0
 8004f44:	60ba      	str	r2, [r7, #8]
 8004f46:	60fb      	str	r3, [r7, #12]
 8004f48:	e751      	b.n	8004dee <__ieee754_rem_pio2+0x24e>
 8004f4a:	46c0      	nop			@ (mov r8, r8)
 8004f4c:	fffffbea 	.word	0xfffffbea
 8004f50:	41700000 	.word	0x41700000
 8004f54:	080058f0 	.word	0x080058f0

08004f58 <fabs>:
 8004f58:	0049      	lsls	r1, r1, #1
 8004f5a:	084b      	lsrs	r3, r1, #1
 8004f5c:	0019      	movs	r1, r3
 8004f5e:	4770      	bx	lr

08004f60 <__kernel_rem_pio2>:
 8004f60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004f62:	4cc6      	ldr	r4, [pc, #792]	@ (800527c <__kernel_rem_pio2+0x31c>)
 8004f64:	44a5      	add	sp, r4
 8004f66:	0014      	movs	r4, r2
 8004f68:	9aa4      	ldr	r2, [sp, #656]	@ 0x290
 8004f6a:	930e      	str	r3, [sp, #56]	@ 0x38
 8004f6c:	4bc4      	ldr	r3, [pc, #784]	@ (8005280 <__kernel_rem_pio2+0x320>)
 8004f6e:	0092      	lsls	r2, r2, #2
 8004f70:	58d3      	ldr	r3, [r2, r3]
 8004f72:	900f      	str	r0, [sp, #60]	@ 0x3c
 8004f74:	9308      	str	r3, [sp, #32]
 8004f76:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004f78:	9105      	str	r1, [sp, #20]
 8004f7a:	3b01      	subs	r3, #1
 8004f7c:	930d      	str	r3, [sp, #52]	@ 0x34
 8004f7e:	2300      	movs	r3, #0
 8004f80:	9300      	str	r3, [sp, #0]
 8004f82:	0023      	movs	r3, r4
 8004f84:	3314      	adds	r3, #20
 8004f86:	db04      	blt.n	8004f92 <__kernel_rem_pio2+0x32>
 8004f88:	2118      	movs	r1, #24
 8004f8a:	1ee0      	subs	r0, r4, #3
 8004f8c:	f7fb f944 	bl	8000218 <__divsi3>
 8004f90:	9000      	str	r0, [sp, #0]
 8004f92:	9b00      	ldr	r3, [sp, #0]
 8004f94:	ae26      	add	r6, sp, #152	@ 0x98
 8004f96:	1c5a      	adds	r2, r3, #1
 8004f98:	2318      	movs	r3, #24
 8004f9a:	425b      	negs	r3, r3
 8004f9c:	4353      	muls	r3, r2
 8004f9e:	191b      	adds	r3, r3, r4
 8004fa0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8004fa2:	9302      	str	r3, [sp, #8]
 8004fa4:	9b00      	ldr	r3, [sp, #0]
 8004fa6:	1a9d      	subs	r5, r3, r2
 8004fa8:	002c      	movs	r4, r5
 8004faa:	9b08      	ldr	r3, [sp, #32]
 8004fac:	189f      	adds	r7, r3, r2
 8004fae:	1b63      	subs	r3, r4, r5
 8004fb0:	429f      	cmp	r7, r3
 8004fb2:	da0f      	bge.n	8004fd4 <__kernel_rem_pio2+0x74>
 8004fb4:	9d0e      	ldr	r5, [sp, #56]	@ 0x38
 8004fb6:	af76      	add	r7, sp, #472	@ 0x1d8
 8004fb8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004fba:	9a08      	ldr	r2, [sp, #32]
 8004fbc:	1aeb      	subs	r3, r5, r3
 8004fbe:	429a      	cmp	r2, r3
 8004fc0:	db30      	blt.n	8005024 <__kernel_rem_pio2+0xc4>
 8004fc2:	00eb      	lsls	r3, r5, #3
 8004fc4:	aa26      	add	r2, sp, #152	@ 0x98
 8004fc6:	2400      	movs	r4, #0
 8004fc8:	189e      	adds	r6, r3, r2
 8004fca:	2300      	movs	r3, #0
 8004fcc:	9306      	str	r3, [sp, #24]
 8004fce:	9407      	str	r4, [sp, #28]
 8004fd0:	2400      	movs	r4, #0
 8004fd2:	e01e      	b.n	8005012 <__kernel_rem_pio2+0xb2>
 8004fd4:	2c00      	cmp	r4, #0
 8004fd6:	db07      	blt.n	8004fe8 <__kernel_rem_pio2+0x88>
 8004fd8:	9aa5      	ldr	r2, [sp, #660]	@ 0x294
 8004fda:	00a3      	lsls	r3, r4, #2
 8004fdc:	58d0      	ldr	r0, [r2, r3]
 8004fde:	f7fd f8ab 	bl	8002138 <__aeabi_i2d>
 8004fe2:	c603      	stmia	r6!, {r0, r1}
 8004fe4:	3401      	adds	r4, #1
 8004fe6:	e7e2      	b.n	8004fae <__kernel_rem_pio2+0x4e>
 8004fe8:	2000      	movs	r0, #0
 8004fea:	2100      	movs	r1, #0
 8004fec:	e7f9      	b.n	8004fe2 <__kernel_rem_pio2+0x82>
 8004fee:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8004ff0:	00e1      	lsls	r1, r4, #3
 8004ff2:	1859      	adds	r1, r3, r1
 8004ff4:	6808      	ldr	r0, [r1, #0]
 8004ff6:	6849      	ldr	r1, [r1, #4]
 8004ff8:	6832      	ldr	r2, [r6, #0]
 8004ffa:	6873      	ldr	r3, [r6, #4]
 8004ffc:	f7fc f9fc 	bl	80013f8 <__aeabi_dmul>
 8005000:	0002      	movs	r2, r0
 8005002:	000b      	movs	r3, r1
 8005004:	9806      	ldr	r0, [sp, #24]
 8005006:	9907      	ldr	r1, [sp, #28]
 8005008:	f7fb fa4e 	bl	80004a8 <__aeabi_dadd>
 800500c:	9006      	str	r0, [sp, #24]
 800500e:	9107      	str	r1, [sp, #28]
 8005010:	3401      	adds	r4, #1
 8005012:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005014:	3e08      	subs	r6, #8
 8005016:	429c      	cmp	r4, r3
 8005018:	dde9      	ble.n	8004fee <__kernel_rem_pio2+0x8e>
 800501a:	9b06      	ldr	r3, [sp, #24]
 800501c:	9c07      	ldr	r4, [sp, #28]
 800501e:	3501      	adds	r5, #1
 8005020:	c718      	stmia	r7!, {r3, r4}
 8005022:	e7c9      	b.n	8004fb8 <__kernel_rem_pio2+0x58>
 8005024:	9b08      	ldr	r3, [sp, #32]
 8005026:	aa12      	add	r2, sp, #72	@ 0x48
 8005028:	009b      	lsls	r3, r3, #2
 800502a:	189b      	adds	r3, r3, r2
 800502c:	9311      	str	r3, [sp, #68]	@ 0x44
 800502e:	9b00      	ldr	r3, [sp, #0]
 8005030:	9aa5      	ldr	r2, [sp, #660]	@ 0x294
 8005032:	009b      	lsls	r3, r3, #2
 8005034:	18d3      	adds	r3, r2, r3
 8005036:	9310      	str	r3, [sp, #64]	@ 0x40
 8005038:	9b08      	ldr	r3, [sp, #32]
 800503a:	9300      	str	r3, [sp, #0]
 800503c:	9b00      	ldr	r3, [sp, #0]
 800503e:	aa76      	add	r2, sp, #472	@ 0x1d8
 8005040:	00db      	lsls	r3, r3, #3
 8005042:	18d3      	adds	r3, r2, r3
 8005044:	681e      	ldr	r6, [r3, #0]
 8005046:	685f      	ldr	r7, [r3, #4]
 8005048:	ab12      	add	r3, sp, #72	@ 0x48
 800504a:	001d      	movs	r5, r3
 800504c:	9c00      	ldr	r4, [sp, #0]
 800504e:	930a      	str	r3, [sp, #40]	@ 0x28
 8005050:	2c00      	cmp	r4, #0
 8005052:	dc73      	bgt.n	800513c <__kernel_rem_pio2+0x1dc>
 8005054:	0030      	movs	r0, r6
 8005056:	0039      	movs	r1, r7
 8005058:	9a02      	ldr	r2, [sp, #8]
 800505a:	f000 fad3 	bl	8005604 <scalbn>
 800505e:	23ff      	movs	r3, #255	@ 0xff
 8005060:	2200      	movs	r2, #0
 8005062:	059b      	lsls	r3, r3, #22
 8005064:	0004      	movs	r4, r0
 8005066:	000d      	movs	r5, r1
 8005068:	f7fc f9c6 	bl	80013f8 <__aeabi_dmul>
 800506c:	f000 fb36 	bl	80056dc <floor>
 8005070:	2200      	movs	r2, #0
 8005072:	4b84      	ldr	r3, [pc, #528]	@ (8005284 <__kernel_rem_pio2+0x324>)
 8005074:	f7fc f9c0 	bl	80013f8 <__aeabi_dmul>
 8005078:	0002      	movs	r2, r0
 800507a:	000b      	movs	r3, r1
 800507c:	0020      	movs	r0, r4
 800507e:	0029      	movs	r1, r5
 8005080:	f7fc fc82 	bl	8001988 <__aeabi_dsub>
 8005084:	000d      	movs	r5, r1
 8005086:	0004      	movs	r4, r0
 8005088:	f7fd f81a 	bl	80020c0 <__aeabi_d2iz>
 800508c:	900c      	str	r0, [sp, #48]	@ 0x30
 800508e:	f7fd f853 	bl	8002138 <__aeabi_i2d>
 8005092:	000b      	movs	r3, r1
 8005094:	0002      	movs	r2, r0
 8005096:	0029      	movs	r1, r5
 8005098:	0020      	movs	r0, r4
 800509a:	f7fc fc75 	bl	8001988 <__aeabi_dsub>
 800509e:	9b02      	ldr	r3, [sp, #8]
 80050a0:	0006      	movs	r6, r0
 80050a2:	000f      	movs	r7, r1
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	dd6f      	ble.n	8005188 <__kernel_rem_pio2+0x228>
 80050a8:	2018      	movs	r0, #24
 80050aa:	9b00      	ldr	r3, [sp, #0]
 80050ac:	aa12      	add	r2, sp, #72	@ 0x48
 80050ae:	3b01      	subs	r3, #1
 80050b0:	009b      	lsls	r3, r3, #2
 80050b2:	589a      	ldr	r2, [r3, r2]
 80050b4:	9902      	ldr	r1, [sp, #8]
 80050b6:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 80050b8:	1a40      	subs	r0, r0, r1
 80050ba:	0011      	movs	r1, r2
 80050bc:	4101      	asrs	r1, r0
 80050be:	1864      	adds	r4, r4, r1
 80050c0:	4081      	lsls	r1, r0
 80050c2:	1a52      	subs	r2, r2, r1
 80050c4:	a912      	add	r1, sp, #72	@ 0x48
 80050c6:	505a      	str	r2, [r3, r1]
 80050c8:	2317      	movs	r3, #23
 80050ca:	9902      	ldr	r1, [sp, #8]
 80050cc:	940c      	str	r4, [sp, #48]	@ 0x30
 80050ce:	1a5b      	subs	r3, r3, r1
 80050d0:	411a      	asrs	r2, r3
 80050d2:	9206      	str	r2, [sp, #24]
 80050d4:	9b06      	ldr	r3, [sp, #24]
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	dd68      	ble.n	80051ac <__kernel_rem_pio2+0x24c>
 80050da:	2200      	movs	r2, #0
 80050dc:	2580      	movs	r5, #128	@ 0x80
 80050de:	0014      	movs	r4, r2
 80050e0:	2001      	movs	r0, #1
 80050e2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80050e4:	4968      	ldr	r1, [pc, #416]	@ (8005288 <__kernel_rem_pio2+0x328>)
 80050e6:	3301      	adds	r3, #1
 80050e8:	930c      	str	r3, [sp, #48]	@ 0x30
 80050ea:	046d      	lsls	r5, r5, #17
 80050ec:	9b00      	ldr	r3, [sp, #0]
 80050ee:	4293      	cmp	r3, r2
 80050f0:	dd00      	ble.n	80050f4 <__kernel_rem_pio2+0x194>
 80050f2:	e098      	b.n	8005226 <__kernel_rem_pio2+0x2c6>
 80050f4:	9b02      	ldr	r3, [sp, #8]
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	dd05      	ble.n	8005106 <__kernel_rem_pio2+0x1a6>
 80050fa:	2b01      	cmp	r3, #1
 80050fc:	d100      	bne.n	8005100 <__kernel_rem_pio2+0x1a0>
 80050fe:	e0a4      	b.n	800524a <__kernel_rem_pio2+0x2ea>
 8005100:	2b02      	cmp	r3, #2
 8005102:	d100      	bne.n	8005106 <__kernel_rem_pio2+0x1a6>
 8005104:	e0ab      	b.n	800525e <__kernel_rem_pio2+0x2fe>
 8005106:	9b06      	ldr	r3, [sp, #24]
 8005108:	2b02      	cmp	r3, #2
 800510a:	d14f      	bne.n	80051ac <__kernel_rem_pio2+0x24c>
 800510c:	0032      	movs	r2, r6
 800510e:	003b      	movs	r3, r7
 8005110:	2000      	movs	r0, #0
 8005112:	495e      	ldr	r1, [pc, #376]	@ (800528c <__kernel_rem_pio2+0x32c>)
 8005114:	f7fc fc38 	bl	8001988 <__aeabi_dsub>
 8005118:	0006      	movs	r6, r0
 800511a:	000f      	movs	r7, r1
 800511c:	2c00      	cmp	r4, #0
 800511e:	d045      	beq.n	80051ac <__kernel_rem_pio2+0x24c>
 8005120:	9a02      	ldr	r2, [sp, #8]
 8005122:	2000      	movs	r0, #0
 8005124:	4959      	ldr	r1, [pc, #356]	@ (800528c <__kernel_rem_pio2+0x32c>)
 8005126:	f000 fa6d 	bl	8005604 <scalbn>
 800512a:	0002      	movs	r2, r0
 800512c:	000b      	movs	r3, r1
 800512e:	0030      	movs	r0, r6
 8005130:	0039      	movs	r1, r7
 8005132:	f7fc fc29 	bl	8001988 <__aeabi_dsub>
 8005136:	0006      	movs	r6, r0
 8005138:	000f      	movs	r7, r1
 800513a:	e037      	b.n	80051ac <__kernel_rem_pio2+0x24c>
 800513c:	2200      	movs	r2, #0
 800513e:	4b54      	ldr	r3, [pc, #336]	@ (8005290 <__kernel_rem_pio2+0x330>)
 8005140:	0030      	movs	r0, r6
 8005142:	0039      	movs	r1, r7
 8005144:	f7fc f958 	bl	80013f8 <__aeabi_dmul>
 8005148:	f7fc ffba 	bl	80020c0 <__aeabi_d2iz>
 800514c:	f7fc fff4 	bl	8002138 <__aeabi_i2d>
 8005150:	2200      	movs	r2, #0
 8005152:	4b50      	ldr	r3, [pc, #320]	@ (8005294 <__kernel_rem_pio2+0x334>)
 8005154:	9006      	str	r0, [sp, #24]
 8005156:	9107      	str	r1, [sp, #28]
 8005158:	f7fc f94e 	bl	80013f8 <__aeabi_dmul>
 800515c:	0002      	movs	r2, r0
 800515e:	000b      	movs	r3, r1
 8005160:	0030      	movs	r0, r6
 8005162:	0039      	movs	r1, r7
 8005164:	f7fc fc10 	bl	8001988 <__aeabi_dsub>
 8005168:	f7fc ffaa 	bl	80020c0 <__aeabi_d2iz>
 800516c:	3c01      	subs	r4, #1
 800516e:	aa76      	add	r2, sp, #472	@ 0x1d8
 8005170:	00e3      	lsls	r3, r4, #3
 8005172:	18d3      	adds	r3, r2, r3
 8005174:	c501      	stmia	r5!, {r0}
 8005176:	681a      	ldr	r2, [r3, #0]
 8005178:	685b      	ldr	r3, [r3, #4]
 800517a:	9806      	ldr	r0, [sp, #24]
 800517c:	9907      	ldr	r1, [sp, #28]
 800517e:	f7fb f993 	bl	80004a8 <__aeabi_dadd>
 8005182:	0006      	movs	r6, r0
 8005184:	000f      	movs	r7, r1
 8005186:	e763      	b.n	8005050 <__kernel_rem_pio2+0xf0>
 8005188:	9b02      	ldr	r3, [sp, #8]
 800518a:	2b00      	cmp	r3, #0
 800518c:	d107      	bne.n	800519e <__kernel_rem_pio2+0x23e>
 800518e:	9b00      	ldr	r3, [sp, #0]
 8005190:	aa12      	add	r2, sp, #72	@ 0x48
 8005192:	3b01      	subs	r3, #1
 8005194:	009b      	lsls	r3, r3, #2
 8005196:	589b      	ldr	r3, [r3, r2]
 8005198:	15db      	asrs	r3, r3, #23
 800519a:	9306      	str	r3, [sp, #24]
 800519c:	e79a      	b.n	80050d4 <__kernel_rem_pio2+0x174>
 800519e:	2200      	movs	r2, #0
 80051a0:	4b3d      	ldr	r3, [pc, #244]	@ (8005298 <__kernel_rem_pio2+0x338>)
 80051a2:	f7fb f959 	bl	8000458 <__aeabi_dcmpge>
 80051a6:	2800      	cmp	r0, #0
 80051a8:	d13a      	bne.n	8005220 <__kernel_rem_pio2+0x2c0>
 80051aa:	9006      	str	r0, [sp, #24]
 80051ac:	2200      	movs	r2, #0
 80051ae:	2300      	movs	r3, #0
 80051b0:	0030      	movs	r0, r6
 80051b2:	0039      	movs	r1, r7
 80051b4:	f7fb f92c 	bl	8000410 <__aeabi_dcmpeq>
 80051b8:	2800      	cmp	r0, #0
 80051ba:	d100      	bne.n	80051be <__kernel_rem_pio2+0x25e>
 80051bc:	e0b5      	b.n	800532a <__kernel_rem_pio2+0x3ca>
 80051be:	2200      	movs	r2, #0
 80051c0:	9b00      	ldr	r3, [sp, #0]
 80051c2:	3b01      	subs	r3, #1
 80051c4:	9908      	ldr	r1, [sp, #32]
 80051c6:	428b      	cmp	r3, r1
 80051c8:	da51      	bge.n	800526e <__kernel_rem_pio2+0x30e>
 80051ca:	2a00      	cmp	r2, #0
 80051cc:	d100      	bne.n	80051d0 <__kernel_rem_pio2+0x270>
 80051ce:	e096      	b.n	80052fe <__kernel_rem_pio2+0x39e>
 80051d0:	9b00      	ldr	r3, [sp, #0]
 80051d2:	aa12      	add	r2, sp, #72	@ 0x48
 80051d4:	3b01      	subs	r3, #1
 80051d6:	9300      	str	r3, [sp, #0]
 80051d8:	9b02      	ldr	r3, [sp, #8]
 80051da:	3b18      	subs	r3, #24
 80051dc:	9302      	str	r3, [sp, #8]
 80051de:	9b00      	ldr	r3, [sp, #0]
 80051e0:	009b      	lsls	r3, r3, #2
 80051e2:	589b      	ldr	r3, [r3, r2]
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d0f3      	beq.n	80051d0 <__kernel_rem_pio2+0x270>
 80051e8:	2000      	movs	r0, #0
 80051ea:	9a02      	ldr	r2, [sp, #8]
 80051ec:	4927      	ldr	r1, [pc, #156]	@ (800528c <__kernel_rem_pio2+0x32c>)
 80051ee:	f000 fa09 	bl	8005604 <scalbn>
 80051f2:	0004      	movs	r4, r0
 80051f4:	000d      	movs	r5, r1
 80051f6:	9e00      	ldr	r6, [sp, #0]
 80051f8:	2e00      	cmp	r6, #0
 80051fa:	db00      	blt.n	80051fe <__kernel_rem_pio2+0x29e>
 80051fc:	e0d2      	b.n	80053a4 <__kernel_rem_pio2+0x444>
 80051fe:	4b27      	ldr	r3, [pc, #156]	@ (800529c <__kernel_rem_pio2+0x33c>)
 8005200:	9c00      	ldr	r4, [sp, #0]
 8005202:	930a      	str	r3, [sp, #40]	@ 0x28
 8005204:	2c00      	cmp	r4, #0
 8005206:	da00      	bge.n	800520a <__kernel_rem_pio2+0x2aa>
 8005208:	e103      	b.n	8005412 <__kernel_rem_pio2+0x4b2>
 800520a:	00e3      	lsls	r3, r4, #3
 800520c:	aa76      	add	r2, sp, #472	@ 0x1d8
 800520e:	189f      	adds	r7, r3, r2
 8005210:	2300      	movs	r3, #0
 8005212:	2200      	movs	r2, #0
 8005214:	9202      	str	r2, [sp, #8]
 8005216:	9303      	str	r3, [sp, #12]
 8005218:	9b00      	ldr	r3, [sp, #0]
 800521a:	2500      	movs	r5, #0
 800521c:	1b1e      	subs	r6, r3, r4
 800521e:	e0ea      	b.n	80053f6 <__kernel_rem_pio2+0x496>
 8005220:	2302      	movs	r3, #2
 8005222:	9306      	str	r3, [sp, #24]
 8005224:	e759      	b.n	80050da <__kernel_rem_pio2+0x17a>
 8005226:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	2c00      	cmp	r4, #0
 800522c:	d10b      	bne.n	8005246 <__kernel_rem_pio2+0x2e6>
 800522e:	2b00      	cmp	r3, #0
 8005230:	d003      	beq.n	800523a <__kernel_rem_pio2+0x2da>
 8005232:	1aeb      	subs	r3, r5, r3
 8005234:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8005236:	6023      	str	r3, [r4, #0]
 8005238:	0003      	movs	r3, r0
 800523a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800523c:	3201      	adds	r2, #1
 800523e:	3404      	adds	r4, #4
 8005240:	940a      	str	r4, [sp, #40]	@ 0x28
 8005242:	001c      	movs	r4, r3
 8005244:	e752      	b.n	80050ec <__kernel_rem_pio2+0x18c>
 8005246:	1acb      	subs	r3, r1, r3
 8005248:	e7f4      	b.n	8005234 <__kernel_rem_pio2+0x2d4>
 800524a:	9b00      	ldr	r3, [sp, #0]
 800524c:	aa12      	add	r2, sp, #72	@ 0x48
 800524e:	3b01      	subs	r3, #1
 8005250:	009b      	lsls	r3, r3, #2
 8005252:	589a      	ldr	r2, [r3, r2]
 8005254:	0252      	lsls	r2, r2, #9
 8005256:	0a52      	lsrs	r2, r2, #9
 8005258:	a912      	add	r1, sp, #72	@ 0x48
 800525a:	505a      	str	r2, [r3, r1]
 800525c:	e753      	b.n	8005106 <__kernel_rem_pio2+0x1a6>
 800525e:	9b00      	ldr	r3, [sp, #0]
 8005260:	aa12      	add	r2, sp, #72	@ 0x48
 8005262:	3b01      	subs	r3, #1
 8005264:	009b      	lsls	r3, r3, #2
 8005266:	589a      	ldr	r2, [r3, r2]
 8005268:	0292      	lsls	r2, r2, #10
 800526a:	0a92      	lsrs	r2, r2, #10
 800526c:	e7f4      	b.n	8005258 <__kernel_rem_pio2+0x2f8>
 800526e:	0099      	lsls	r1, r3, #2
 8005270:	a812      	add	r0, sp, #72	@ 0x48
 8005272:	5809      	ldr	r1, [r1, r0]
 8005274:	3b01      	subs	r3, #1
 8005276:	430a      	orrs	r2, r1
 8005278:	e7a4      	b.n	80051c4 <__kernel_rem_pio2+0x264>
 800527a:	46c0      	nop			@ (mov r8, r8)
 800527c:	fffffd84 	.word	0xfffffd84
 8005280:	08005a38 	.word	0x08005a38
 8005284:	40200000 	.word	0x40200000
 8005288:	00ffffff 	.word	0x00ffffff
 800528c:	3ff00000 	.word	0x3ff00000
 8005290:	3e700000 	.word	0x3e700000
 8005294:	41700000 	.word	0x41700000
 8005298:	3fe00000 	.word	0x3fe00000
 800529c:	080059f8 	.word	0x080059f8
 80052a0:	3301      	adds	r3, #1
 80052a2:	9911      	ldr	r1, [sp, #68]	@ 0x44
 80052a4:	009a      	lsls	r2, r3, #2
 80052a6:	4252      	negs	r2, r2
 80052a8:	588a      	ldr	r2, [r1, r2]
 80052aa:	2a00      	cmp	r2, #0
 80052ac:	d0f8      	beq.n	80052a0 <__kernel_rem_pio2+0x340>
 80052ae:	9a00      	ldr	r2, [sp, #0]
 80052b0:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80052b2:	1c55      	adds	r5, r2, #1
 80052b4:	1852      	adds	r2, r2, r1
 80052b6:	00d2      	lsls	r2, r2, #3
 80052b8:	a926      	add	r1, sp, #152	@ 0x98
 80052ba:	188c      	adds	r4, r1, r2
 80052bc:	9a00      	ldr	r2, [sp, #0]
 80052be:	18d3      	adds	r3, r2, r3
 80052c0:	9306      	str	r3, [sp, #24]
 80052c2:	9b06      	ldr	r3, [sp, #24]
 80052c4:	42ab      	cmp	r3, r5
 80052c6:	da00      	bge.n	80052ca <__kernel_rem_pio2+0x36a>
 80052c8:	e6b7      	b.n	800503a <__kernel_rem_pio2+0xda>
 80052ca:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 80052cc:	00ab      	lsls	r3, r5, #2
 80052ce:	58d0      	ldr	r0, [r2, r3]
 80052d0:	f7fc ff32 	bl	8002138 <__aeabi_i2d>
 80052d4:	2200      	movs	r2, #0
 80052d6:	2300      	movs	r3, #0
 80052d8:	0027      	movs	r7, r4
 80052da:	2600      	movs	r6, #0
 80052dc:	6020      	str	r0, [r4, #0]
 80052de:	6061      	str	r1, [r4, #4]
 80052e0:	9200      	str	r2, [sp, #0]
 80052e2:	9301      	str	r3, [sp, #4]
 80052e4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80052e6:	429e      	cmp	r6, r3
 80052e8:	dd0b      	ble.n	8005302 <__kernel_rem_pio2+0x3a2>
 80052ea:	00eb      	lsls	r3, r5, #3
 80052ec:	aa76      	add	r2, sp, #472	@ 0x1d8
 80052ee:	18d3      	adds	r3, r2, r3
 80052f0:	3501      	adds	r5, #1
 80052f2:	9900      	ldr	r1, [sp, #0]
 80052f4:	9a01      	ldr	r2, [sp, #4]
 80052f6:	3408      	adds	r4, #8
 80052f8:	6019      	str	r1, [r3, #0]
 80052fa:	605a      	str	r2, [r3, #4]
 80052fc:	e7e1      	b.n	80052c2 <__kernel_rem_pio2+0x362>
 80052fe:	2301      	movs	r3, #1
 8005300:	e7cf      	b.n	80052a2 <__kernel_rem_pio2+0x342>
 8005302:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005304:	00f1      	lsls	r1, r6, #3
 8005306:	1859      	adds	r1, r3, r1
 8005308:	6808      	ldr	r0, [r1, #0]
 800530a:	6849      	ldr	r1, [r1, #4]
 800530c:	683a      	ldr	r2, [r7, #0]
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	f7fc f872 	bl	80013f8 <__aeabi_dmul>
 8005314:	0002      	movs	r2, r0
 8005316:	000b      	movs	r3, r1
 8005318:	9800      	ldr	r0, [sp, #0]
 800531a:	9901      	ldr	r1, [sp, #4]
 800531c:	f7fb f8c4 	bl	80004a8 <__aeabi_dadd>
 8005320:	3601      	adds	r6, #1
 8005322:	9000      	str	r0, [sp, #0]
 8005324:	9101      	str	r1, [sp, #4]
 8005326:	3f08      	subs	r7, #8
 8005328:	e7dc      	b.n	80052e4 <__kernel_rem_pio2+0x384>
 800532a:	9b02      	ldr	r3, [sp, #8]
 800532c:	0030      	movs	r0, r6
 800532e:	425a      	negs	r2, r3
 8005330:	0039      	movs	r1, r7
 8005332:	f000 f967 	bl	8005604 <scalbn>
 8005336:	2200      	movs	r2, #0
 8005338:	4bb0      	ldr	r3, [pc, #704]	@ (80055fc <__kernel_rem_pio2+0x69c>)
 800533a:	0006      	movs	r6, r0
 800533c:	000f      	movs	r7, r1
 800533e:	f7fb f88b 	bl	8000458 <__aeabi_dcmpge>
 8005342:	2800      	cmp	r0, #0
 8005344:	d025      	beq.n	8005392 <__kernel_rem_pio2+0x432>
 8005346:	2200      	movs	r2, #0
 8005348:	4bad      	ldr	r3, [pc, #692]	@ (8005600 <__kernel_rem_pio2+0x6a0>)
 800534a:	0030      	movs	r0, r6
 800534c:	0039      	movs	r1, r7
 800534e:	f7fc f853 	bl	80013f8 <__aeabi_dmul>
 8005352:	f7fc feb5 	bl	80020c0 <__aeabi_d2iz>
 8005356:	9b00      	ldr	r3, [sp, #0]
 8005358:	0004      	movs	r4, r0
 800535a:	009d      	lsls	r5, r3, #2
 800535c:	f7fc feec 	bl	8002138 <__aeabi_i2d>
 8005360:	2200      	movs	r2, #0
 8005362:	4ba6      	ldr	r3, [pc, #664]	@ (80055fc <__kernel_rem_pio2+0x69c>)
 8005364:	f7fc f848 	bl	80013f8 <__aeabi_dmul>
 8005368:	0002      	movs	r2, r0
 800536a:	000b      	movs	r3, r1
 800536c:	0030      	movs	r0, r6
 800536e:	0039      	movs	r1, r7
 8005370:	f7fc fb0a 	bl	8001988 <__aeabi_dsub>
 8005374:	f7fc fea4 	bl	80020c0 <__aeabi_d2iz>
 8005378:	ab12      	add	r3, sp, #72	@ 0x48
 800537a:	5158      	str	r0, [r3, r5]
 800537c:	9b00      	ldr	r3, [sp, #0]
 800537e:	aa12      	add	r2, sp, #72	@ 0x48
 8005380:	3301      	adds	r3, #1
 8005382:	9300      	str	r3, [sp, #0]
 8005384:	9b02      	ldr	r3, [sp, #8]
 8005386:	3318      	adds	r3, #24
 8005388:	9302      	str	r3, [sp, #8]
 800538a:	9b00      	ldr	r3, [sp, #0]
 800538c:	009b      	lsls	r3, r3, #2
 800538e:	509c      	str	r4, [r3, r2]
 8005390:	e72a      	b.n	80051e8 <__kernel_rem_pio2+0x288>
 8005392:	9b00      	ldr	r3, [sp, #0]
 8005394:	0030      	movs	r0, r6
 8005396:	0039      	movs	r1, r7
 8005398:	009c      	lsls	r4, r3, #2
 800539a:	f7fc fe91 	bl	80020c0 <__aeabi_d2iz>
 800539e:	ab12      	add	r3, sp, #72	@ 0x48
 80053a0:	5118      	str	r0, [r3, r4]
 80053a2:	e721      	b.n	80051e8 <__kernel_rem_pio2+0x288>
 80053a4:	00f3      	lsls	r3, r6, #3
 80053a6:	aa76      	add	r2, sp, #472	@ 0x1d8
 80053a8:	18d7      	adds	r7, r2, r3
 80053aa:	00b3      	lsls	r3, r6, #2
 80053ac:	aa12      	add	r2, sp, #72	@ 0x48
 80053ae:	5898      	ldr	r0, [r3, r2]
 80053b0:	f7fc fec2 	bl	8002138 <__aeabi_i2d>
 80053b4:	0022      	movs	r2, r4
 80053b6:	002b      	movs	r3, r5
 80053b8:	f7fc f81e 	bl	80013f8 <__aeabi_dmul>
 80053bc:	2200      	movs	r2, #0
 80053be:	6038      	str	r0, [r7, #0]
 80053c0:	6079      	str	r1, [r7, #4]
 80053c2:	4b8f      	ldr	r3, [pc, #572]	@ (8005600 <__kernel_rem_pio2+0x6a0>)
 80053c4:	0020      	movs	r0, r4
 80053c6:	0029      	movs	r1, r5
 80053c8:	f7fc f816 	bl	80013f8 <__aeabi_dmul>
 80053cc:	3e01      	subs	r6, #1
 80053ce:	0004      	movs	r4, r0
 80053d0:	000d      	movs	r5, r1
 80053d2:	e711      	b.n	80051f8 <__kernel_rem_pio2+0x298>
 80053d4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80053d6:	00e9      	lsls	r1, r5, #3
 80053d8:	18c9      	adds	r1, r1, r3
 80053da:	6808      	ldr	r0, [r1, #0]
 80053dc:	6849      	ldr	r1, [r1, #4]
 80053de:	cf0c      	ldmia	r7!, {r2, r3}
 80053e0:	f7fc f80a 	bl	80013f8 <__aeabi_dmul>
 80053e4:	0002      	movs	r2, r0
 80053e6:	000b      	movs	r3, r1
 80053e8:	9802      	ldr	r0, [sp, #8]
 80053ea:	9903      	ldr	r1, [sp, #12]
 80053ec:	f7fb f85c 	bl	80004a8 <__aeabi_dadd>
 80053f0:	9002      	str	r0, [sp, #8]
 80053f2:	9103      	str	r1, [sp, #12]
 80053f4:	3501      	adds	r5, #1
 80053f6:	9b08      	ldr	r3, [sp, #32]
 80053f8:	429d      	cmp	r5, r3
 80053fa:	dc01      	bgt.n	8005400 <__kernel_rem_pio2+0x4a0>
 80053fc:	42ae      	cmp	r6, r5
 80053fe:	dae9      	bge.n	80053d4 <__kernel_rem_pio2+0x474>
 8005400:	00f6      	lsls	r6, r6, #3
 8005402:	ab4e      	add	r3, sp, #312	@ 0x138
 8005404:	199b      	adds	r3, r3, r6
 8005406:	9902      	ldr	r1, [sp, #8]
 8005408:	9a03      	ldr	r2, [sp, #12]
 800540a:	3c01      	subs	r4, #1
 800540c:	6019      	str	r1, [r3, #0]
 800540e:	605a      	str	r2, [r3, #4]
 8005410:	e6f8      	b.n	8005204 <__kernel_rem_pio2+0x2a4>
 8005412:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 8005414:	2b02      	cmp	r3, #2
 8005416:	dc0b      	bgt.n	8005430 <__kernel_rem_pio2+0x4d0>
 8005418:	2b00      	cmp	r3, #0
 800541a:	dd00      	ble.n	800541e <__kernel_rem_pio2+0x4be>
 800541c:	e084      	b.n	8005528 <__kernel_rem_pio2+0x5c8>
 800541e:	d052      	beq.n	80054c6 <__kernel_rem_pio2+0x566>
 8005420:	2007      	movs	r0, #7
 8005422:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8005424:	4003      	ands	r3, r0
 8005426:	0018      	movs	r0, r3
 8005428:	239f      	movs	r3, #159	@ 0x9f
 800542a:	009b      	lsls	r3, r3, #2
 800542c:	449d      	add	sp, r3
 800542e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005430:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 8005432:	2b03      	cmp	r3, #3
 8005434:	d1f4      	bne.n	8005420 <__kernel_rem_pio2+0x4c0>
 8005436:	9b00      	ldr	r3, [sp, #0]
 8005438:	aa4e      	add	r2, sp, #312	@ 0x138
 800543a:	00db      	lsls	r3, r3, #3
 800543c:	18d4      	adds	r4, r2, r3
 800543e:	0025      	movs	r5, r4
 8005440:	9b00      	ldr	r3, [sp, #0]
 8005442:	9302      	str	r3, [sp, #8]
 8005444:	9b02      	ldr	r3, [sp, #8]
 8005446:	3d08      	subs	r5, #8
 8005448:	2b00      	cmp	r3, #0
 800544a:	dd00      	ble.n	800544e <__kernel_rem_pio2+0x4ee>
 800544c:	e07a      	b.n	8005544 <__kernel_rem_pio2+0x5e4>
 800544e:	9d00      	ldr	r5, [sp, #0]
 8005450:	3c08      	subs	r4, #8
 8005452:	2d01      	cmp	r5, #1
 8005454:	dd00      	ble.n	8005458 <__kernel_rem_pio2+0x4f8>
 8005456:	e095      	b.n	8005584 <__kernel_rem_pio2+0x624>
 8005458:	2000      	movs	r0, #0
 800545a:	2100      	movs	r1, #0
 800545c:	9b00      	ldr	r3, [sp, #0]
 800545e:	2b01      	cmp	r3, #1
 8005460:	dd00      	ble.n	8005464 <__kernel_rem_pio2+0x504>
 8005462:	e0ad      	b.n	80055c0 <__kernel_rem_pio2+0x660>
 8005464:	9b4e      	ldr	r3, [sp, #312]	@ 0x138
 8005466:	9c4f      	ldr	r4, [sp, #316]	@ 0x13c
 8005468:	9e50      	ldr	r6, [sp, #320]	@ 0x140
 800546a:	9f51      	ldr	r7, [sp, #324]	@ 0x144
 800546c:	9300      	str	r3, [sp, #0]
 800546e:	9401      	str	r4, [sp, #4]
 8005470:	9b06      	ldr	r3, [sp, #24]
 8005472:	2b00      	cmp	r3, #0
 8005474:	d000      	beq.n	8005478 <__kernel_rem_pio2+0x518>
 8005476:	e0af      	b.n	80055d8 <__kernel_rem_pio2+0x678>
 8005478:	9c00      	ldr	r4, [sp, #0]
 800547a:	9d01      	ldr	r5, [sp, #4]
 800547c:	9b05      	ldr	r3, [sp, #20]
 800547e:	601c      	str	r4, [r3, #0]
 8005480:	605d      	str	r5, [r3, #4]
 8005482:	609e      	str	r6, [r3, #8]
 8005484:	60df      	str	r7, [r3, #12]
 8005486:	6118      	str	r0, [r3, #16]
 8005488:	6159      	str	r1, [r3, #20]
 800548a:	e7c9      	b.n	8005420 <__kernel_rem_pio2+0x4c0>
 800548c:	9b00      	ldr	r3, [sp, #0]
 800548e:	aa4e      	add	r2, sp, #312	@ 0x138
 8005490:	00db      	lsls	r3, r3, #3
 8005492:	18d3      	adds	r3, r2, r3
 8005494:	0020      	movs	r0, r4
 8005496:	681a      	ldr	r2, [r3, #0]
 8005498:	685b      	ldr	r3, [r3, #4]
 800549a:	0029      	movs	r1, r5
 800549c:	f7fb f804 	bl	80004a8 <__aeabi_dadd>
 80054a0:	0004      	movs	r4, r0
 80054a2:	000d      	movs	r5, r1
 80054a4:	9b00      	ldr	r3, [sp, #0]
 80054a6:	3b01      	subs	r3, #1
 80054a8:	9300      	str	r3, [sp, #0]
 80054aa:	9b00      	ldr	r3, [sp, #0]
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	daed      	bge.n	800548c <__kernel_rem_pio2+0x52c>
 80054b0:	9b06      	ldr	r3, [sp, #24]
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d003      	beq.n	80054be <__kernel_rem_pio2+0x55e>
 80054b6:	2180      	movs	r1, #128	@ 0x80
 80054b8:	0609      	lsls	r1, r1, #24
 80054ba:	186b      	adds	r3, r5, r1
 80054bc:	001d      	movs	r5, r3
 80054be:	9b05      	ldr	r3, [sp, #20]
 80054c0:	601c      	str	r4, [r3, #0]
 80054c2:	605d      	str	r5, [r3, #4]
 80054c4:	e7ac      	b.n	8005420 <__kernel_rem_pio2+0x4c0>
 80054c6:	2400      	movs	r4, #0
 80054c8:	2500      	movs	r5, #0
 80054ca:	e7ee      	b.n	80054aa <__kernel_rem_pio2+0x54a>
 80054cc:	00e3      	lsls	r3, r4, #3
 80054ce:	aa4e      	add	r2, sp, #312	@ 0x138
 80054d0:	18d3      	adds	r3, r2, r3
 80054d2:	681a      	ldr	r2, [r3, #0]
 80054d4:	685b      	ldr	r3, [r3, #4]
 80054d6:	f7fa ffe7 	bl	80004a8 <__aeabi_dadd>
 80054da:	3c01      	subs	r4, #1
 80054dc:	2c00      	cmp	r4, #0
 80054de:	daf5      	bge.n	80054cc <__kernel_rem_pio2+0x56c>
 80054e0:	9c06      	ldr	r4, [sp, #24]
 80054e2:	0002      	movs	r2, r0
 80054e4:	000b      	movs	r3, r1
 80054e6:	2c00      	cmp	r4, #0
 80054e8:	d002      	beq.n	80054f0 <__kernel_rem_pio2+0x590>
 80054ea:	2480      	movs	r4, #128	@ 0x80
 80054ec:	0624      	lsls	r4, r4, #24
 80054ee:	190b      	adds	r3, r1, r4
 80054f0:	9c05      	ldr	r4, [sp, #20]
 80054f2:	2501      	movs	r5, #1
 80054f4:	6022      	str	r2, [r4, #0]
 80054f6:	6063      	str	r3, [r4, #4]
 80054f8:	0002      	movs	r2, r0
 80054fa:	000b      	movs	r3, r1
 80054fc:	984e      	ldr	r0, [sp, #312]	@ 0x138
 80054fe:	994f      	ldr	r1, [sp, #316]	@ 0x13c
 8005500:	f7fc fa42 	bl	8001988 <__aeabi_dsub>
 8005504:	0006      	movs	r6, r0
 8005506:	000f      	movs	r7, r1
 8005508:	ac4e      	add	r4, sp, #312	@ 0x138
 800550a:	9b00      	ldr	r3, [sp, #0]
 800550c:	3408      	adds	r4, #8
 800550e:	42ab      	cmp	r3, r5
 8005510:	da0e      	bge.n	8005530 <__kernel_rem_pio2+0x5d0>
 8005512:	9b06      	ldr	r3, [sp, #24]
 8005514:	2b00      	cmp	r3, #0
 8005516:	d003      	beq.n	8005520 <__kernel_rem_pio2+0x5c0>
 8005518:	2180      	movs	r1, #128	@ 0x80
 800551a:	0609      	lsls	r1, r1, #24
 800551c:	187b      	adds	r3, r7, r1
 800551e:	001f      	movs	r7, r3
 8005520:	9b05      	ldr	r3, [sp, #20]
 8005522:	609e      	str	r6, [r3, #8]
 8005524:	60df      	str	r7, [r3, #12]
 8005526:	e77b      	b.n	8005420 <__kernel_rem_pio2+0x4c0>
 8005528:	2000      	movs	r0, #0
 800552a:	2100      	movs	r1, #0
 800552c:	9c00      	ldr	r4, [sp, #0]
 800552e:	e7d5      	b.n	80054dc <__kernel_rem_pio2+0x57c>
 8005530:	0030      	movs	r0, r6
 8005532:	6822      	ldr	r2, [r4, #0]
 8005534:	6863      	ldr	r3, [r4, #4]
 8005536:	0039      	movs	r1, r7
 8005538:	f7fa ffb6 	bl	80004a8 <__aeabi_dadd>
 800553c:	3501      	adds	r5, #1
 800553e:	0006      	movs	r6, r0
 8005540:	000f      	movs	r7, r1
 8005542:	e7e2      	b.n	800550a <__kernel_rem_pio2+0x5aa>
 8005544:	9b02      	ldr	r3, [sp, #8]
 8005546:	3b01      	subs	r3, #1
 8005548:	9302      	str	r3, [sp, #8]
 800554a:	682a      	ldr	r2, [r5, #0]
 800554c:	686b      	ldr	r3, [r5, #4]
 800554e:	9208      	str	r2, [sp, #32]
 8005550:	9309      	str	r3, [sp, #36]	@ 0x24
 8005552:	9808      	ldr	r0, [sp, #32]
 8005554:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8005556:	68aa      	ldr	r2, [r5, #8]
 8005558:	68eb      	ldr	r3, [r5, #12]
 800555a:	920a      	str	r2, [sp, #40]	@ 0x28
 800555c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800555e:	f7fa ffa3 	bl	80004a8 <__aeabi_dadd>
 8005562:	0002      	movs	r2, r0
 8005564:	000b      	movs	r3, r1
 8005566:	0006      	movs	r6, r0
 8005568:	000f      	movs	r7, r1
 800556a:	9808      	ldr	r0, [sp, #32]
 800556c:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800556e:	f7fc fa0b 	bl	8001988 <__aeabi_dsub>
 8005572:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005574:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005576:	f7fa ff97 	bl	80004a8 <__aeabi_dadd>
 800557a:	602e      	str	r6, [r5, #0]
 800557c:	606f      	str	r7, [r5, #4]
 800557e:	60a8      	str	r0, [r5, #8]
 8005580:	60e9      	str	r1, [r5, #12]
 8005582:	e75f      	b.n	8005444 <__kernel_rem_pio2+0x4e4>
 8005584:	6822      	ldr	r2, [r4, #0]
 8005586:	6863      	ldr	r3, [r4, #4]
 8005588:	9202      	str	r2, [sp, #8]
 800558a:	9303      	str	r3, [sp, #12]
 800558c:	9802      	ldr	r0, [sp, #8]
 800558e:	9903      	ldr	r1, [sp, #12]
 8005590:	68a2      	ldr	r2, [r4, #8]
 8005592:	68e3      	ldr	r3, [r4, #12]
 8005594:	9208      	str	r2, [sp, #32]
 8005596:	9309      	str	r3, [sp, #36]	@ 0x24
 8005598:	f7fa ff86 	bl	80004a8 <__aeabi_dadd>
 800559c:	0002      	movs	r2, r0
 800559e:	000b      	movs	r3, r1
 80055a0:	0006      	movs	r6, r0
 80055a2:	000f      	movs	r7, r1
 80055a4:	9802      	ldr	r0, [sp, #8]
 80055a6:	9903      	ldr	r1, [sp, #12]
 80055a8:	f7fc f9ee 	bl	8001988 <__aeabi_dsub>
 80055ac:	9a08      	ldr	r2, [sp, #32]
 80055ae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80055b0:	f7fa ff7a 	bl	80004a8 <__aeabi_dadd>
 80055b4:	3d01      	subs	r5, #1
 80055b6:	60a0      	str	r0, [r4, #8]
 80055b8:	60e1      	str	r1, [r4, #12]
 80055ba:	6026      	str	r6, [r4, #0]
 80055bc:	6067      	str	r7, [r4, #4]
 80055be:	e747      	b.n	8005450 <__kernel_rem_pio2+0x4f0>
 80055c0:	9b00      	ldr	r3, [sp, #0]
 80055c2:	aa4e      	add	r2, sp, #312	@ 0x138
 80055c4:	00db      	lsls	r3, r3, #3
 80055c6:	18d3      	adds	r3, r2, r3
 80055c8:	681a      	ldr	r2, [r3, #0]
 80055ca:	685b      	ldr	r3, [r3, #4]
 80055cc:	f7fa ff6c 	bl	80004a8 <__aeabi_dadd>
 80055d0:	9b00      	ldr	r3, [sp, #0]
 80055d2:	3b01      	subs	r3, #1
 80055d4:	9300      	str	r3, [sp, #0]
 80055d6:	e741      	b.n	800545c <__kernel_rem_pio2+0x4fc>
 80055d8:	9c00      	ldr	r4, [sp, #0]
 80055da:	9b05      	ldr	r3, [sp, #20]
 80055dc:	9a01      	ldr	r2, [sp, #4]
 80055de:	601c      	str	r4, [r3, #0]
 80055e0:	2380      	movs	r3, #128	@ 0x80
 80055e2:	061b      	lsls	r3, r3, #24
 80055e4:	18d4      	adds	r4, r2, r3
 80055e6:	9a05      	ldr	r2, [sp, #20]
 80055e8:	6054      	str	r4, [r2, #4]
 80055ea:	001a      	movs	r2, r3
 80055ec:	9c05      	ldr	r4, [sp, #20]
 80055ee:	18fb      	adds	r3, r7, r3
 80055f0:	60e3      	str	r3, [r4, #12]
 80055f2:	188b      	adds	r3, r1, r2
 80055f4:	60a6      	str	r6, [r4, #8]
 80055f6:	6120      	str	r0, [r4, #16]
 80055f8:	6163      	str	r3, [r4, #20]
 80055fa:	e711      	b.n	8005420 <__kernel_rem_pio2+0x4c0>
 80055fc:	41700000 	.word	0x41700000
 8005600:	3e700000 	.word	0x3e700000

08005604 <scalbn>:
 8005604:	004b      	lsls	r3, r1, #1
 8005606:	b570      	push	{r4, r5, r6, lr}
 8005608:	0d5b      	lsrs	r3, r3, #21
 800560a:	0014      	movs	r4, r2
 800560c:	000d      	movs	r5, r1
 800560e:	2b00      	cmp	r3, #0
 8005610:	d10f      	bne.n	8005632 <scalbn+0x2e>
 8005612:	004b      	lsls	r3, r1, #1
 8005614:	085b      	lsrs	r3, r3, #1
 8005616:	4303      	orrs	r3, r0
 8005618:	d012      	beq.n	8005640 <scalbn+0x3c>
 800561a:	4b23      	ldr	r3, [pc, #140]	@ (80056a8 <scalbn+0xa4>)
 800561c:	2200      	movs	r2, #0
 800561e:	f7fb feeb 	bl	80013f8 <__aeabi_dmul>
 8005622:	4b22      	ldr	r3, [pc, #136]	@ (80056ac <scalbn+0xa8>)
 8005624:	429c      	cmp	r4, r3
 8005626:	da0c      	bge.n	8005642 <scalbn+0x3e>
 8005628:	4a21      	ldr	r2, [pc, #132]	@ (80056b0 <scalbn+0xac>)
 800562a:	4b22      	ldr	r3, [pc, #136]	@ (80056b4 <scalbn+0xb0>)
 800562c:	f7fb fee4 	bl	80013f8 <__aeabi_dmul>
 8005630:	e006      	b.n	8005640 <scalbn+0x3c>
 8005632:	4a21      	ldr	r2, [pc, #132]	@ (80056b8 <scalbn+0xb4>)
 8005634:	4293      	cmp	r3, r2
 8005636:	d108      	bne.n	800564a <scalbn+0x46>
 8005638:	0002      	movs	r2, r0
 800563a:	000b      	movs	r3, r1
 800563c:	f7fa ff34 	bl	80004a8 <__aeabi_dadd>
 8005640:	bd70      	pop	{r4, r5, r6, pc}
 8005642:	000d      	movs	r5, r1
 8005644:	004b      	lsls	r3, r1, #1
 8005646:	0d5b      	lsrs	r3, r3, #21
 8005648:	3b36      	subs	r3, #54	@ 0x36
 800564a:	4a1c      	ldr	r2, [pc, #112]	@ (80056bc <scalbn+0xb8>)
 800564c:	4294      	cmp	r4, r2
 800564e:	dd0a      	ble.n	8005666 <scalbn+0x62>
 8005650:	4c1b      	ldr	r4, [pc, #108]	@ (80056c0 <scalbn+0xbc>)
 8005652:	4d1c      	ldr	r5, [pc, #112]	@ (80056c4 <scalbn+0xc0>)
 8005654:	2900      	cmp	r1, #0
 8005656:	da01      	bge.n	800565c <scalbn+0x58>
 8005658:	4c19      	ldr	r4, [pc, #100]	@ (80056c0 <scalbn+0xbc>)
 800565a:	4d1b      	ldr	r5, [pc, #108]	@ (80056c8 <scalbn+0xc4>)
 800565c:	4a18      	ldr	r2, [pc, #96]	@ (80056c0 <scalbn+0xbc>)
 800565e:	4b19      	ldr	r3, [pc, #100]	@ (80056c4 <scalbn+0xc0>)
 8005660:	0020      	movs	r0, r4
 8005662:	0029      	movs	r1, r5
 8005664:	e7e2      	b.n	800562c <scalbn+0x28>
 8005666:	18e2      	adds	r2, r4, r3
 8005668:	4b18      	ldr	r3, [pc, #96]	@ (80056cc <scalbn+0xc8>)
 800566a:	429a      	cmp	r2, r3
 800566c:	dcf0      	bgt.n	8005650 <scalbn+0x4c>
 800566e:	2a00      	cmp	r2, #0
 8005670:	dd05      	ble.n	800567e <scalbn+0x7a>
 8005672:	4b17      	ldr	r3, [pc, #92]	@ (80056d0 <scalbn+0xcc>)
 8005674:	0512      	lsls	r2, r2, #20
 8005676:	402b      	ands	r3, r5
 8005678:	431a      	orrs	r2, r3
 800567a:	0011      	movs	r1, r2
 800567c:	e7e0      	b.n	8005640 <scalbn+0x3c>
 800567e:	0013      	movs	r3, r2
 8005680:	3335      	adds	r3, #53	@ 0x35
 8005682:	da08      	bge.n	8005696 <scalbn+0x92>
 8005684:	4c0a      	ldr	r4, [pc, #40]	@ (80056b0 <scalbn+0xac>)
 8005686:	4d0b      	ldr	r5, [pc, #44]	@ (80056b4 <scalbn+0xb0>)
 8005688:	2900      	cmp	r1, #0
 800568a:	da01      	bge.n	8005690 <scalbn+0x8c>
 800568c:	4c08      	ldr	r4, [pc, #32]	@ (80056b0 <scalbn+0xac>)
 800568e:	4d11      	ldr	r5, [pc, #68]	@ (80056d4 <scalbn+0xd0>)
 8005690:	4a07      	ldr	r2, [pc, #28]	@ (80056b0 <scalbn+0xac>)
 8005692:	4b08      	ldr	r3, [pc, #32]	@ (80056b4 <scalbn+0xb0>)
 8005694:	e7e4      	b.n	8005660 <scalbn+0x5c>
 8005696:	4b0e      	ldr	r3, [pc, #56]	@ (80056d0 <scalbn+0xcc>)
 8005698:	3236      	adds	r2, #54	@ 0x36
 800569a:	401d      	ands	r5, r3
 800569c:	0512      	lsls	r2, r2, #20
 800569e:	432a      	orrs	r2, r5
 80056a0:	0011      	movs	r1, r2
 80056a2:	4b0d      	ldr	r3, [pc, #52]	@ (80056d8 <scalbn+0xd4>)
 80056a4:	2200      	movs	r2, #0
 80056a6:	e7c1      	b.n	800562c <scalbn+0x28>
 80056a8:	43500000 	.word	0x43500000
 80056ac:	ffff3cb0 	.word	0xffff3cb0
 80056b0:	c2f8f359 	.word	0xc2f8f359
 80056b4:	01a56e1f 	.word	0x01a56e1f
 80056b8:	000007ff 	.word	0x000007ff
 80056bc:	0000c350 	.word	0x0000c350
 80056c0:	8800759c 	.word	0x8800759c
 80056c4:	7e37e43c 	.word	0x7e37e43c
 80056c8:	fe37e43c 	.word	0xfe37e43c
 80056cc:	000007fe 	.word	0x000007fe
 80056d0:	800fffff 	.word	0x800fffff
 80056d4:	81a56e1f 	.word	0x81a56e1f
 80056d8:	3c900000 	.word	0x3c900000

080056dc <floor>:
 80056dc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80056de:	004b      	lsls	r3, r1, #1
 80056e0:	4a36      	ldr	r2, [pc, #216]	@ (80057bc <floor+0xe0>)
 80056e2:	0d5b      	lsrs	r3, r3, #21
 80056e4:	189e      	adds	r6, r3, r2
 80056e6:	000c      	movs	r4, r1
 80056e8:	0005      	movs	r5, r0
 80056ea:	9001      	str	r0, [sp, #4]
 80056ec:	2e13      	cmp	r6, #19
 80056ee:	dc2f      	bgt.n	8005750 <floor+0x74>
 80056f0:	2e00      	cmp	r6, #0
 80056f2:	da14      	bge.n	800571e <floor+0x42>
 80056f4:	4a32      	ldr	r2, [pc, #200]	@ (80057c0 <floor+0xe4>)
 80056f6:	4b33      	ldr	r3, [pc, #204]	@ (80057c4 <floor+0xe8>)
 80056f8:	f7fa fed6 	bl	80004a8 <__aeabi_dadd>
 80056fc:	2200      	movs	r2, #0
 80056fe:	2300      	movs	r3, #0
 8005700:	f7fa fea0 	bl	8000444 <__aeabi_dcmpgt>
 8005704:	2800      	cmp	r0, #0
 8005706:	d007      	beq.n	8005718 <floor+0x3c>
 8005708:	2c00      	cmp	r4, #0
 800570a:	da50      	bge.n	80057ae <floor+0xd2>
 800570c:	0064      	lsls	r4, r4, #1
 800570e:	0864      	lsrs	r4, r4, #1
 8005710:	4325      	orrs	r5, r4
 8005712:	d14f      	bne.n	80057b4 <floor+0xd8>
 8005714:	2480      	movs	r4, #128	@ 0x80
 8005716:	0624      	lsls	r4, r4, #24
 8005718:	0021      	movs	r1, r4
 800571a:	0028      	movs	r0, r5
 800571c:	e022      	b.n	8005764 <floor+0x88>
 800571e:	4f2a      	ldr	r7, [pc, #168]	@ (80057c8 <floor+0xec>)
 8005720:	4137      	asrs	r7, r6
 8005722:	003b      	movs	r3, r7
 8005724:	400b      	ands	r3, r1
 8005726:	4303      	orrs	r3, r0
 8005728:	d01c      	beq.n	8005764 <floor+0x88>
 800572a:	4a25      	ldr	r2, [pc, #148]	@ (80057c0 <floor+0xe4>)
 800572c:	4b25      	ldr	r3, [pc, #148]	@ (80057c4 <floor+0xe8>)
 800572e:	f7fa febb 	bl	80004a8 <__aeabi_dadd>
 8005732:	2200      	movs	r2, #0
 8005734:	2300      	movs	r3, #0
 8005736:	f7fa fe85 	bl	8000444 <__aeabi_dcmpgt>
 800573a:	2800      	cmp	r0, #0
 800573c:	d0ec      	beq.n	8005718 <floor+0x3c>
 800573e:	2c00      	cmp	r4, #0
 8005740:	da03      	bge.n	800574a <floor+0x6e>
 8005742:	2380      	movs	r3, #128	@ 0x80
 8005744:	035b      	lsls	r3, r3, #13
 8005746:	4133      	asrs	r3, r6
 8005748:	18e4      	adds	r4, r4, r3
 800574a:	2500      	movs	r5, #0
 800574c:	43bc      	bics	r4, r7
 800574e:	e7e3      	b.n	8005718 <floor+0x3c>
 8005750:	2e33      	cmp	r6, #51	@ 0x33
 8005752:	dd09      	ble.n	8005768 <floor+0x8c>
 8005754:	2380      	movs	r3, #128	@ 0x80
 8005756:	00db      	lsls	r3, r3, #3
 8005758:	429e      	cmp	r6, r3
 800575a:	d103      	bne.n	8005764 <floor+0x88>
 800575c:	0002      	movs	r2, r0
 800575e:	000b      	movs	r3, r1
 8005760:	f7fa fea2 	bl	80004a8 <__aeabi_dadd>
 8005764:	b003      	add	sp, #12
 8005766:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005768:	2701      	movs	r7, #1
 800576a:	4a18      	ldr	r2, [pc, #96]	@ (80057cc <floor+0xf0>)
 800576c:	427f      	negs	r7, r7
 800576e:	189b      	adds	r3, r3, r2
 8005770:	40df      	lsrs	r7, r3
 8005772:	4238      	tst	r0, r7
 8005774:	d0f6      	beq.n	8005764 <floor+0x88>
 8005776:	4a12      	ldr	r2, [pc, #72]	@ (80057c0 <floor+0xe4>)
 8005778:	4b12      	ldr	r3, [pc, #72]	@ (80057c4 <floor+0xe8>)
 800577a:	f7fa fe95 	bl	80004a8 <__aeabi_dadd>
 800577e:	2200      	movs	r2, #0
 8005780:	2300      	movs	r3, #0
 8005782:	f7fa fe5f 	bl	8000444 <__aeabi_dcmpgt>
 8005786:	2800      	cmp	r0, #0
 8005788:	d0c6      	beq.n	8005718 <floor+0x3c>
 800578a:	2c00      	cmp	r4, #0
 800578c:	da02      	bge.n	8005794 <floor+0xb8>
 800578e:	2e14      	cmp	r6, #20
 8005790:	d102      	bne.n	8005798 <floor+0xbc>
 8005792:	3401      	adds	r4, #1
 8005794:	43bd      	bics	r5, r7
 8005796:	e7bf      	b.n	8005718 <floor+0x3c>
 8005798:	2234      	movs	r2, #52	@ 0x34
 800579a:	2301      	movs	r3, #1
 800579c:	1b92      	subs	r2, r2, r6
 800579e:	4093      	lsls	r3, r2
 80057a0:	18ed      	adds	r5, r5, r3
 80057a2:	9b01      	ldr	r3, [sp, #4]
 80057a4:	429d      	cmp	r5, r3
 80057a6:	419b      	sbcs	r3, r3
 80057a8:	425b      	negs	r3, r3
 80057aa:	18e4      	adds	r4, r4, r3
 80057ac:	e7f2      	b.n	8005794 <floor+0xb8>
 80057ae:	2500      	movs	r5, #0
 80057b0:	002c      	movs	r4, r5
 80057b2:	e7b1      	b.n	8005718 <floor+0x3c>
 80057b4:	2500      	movs	r5, #0
 80057b6:	4c06      	ldr	r4, [pc, #24]	@ (80057d0 <floor+0xf4>)
 80057b8:	e7ae      	b.n	8005718 <floor+0x3c>
 80057ba:	46c0      	nop			@ (mov r8, r8)
 80057bc:	fffffc01 	.word	0xfffffc01
 80057c0:	8800759c 	.word	0x8800759c
 80057c4:	7e37e43c 	.word	0x7e37e43c
 80057c8:	000fffff 	.word	0x000fffff
 80057cc:	fffffbed 	.word	0xfffffbed
 80057d0:	bff00000 	.word	0xbff00000

080057d4 <_init>:
 80057d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80057d6:	46c0      	nop			@ (mov r8, r8)
 80057d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80057da:	bc08      	pop	{r3}
 80057dc:	469e      	mov	lr, r3
 80057de:	4770      	bx	lr

080057e0 <_fini>:
 80057e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80057e2:	46c0      	nop			@ (mov r8, r8)
 80057e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80057e6:	bc08      	pop	{r3}
 80057e8:	469e      	mov	lr, r3
 80057ea:	4770      	bx	lr
